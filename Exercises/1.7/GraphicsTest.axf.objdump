
C:/Users/emari/Documents/CPEN 391/git/CPEN391-7B-Module1/Exercises/1.7/GraphicsTest.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 58 3f 00 00 5c 3f 00 00 60 3f 00 00     @...X?..\?..`?..
      30:	64 3f 00 00 54 3f 00 00 68 3f 00 00 6c 3f 00 00     d?..T?..h?..l?..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000e01 	bl	38e0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000407c 	.word	0x0000407c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_region_zero_size_ram+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_region_zero_size_ram+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_region_zero_size_ram+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffffc 	.word	0x3ffffffc
     120:	000048c8 	.word	0x000048c8

00000124 <__cs3_heap_start_ptr>:
     124:	000049d0 	.word	0x000049d0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffffc 	.word	0x3ffffffc

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000048d0 	.word	0x000048d0
     170:	000048d3 	.word	0x000048d3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000048d0 	.word	0x000048d0
     1bc:	000048d0 	.word	0x000048d0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000048d0 	.word	0x000048d0
     200:	00000000 	.word	0x00000000
     204:	00004008 	.word	0x00004008

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00004008 	.word	0x00004008
     250:	000048d4 	.word	0x000048d4
     254:	00004080 	.word	0x00004080
     258:	00000000 	.word	0x00000000

0000025c <WriteAPixel>:
* Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
********************************************************************************************/
void WriteAPixel(int x, int y, int Colour)
{
    // Deal with negative coordinates
    if (x < 0 || y < 0) {
     25c:	e1913000 	orrs	r3, r1, r0
     260:	412fff1e 	bxmi	lr
        return;
    }

	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
     264:	e3a0c000 	mov	r12, #0
     268:	e34fcf21 	movt	r12, #65313	; 0xff21
     26c:	e1dc30b0 	ldrh	r3, [r12]
     270:	e3130001 	tst	r3, #1
     274:	0afffffc 	beq	26c <WriteAPixel+0x10>

	GraphicsX1Reg = x;				// write coords to x1, y1
     278:	e6ff0070 	uxth	r0, r0
     27c:	e3a03000 	mov	r3, #0
     280:	e34f3f21 	movt	r3, #65313	; 0xff21
     284:	e1c300b2 	strh	r0, [r3, #2]
	GraphicsY1Reg = y;
     288:	e6ff1071 	uxth	r1, r1
     28c:	e1c310b4 	strh	r1, [r3, #4]
	GraphicsColourReg = Colour;			// set pixel colour
     290:	e6ff2072 	uxth	r2, r2
     294:	e1c320be 	strh	r2, [r3, #14]
	GraphicsCommandReg = PutAPixel;			// give graphics "write pixel" command
     298:	e3a0200a 	mov	r2, #10
     29c:	e1c320b0 	strh	r2, [r3]
     2a0:	e12fff1e 	bx	lr

000002a4 <ReadAPixel>:
* Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
*********************************************************************************************/

int ReadAPixel(int x, int y)
{
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
     2a4:	e3a02000 	mov	r2, #0
     2a8:	e34f2f21 	movt	r2, #65313	; 0xff21
     2ac:	e1d230b0 	ldrh	r3, [r2]
     2b0:	e3130001 	tst	r3, #1
     2b4:	0afffffc 	beq	2ac <ReadAPixel+0x8>

	GraphicsX1Reg = x;			// write coords to x1, y1
     2b8:	e6ff0070 	uxth	r0, r0
     2bc:	e3a03000 	mov	r3, #0
     2c0:	e34f3f21 	movt	r3, #65313	; 0xff21
     2c4:	e1c300b2 	strh	r0, [r3, #2]
	GraphicsY1Reg = y;
     2c8:	e6ff1071 	uxth	r1, r1
     2cc:	e1c310b4 	strh	r1, [r3, #4]
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
     2d0:	e3a0200b 	mov	r2, #11
     2d4:	e1c320b0 	strh	r2, [r3]

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
     2d8:	e3a02000 	mov	r2, #0
     2dc:	e34f2f21 	movt	r2, #65313	; 0xff21
     2e0:	e1d230b0 	ldrh	r3, [r2]
     2e4:	e3130001 	tst	r3, #1
     2e8:	0afffffc 	beq	2e0 <ReadAPixel+0x3c>
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
     2ec:	e3a03000 	mov	r3, #0
     2f0:	e34f3f21 	movt	r3, #65313	; 0xff21
     2f4:	e1d300be 	ldrh	r0, [r3, #14]
}
     2f8:	e12fff1e 	bx	lr

000002fc <ProgramPalette>:
**
************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
    WAIT_FOR_GRAPHICS;
     2fc:	e3a02000 	mov	r2, #0
     300:	e34f2f21 	movt	r2, #65313	; 0xff21
     304:	e1d230b0 	ldrh	r3, [r2]
     308:	e3130001 	tst	r3, #1
     30c:	0afffffc 	beq	304 <ProgramPalette+0x8>
    GraphicsColourReg = PaletteNumber;
     310:	e6ff0070 	uxth	r0, r0
     314:	e3a03000 	mov	r3, #0
     318:	e34f3f21 	movt	r3, #65313	; 0xff21
     31c:	e1c300be 	strh	r0, [r3, #14]
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
     320:	e1a02821 	lsr	r2, r1, #16
     324:	e1c320b2 	strh	r2, [r3, #2]
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
     328:	e6ff1071 	uxth	r1, r1
     32c:	e1c310b4 	strh	r1, [r3, #4]
    GraphicsCommandReg = ProgramPaletteColour; // issue command
     330:	e3a02010 	mov	r2, #16
     334:	e1c320b0 	strh	r2, [r3]
     338:	e12fff1e 	bx	lr

0000033c <HLine>:
}

// Draw a horizontal line from (x1,y1) to (x1+length-1, y1) of colour Colour
void HLine(int x1, int y1, int length, int Colour)
{
     33c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    // Deal with no length or negative length
    if (length <= 0) {
     340:	e3520000 	cmp	r2, #0
     344:	da00001a 	ble	3b4 <HLine+0x78>
        return;
    }

    // Deal with negative y
    if (y1 < 0) {
     348:	e3510000 	cmp	r1, #0
     34c:	ba000018 	blt	3b4 <HLine+0x78>
        return;
    }

    // Deal with negative x
    if (x1 < 0) {
     350:	e3500000 	cmp	r0, #0
     354:	aa000003 	bge	368 <HLine+0x2c>
        if (x1 + length <= 0) {
     358:	e0800002 	add	r0, r0, r2
     35c:	e3500000 	cmp	r0, #0
     360:	da000013 	ble	3b4 <HLine+0x78>
            return;
        } else {
            x1 = 0;
     364:	e3a00000 	mov	r0, #0
            length -= -x1;
        }
    }

	int x2 = x1 + length; // We don't write to coordinate (x2,y1), but use it as a stopping point instead
     368:	e0804002 	add	r4, r0, r2

    WAIT_FOR_GRAPHICS;              // is graphics ready for new command
     36c:	e3a0c000 	mov	r12, #0
     370:	e34fcf21 	movt	r12, #65313	; 0xff21
     374:	e1dc20b0 	ldrh	r2, [r12]
     378:	e3120001 	tst	r2, #1
     37c:	0afffffc 	beq	374 <HLine+0x38>

    GraphicsX1Reg = x1;              // write coords to x1, y1, and x2, y2
     380:	e6ff0070 	uxth	r0, r0
     384:	e3a02000 	mov	r2, #0
     388:	e34f2f21 	movt	r2, #65313	; 0xff21
     38c:	e1c200b2 	strh	r0, [r2, #2]
    GraphicsY1Reg = y1;
     390:	e6ff1071 	uxth	r1, r1
     394:	e1c210b4 	strh	r1, [r2, #4]
    GraphicsX2Reg = x2;
     398:	e6ff0074 	uxth	r0, r4
     39c:	e1c200b6 	strh	r0, [r2, #6]
    GraphicsY2Reg = y1;
     3a0:	e1c210b8 	strh	r1, [r2, #8]
    GraphicsColourReg = Colour;         // set pixel colour
     3a4:	e6ff3073 	uxth	r3, r3
     3a8:	e1c230be 	strh	r3, [r2, #14]
    GraphicsCommandReg = DrawHLine;         // give graphics "draw horizontal line" command
     3ac:	e3a03001 	mov	r3, #1
     3b0:	e1c230b0 	strh	r3, [r2]
}
     3b4:	e8bd0010 	ldmfd	sp!, {r4}
     3b8:	e12fff1e 	bx	lr

000003bc <VLine>:

// Draw a vertical line from (x1,y1) to (x1, y1+length-1) of colour Colour
void VLine(int x1, int y1, int length, int Colour)
{
     3bc:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    // Deal with no length or negative length
    if (length <= 0) {
     3c0:	e3520000 	cmp	r2, #0
     3c4:	da00001a 	ble	434 <VLine+0x78>
        return;
    }

    // Deal with negative x
    if (x1 < 0) {
     3c8:	e3500000 	cmp	r0, #0
     3cc:	ba000018 	blt	434 <VLine+0x78>
        return;
    }

    // Deal with negative y
    if (y1 < 0) {
     3d0:	e3510000 	cmp	r1, #0
     3d4:	aa000003 	bge	3e8 <VLine+0x2c>
        if (y1 + length <= 0) {
     3d8:	e0811002 	add	r1, r1, r2
     3dc:	e3510000 	cmp	r1, #0
     3e0:	da000013 	ble	434 <VLine+0x78>
            return;
        } else {
            y1 = 0;
     3e4:	e3a01000 	mov	r1, #0
            length -= -y1;
        }
    }

    int y2 = y1 + length; // We don't write to coordinate (x1,y2), but use it as a stopping point instead
     3e8:	e0814002 	add	r4, r1, r2

    WAIT_FOR_GRAPHICS;              // is graphics ready for new command
     3ec:	e3a0c000 	mov	r12, #0
     3f0:	e34fcf21 	movt	r12, #65313	; 0xff21
     3f4:	e1dc20b0 	ldrh	r2, [r12]
     3f8:	e3120001 	tst	r2, #1
     3fc:	0afffffc 	beq	3f4 <VLine+0x38>

    GraphicsX1Reg = x1;              // write coords to x1, y1, and x2, y2
     400:	e6ff0070 	uxth	r0, r0
     404:	e3a02000 	mov	r2, #0
     408:	e34f2f21 	movt	r2, #65313	; 0xff21
     40c:	e1c200b2 	strh	r0, [r2, #2]
    GraphicsY1Reg = y1;
     410:	e6ff1071 	uxth	r1, r1
     414:	e1c210b4 	strh	r1, [r2, #4]
    GraphicsX2Reg = x1;
     418:	e1c200b6 	strh	r0, [r2, #6]
    GraphicsY2Reg = y2;
     41c:	e6ff1074 	uxth	r1, r4
     420:	e1c210b8 	strh	r1, [r2, #8]
    GraphicsColourReg = Colour;         // set pixel colour
     424:	e6ff3073 	uxth	r3, r3
     428:	e1c230be 	strh	r3, [r2, #14]
    GraphicsCommandReg = DrawVLine;         // give graphics "draw vertical line" command
     42c:	e3a03002 	mov	r3, #2
     430:	e1c230b0 	strh	r3, [r2]
}
     434:	e8bd0010 	ldmfd	sp!, {r4}
     438:	e12fff1e 	bx	lr

0000043c <Line>:

// Draw a line from (x1,y1) to (x2,y2) of colour Colour
void Line(int x1, int y1, int x2, int y2, int Colour)
{
     43c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    WAIT_FOR_GRAPHICS;              // is graphics ready for new command
     440:	e3a04000 	mov	r4, #0
     444:	e34f4f21 	movt	r4, #65313	; 0xff21
     448:	e1d4c0b0 	ldrh	r12, [r4]
     44c:	e31c0001 	tst	r12, #1
     450:	0afffffc 	beq	448 <Line+0xc>

    GraphicsX1Reg = x1;              // write coords to x1, y1, and x2, y2
     454:	e6ff0070 	uxth	r0, r0
     458:	e3a0c000 	mov	r12, #0
     45c:	e34fcf21 	movt	r12, #65313	; 0xff21
     460:	e1cc00b2 	strh	r0, [r12, #2]
    GraphicsY1Reg = y1;
     464:	e6ff1071 	uxth	r1, r1
     468:	e1cc10b4 	strh	r1, [r12, #4]
    GraphicsX2Reg = x2;
     46c:	e6ff2072 	uxth	r2, r2
     470:	e1cc20b6 	strh	r2, [r12, #6]
    GraphicsY2Reg = y2;
     474:	e6ff3073 	uxth	r3, r3
     478:	e1cc30b8 	strh	r3, [r12, #8]
    GraphicsColourReg = Colour;         // set pixel colour
     47c:	e1dd30b4 	ldrh	r3, [sp, #4]
     480:	e1cc30be 	strh	r3, [r12, #14]
    GraphicsCommandReg = DrawLine;         // give graphics "draw line" command
     484:	e3a03003 	mov	r3, #3
     488:	e1cc30b0 	strh	r3, [r12]
}
     48c:	e8bd0010 	ldmfd	sp!, {r4}
     490:	e12fff1e 	bx	lr

00000494 <Triangle>:

// Draw a triangle of colour Colour that connects points (x1,y1), (x2,y2), and (x3, y3)
void Triangle(int x1, int y1, int x2, int y2, int x3, int y3, int Colour)
{
     494:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     498:	e24dd008 	sub	sp, sp, #8
     49c:	e1a08000 	mov	r8, r0
     4a0:	e1a07001 	mov	r7, r1
     4a4:	e1a09002 	mov	r9, r2
     4a8:	e1a0a003 	mov	r10, r3
     4ac:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
     4b0:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
     4b4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    Line(x1, y1, x2, y2, Colour);
     4b8:	e58d4000 	str	r4, [sp]
     4bc:	ebffffde 	bl	43c <Line>
    Line(x2, y2, x3, y3, Colour);
     4c0:	e58d4000 	str	r4, [sp]
     4c4:	e1a00009 	mov	r0, r9
     4c8:	e1a0100a 	mov	r1, r10
     4cc:	e1a02006 	mov	r2, r6
     4d0:	e1a03005 	mov	r3, r5
     4d4:	ebffffd8 	bl	43c <Line>
    Line(x3, y3, x1, y1, Colour);
     4d8:	e58d4000 	str	r4, [sp]
     4dc:	e1a00006 	mov	r0, r6
     4e0:	e1a01005 	mov	r1, r5
     4e4:	e1a02008 	mov	r2, r8
     4e8:	e1a03007 	mov	r3, r7
     4ec:	ebffffd2 	bl	43c <Line>
}
     4f0:	e28dd008 	add	sp, sp, #8
     4f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

000004f8 <Rectangle>:

// Draw a rectangle of colour Colour with a top left coordinate of (x1,y1) that is width pixels wide and height pixels tall
// The rectangle will be empty instead of filled
void Rectangle(int x1, int y1, int width, int height, int Colour)
{
     4f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     4fc:	e1a07000 	mov	r7, r0
     500:	e1a06001 	mov	r6, r1
     504:	e1a08002 	mov	r8, r2
     508:	e1a05003 	mov	r5, r3
     50c:	e59d4018 	ldr	r4, [sp, #24]
    HLine(x1, y1, width, Colour);
     510:	e1a03004 	mov	r3, r4
     514:	ebffff88 	bl	33c <HLine>
    HLine(x1, y1+height-1, width, Colour);
     518:	e0861005 	add	r1, r6, r5
     51c:	e1a00007 	mov	r0, r7
     520:	e2411001 	sub	r1, r1, #1
     524:	e1a02008 	mov	r2, r8
     528:	e1a03004 	mov	r3, r4
     52c:	ebffff82 	bl	33c <HLine>
    VLine(x1, y1, height, Colour);
     530:	e1a00007 	mov	r0, r7
     534:	e1a01006 	mov	r1, r6
     538:	e1a02005 	mov	r2, r5
     53c:	e1a03004 	mov	r3, r4
     540:	ebffff9d 	bl	3bc <VLine>
    VLine(x1+width-1, y1, height, Colour);
     544:	e0870008 	add	r0, r7, r8
     548:	e2400001 	sub	r0, r0, #1
     54c:	e1a01006 	mov	r1, r6
     550:	e1a02005 	mov	r2, r5
     554:	e1a03004 	mov	r3, r4
     558:	ebffff97 	bl	3bc <VLine>
     55c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000560 <FilledRectangle>:
}

// Draw a rectangle of colour Colour with a top left coordinate of (x1,y1) that is width pixels wide and height pixels tall
// The rectangle will be filled, instead of being empty
void FilledRectangle(int x1, int y1, int width, int height, int Colour)
{
     560:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     564:	e1a06000 	mov	r6, r0
     568:	e1a07002 	mov	r7, r2
     56c:	e59d8018 	ldr	r8, [sp, #24]
    int i;
    for(i=y1; i < y1+height; i++) {
     570:	e0815003 	add	r5, r1, r3
     574:	e1510005 	cmp	r1, r5
     578:	a8bd81f0 	popge	{r4, r5, r6, r7, r8, pc}
     57c:	e1a04001 	mov	r4, r1
        HLine(x1, i, width, Colour);
     580:	e1a00006 	mov	r0, r6
     584:	e1a01004 	mov	r1, r4
     588:	e1a02007 	mov	r2, r7
     58c:	e1a03008 	mov	r3, r8
     590:	ebffff69 	bl	33c <HLine>
// Draw a rectangle of colour Colour with a top left coordinate of (x1,y1) that is width pixels wide and height pixels tall
// The rectangle will be filled, instead of being empty
void FilledRectangle(int x1, int y1, int width, int height, int Colour)
{
    int i;
    for(i=y1; i < y1+height; i++) {
     594:	e2844001 	add	r4, r4, #1
     598:	e1540005 	cmp	r4, r5
     59c:	bafffff7 	blt	580 <FilledRectangle+0x20>
     5a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000005a4 <FilledRectangleWithBorder>:

// Draw a rectangle with a top left coordinate of (x1,y1) that is width pixels wide and height pixels tall
// The rectangle will be filled with the colour Colour, instead of being empty
// The rectangle will have a border of width borderWidth and the border will have a colour of BorderColour
void FilledRectangleWithBorder(int x1, int y1, int width, int height, int borderWidth, int FillColour, int BorderColour)
{
     5a4:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     5a8:	e24dd00c 	sub	sp, sp, #12
     5ac:	e1a07000 	mov	r7, r0
     5b0:	e1a06001 	mov	r6, r1
     5b4:	e1a0a002 	mov	r10, r2
     5b8:	e1a05003 	mov	r5, r3
     5bc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
     5c0:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    // Draw Border
    FilledRectangle(x1, y1, width, borderWidth, BorderColour); //Top
     5c4:	e58d8000 	str	r8, [sp]
     5c8:	e1a03004 	mov	r3, r4
     5cc:	ebffffe3 	bl	560 <FilledRectangle>
    FilledRectangle(x1, y1+height-borderWidth, width, borderWidth, BorderColour); //Bottom
     5d0:	e0861005 	add	r1, r6, r5
     5d4:	e58d8000 	str	r8, [sp]
     5d8:	e1a00007 	mov	r0, r7
     5dc:	e0641001 	rsb	r1, r4, r1
     5e0:	e1a0200a 	mov	r2, r10
     5e4:	e1a03004 	mov	r3, r4
     5e8:	ebffffdc 	bl	560 <FilledRectangle>
    FilledRectangle(x1, y1, borderWidth, height, BorderColour); //Left
     5ec:	e58d8000 	str	r8, [sp]
     5f0:	e1a00007 	mov	r0, r7
     5f4:	e1a01006 	mov	r1, r6
     5f8:	e1a02004 	mov	r2, r4
     5fc:	e1a03005 	mov	r3, r5
     600:	ebffffd6 	bl	560 <FilledRectangle>
    FilledRectangle(x1+width-borderWidth, y1, borderWidth, height, BorderColour); //Right
     604:	e087000a 	add	r0, r7, r10
     608:	e58d8000 	str	r8, [sp]
     60c:	e0640000 	rsb	r0, r4, r0
     610:	e1a01006 	mov	r1, r6
     614:	e1a02004 	mov	r2, r4
     618:	e1a03005 	mov	r3, r5
     61c:	ebffffcf 	bl	560 <FilledRectangle>

    // Fill in
    FilledRectangle(x1+borderWidth, y1+borderWidth, width-2*borderWidth, height-2*borderWidth, FillColour);
     620:	e0643f84 	rsb	r3, r4, r4, lsl #31
     624:	e1a03083 	lsl	r3, r3, #1
     628:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
     62c:	e58d2000 	str	r2, [sp]
     630:	e0870004 	add	r0, r7, r4
     634:	e0861004 	add	r1, r6, r4
     638:	e083200a 	add	r2, r3, r10
     63c:	e0853003 	add	r3, r5, r3
     640:	ebffffc6 	bl	560 <FilledRectangle>
}
     644:	e28dd00c 	add	sp, sp, #12
     648:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

0000064c <Circle>:

// Draws a circle centered at centreX and centreY
void Circle(int centreX, int centreY, int radius, int Colour)
{
     64c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    WAIT_FOR_GRAPHICS;              // is graphics ready for new command
     650:	e3a04000 	mov	r4, #0
     654:	e34f4f21 	movt	r4, #65313	; 0xff21
     658:	e1d4c0b0 	ldrh	r12, [r4]
     65c:	e31c0001 	tst	r12, #1
     660:	0afffffc 	beq	658 <Circle+0xc>

    GraphicsX1Reg = centreX;              // write coords to x1, y1
     664:	e6ff0070 	uxth	r0, r0
     668:	e3a0c000 	mov	r12, #0
     66c:	e34fcf21 	movt	r12, #65313	; 0xff21
     670:	e1cc00b2 	strh	r0, [r12, #2]
    GraphicsY1Reg = centreY;
     674:	e6ff1071 	uxth	r1, r1
     678:	e1cc10b4 	strh	r1, [r12, #4]
    GraphicsX2Reg = radius;             // write radius
     67c:	e6ff2072 	uxth	r2, r2
     680:	e1cc20b6 	strh	r2, [r12, #6]
    GraphicsColourReg = Colour;         // set pixel colour
     684:	e6ff3073 	uxth	r3, r3
     688:	e1cc30be 	strh	r3, [r12, #14]
    GraphicsCommandReg = DrawCircle;         // give graphics "draw line" command
     68c:	e3a03011 	mov	r3, #17
     690:	e1cc30b0 	strh	r3, [r12]
}
     694:	e8bd0010 	ldmfd	sp!, {r4}
     698:	e12fff1e 	bx	lr

0000069c <FilledCircle>:

void FilledCircle(int centreX, int centreY, int radius, int Colour)
{
     69c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     6a0:	e1a05000 	mov	r5, r0
     6a4:	e1a06001 	mov	r6, r1
     6a8:	e1a08003 	mov	r8, r3
    int i;
    for(i = 1; i <= radius; i++) {
     6ac:	e2527000 	subs	r7, r2, #0
     6b0:	d8bd81f0 	pople	{r4, r5, r6, r7, r8, pc}
     6b4:	e3a04001 	mov	r4, #1
        Circle(centreX, centreY, i, Colour);
     6b8:	e1a00005 	mov	r0, r5
     6bc:	e1a01006 	mov	r1, r6
     6c0:	e1a02004 	mov	r2, r4
     6c4:	e1a03008 	mov	r3, r8
     6c8:	ebffffdf 	bl	64c <Circle>
}

void FilledCircle(int centreX, int centreY, int radius, int Colour)
{
    int i;
    for(i = 1; i <= radius; i++) {
     6cc:	e2844001 	add	r4, r4, #1
     6d0:	e1570004 	cmp	r7, r4
     6d4:	aafffff7 	bge	6b8 <FilledCircle+0x1c>
     6d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000006dc <DrawRandomShape>:
        Circle(centreX, centreY, i, Colour);
    }
}

void DrawRandomShape(void) {
     6dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
     6e0:	e24dd010 	sub	sp, sp, #16
    int randomShape = rand() % 9; // 9 shapes in total
     6e4:	eb00017b 	bl	cd8 <rand>
     6e8:	e3084e39 	movw	r4, #36409	; 0x8e39
     6ec:	e34348e3 	movt	r4, #14563	; 0x38e3
     6f0:	e0c41094 	smull	r1, r4, r4, r0
     6f4:	e1a03fc0 	asr	r3, r0, #31
     6f8:	e06340c4 	rsb	r4, r3, r4, asr #1
     6fc:	e0844184 	add	r4, r4, r4, lsl #3
     700:	e0644000 	rsb	r4, r4, r0

    int x1 = rand()%WIDTH;
     704:	eb000173 	bl	cd8 <rand>
     708:	e308651f 	movw	r6, #34079	; 0x851f
     70c:	e34561eb 	movt	r6, #20971	; 0x51eb
     710:	e0c63096 	smull	r3, r6, r6, r0
     714:	e1a03fc0 	asr	r3, r0, #31
     718:	e0636446 	rsb	r6, r3, r6, asr #8
     71c:	e3a03e32 	mov	r3, #800	; 0x320
     720:	e0660693 	mls	r6, r3, r6, r0
    int y1 = rand()%HEIGHT;
     724:	eb00016b 	bl	cd8 <rand>
     728:	e3085889 	movw	r5, #34953	; 0x8889
     72c:	e3485888 	movt	r5, #34952	; 0x8888
     730:	e0c59095 	smull	r9, r5, r5, r0
     734:	e0855000 	add	r5, r5, r0
     738:	e1a02fc0 	asr	r2, r0, #31
     73c:	e0625445 	rsb	r5, r2, r5, asr #8
     740:	e0655205 	rsb	r5, r5, r5, lsl #4
     744:	e0405285 	sub	r5, r0, r5, lsl #5
    int colour = rand()%8; // 8 colours in total
     748:	eb000162 	bl	cd8 <rand>
     74c:	e1a03fc0 	asr	r3, r0, #31
     750:	e1a03ea3 	lsr	r3, r3, #29
     754:	e0807003 	add	r7, r0, r3
     758:	e2077007 	and	r7, r7, #7
     75c:	e0637007 	rsb	r7, r3, r7

    if (randomShape == 0) { // Horizontal Line 
     760:	e3540000 	cmp	r4, #0
     764:	1a000008 	bne	78c <DrawRandomShape+0xb0>
        int length = rand()%(WIDTH - x1);
     768:	eb00015a 	bl	cd8 <rand>
     76c:	e2661e32 	rsb	r1, r6, #800	; 0x320
     770:	eb000105 	bl	b8c <__aeabi_idivmod>
     774:	e1a02001 	mov	r2, r1
        HLine(x1, y1, length, colour);
     778:	e1a00006 	mov	r0, r6
     77c:	e1a01005 	mov	r1, r5
     780:	e1a03007 	mov	r3, r7
     784:	ebfffeec 	bl	33c <HLine>
     788:	ea0000ad 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 1) { // Vertical Line
     78c:	e3540001 	cmp	r4, #1
     790:	1a000008 	bne	7b8 <DrawRandomShape+0xdc>
        int length = rand()%(HEIGHT-y1);
     794:	eb00014f 	bl	cd8 <rand>
     798:	e2651e1e 	rsb	r1, r5, #480	; 0x1e0
     79c:	eb0000fa 	bl	b8c <__aeabi_idivmod>
     7a0:	e1a02001 	mov	r2, r1
        VLine(x1, y1, length, colour);
     7a4:	e1a00006 	mov	r0, r6
     7a8:	e1a01005 	mov	r1, r5
     7ac:	e1a03007 	mov	r3, r7
     7b0:	ebffff01 	bl	3bc <VLine>
     7b4:	ea0000a2 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 2) { // Line
     7b8:	e3540002 	cmp	r4, #2
     7bc:	1a000017 	bne	820 <DrawRandomShape+0x144>
        int x2 = rand()%WIDTH;
     7c0:	eb000144 	bl	cd8 <rand>
     7c4:	e1a04000 	mov	r4, r0
        int y2 = rand()%HEIGHT;
     7c8:	eb000142 	bl	cd8 <rand>
     7cc:	e1a03000 	mov	r3, r0
        HLine(x1, y1, length, colour);
    } else if (randomShape == 1) { // Vertical Line
        int length = rand()%(HEIGHT-y1);
        VLine(x1, y1, length, colour);
    } else if (randomShape == 2) { // Line
        int x2 = rand()%WIDTH;
     7d0:	e308251f 	movw	r2, #34079	; 0x851f
     7d4:	e34521eb 	movt	r2, #20971	; 0x51eb
     7d8:	e0c2c492 	smull	r12, r2, r2, r4
     7dc:	e1a01fc4 	asr	r1, r4, #31
     7e0:	e0612442 	rsb	r2, r1, r2, asr #8
        int y2 = rand()%HEIGHT;
     7e4:	e3081889 	movw	r1, #34953	; 0x8889
     7e8:	e3481888 	movt	r1, #34952	; 0x8888
     7ec:	e0c10391 	smull	r0, r1, r1, r3
     7f0:	e0811003 	add	r1, r1, r3
     7f4:	e1a00fc3 	asr	r0, r3, #31
     7f8:	e0601441 	rsb	r1, r0, r1, asr #8
     7fc:	e061c201 	rsb	r12, r1, r1, lsl #4
        Line(x1, y1, x2, y2, colour);
     800:	e58d7000 	str	r7, [sp]
     804:	e1a00006 	mov	r0, r6
     808:	e1a01005 	mov	r1, r5
     80c:	e3a0ee32 	mov	lr, #800	; 0x320
     810:	e062429e 	mls	r2, lr, r2, r4
     814:	e043328c 	sub	r3, r3, r12, lsl #5
     818:	ebffff07 	bl	43c <Line>
     81c:	ea000088 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 3) { // Triangle
     820:	e3540003 	cmp	r4, #3
     824:	1a000027 	bne	8c8 <DrawRandomShape+0x1ec>
        int x2 = rand()%WIDTH;
     828:	eb00012a 	bl	cd8 <rand>
     82c:	e1a08000 	mov	r8, r0
        int y2 = rand()%HEIGHT;
     830:	eb000128 	bl	cd8 <rand>
     834:	e1a04000 	mov	r4, r0
        int x3 = rand()%WIDTH;
     838:	eb000126 	bl	cd8 <rand>
     83c:	e1a0a000 	mov	r10, r0
        int y3 = rand()%HEIGHT;
     840:	eb000124 	bl	cd8 <rand>
     844:	e1a01000 	mov	r1, r0
    } else if (randomShape == 2) { // Line
        int x2 = rand()%WIDTH;
        int y2 = rand()%HEIGHT;
        Line(x1, y1, x2, y2, colour);
    } else if (randomShape == 3) { // Triangle
        int x2 = rand()%WIDTH;
     848:	e308c51f 	movw	r12, #34079	; 0x851f
     84c:	e345c1eb 	movt	r12, #20971	; 0x51eb
     850:	e0ce389c 	smull	r3, lr, r12, r8
     854:	e1a03fc8 	asr	r3, r8, #31
     858:	e063e44e 	rsb	lr, r3, lr, asr #8
     85c:	e3a02e32 	mov	r2, #800	; 0x320
        int y2 = rand()%HEIGHT;
     860:	e3080889 	movw	r0, #34953	; 0x8889
     864:	e3480888 	movt	r0, #34952	; 0x8888
     868:	e0c93490 	smull	r3, r9, r0, r4
     86c:	e0899004 	add	r9, r9, r4
     870:	e1a03fc4 	asr	r3, r4, #31
     874:	e0633449 	rsb	r3, r3, r9, asr #8
     878:	e0633203 	rsb	r3, r3, r3, lsl #4
        int x3 = rand()%WIDTH;
     87c:	e0cc9a9c 	smull	r9, r12, r12, r10
     880:	e1a09fca 	asr	r9, r10, #31
     884:	e069c44c 	rsb	r12, r9, r12, asr #8
     888:	e06aac92 	mls	r10, r2, r12, r10
        int y3 = rand()%HEIGHT;
        Triangle(x1, y1, x2, y2, x3, y3, colour);
     88c:	e58da000 	str	r10, [sp]
        Line(x1, y1, x2, y2, colour);
    } else if (randomShape == 3) { // Triangle
        int x2 = rand()%WIDTH;
        int y2 = rand()%HEIGHT;
        int x3 = rand()%WIDTH;
        int y3 = rand()%HEIGHT;
     890:	e0c0c190 	smull	r12, r0, r0, r1
     894:	e0800001 	add	r0, r0, r1
     898:	e1a0cfc1 	asr	r12, r1, #31
     89c:	e06c0440 	rsb	r0, r12, r0, asr #8
     8a0:	e0600200 	rsb	r0, r0, r0, lsl #4
     8a4:	e0411280 	sub	r1, r1, r0, lsl #5
        Triangle(x1, y1, x2, y2, x3, y3, colour);
     8a8:	e58d1004 	str	r1, [sp, #4]
     8ac:	e58d7008 	str	r7, [sp, #8]
     8b0:	e1a00006 	mov	r0, r6
     8b4:	e1a01005 	mov	r1, r5
     8b8:	e0628e92 	mls	r2, r2, lr, r8
     8bc:	e0443283 	sub	r3, r4, r3, lsl #5
     8c0:	ebfffef3 	bl	494 <Triangle>
     8c4:	ea00005e 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 4) { // Rectangle
     8c8:	e3540004 	cmp	r4, #4
     8cc:	1a00000d 	bne	908 <DrawRandomShape+0x22c>
        int width = rand()%(WIDTH - x1);
     8d0:	eb000100 	bl	cd8 <rand>
     8d4:	e2661e32 	rsb	r1, r6, #800	; 0x320
     8d8:	eb0000ab 	bl	b8c <__aeabi_idivmod>
     8dc:	e1a04001 	mov	r4, r1
        int height = rand()%(HEIGHT - y1);
     8e0:	eb0000fc 	bl	cd8 <rand>
     8e4:	e2651e1e 	rsb	r1, r5, #480	; 0x1e0
     8e8:	eb0000a7 	bl	b8c <__aeabi_idivmod>
     8ec:	e1a03001 	mov	r3, r1
        Rectangle(x1, y1, width, height, colour);
     8f0:	e58d7000 	str	r7, [sp]
     8f4:	e1a00006 	mov	r0, r6
     8f8:	e1a01005 	mov	r1, r5
     8fc:	e1a02004 	mov	r2, r4
     900:	ebfffefc 	bl	4f8 <Rectangle>
     904:	ea00004e 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 5) { // Filled Rectangle
     908:	e3540005 	cmp	r4, #5
     90c:	1a00000d 	bne	948 <DrawRandomShape+0x26c>
        int width = rand()%(WIDTH - x1);
     910:	eb0000f0 	bl	cd8 <rand>
     914:	e2661e32 	rsb	r1, r6, #800	; 0x320
     918:	eb00009b 	bl	b8c <__aeabi_idivmod>
     91c:	e1a04001 	mov	r4, r1
        int height = rand()%(HEIGHT - y1);
     920:	eb0000ec 	bl	cd8 <rand>
     924:	e2651e1e 	rsb	r1, r5, #480	; 0x1e0
     928:	eb000097 	bl	b8c <__aeabi_idivmod>
     92c:	e1a03001 	mov	r3, r1
        FilledRectangle(x1, y1, width, height, colour);
     930:	e58d7000 	str	r7, [sp]
     934:	e1a00006 	mov	r0, r6
     938:	e1a01005 	mov	r1, r5
     93c:	e1a02004 	mov	r2, r4
     940:	ebffff06 	bl	560 <FilledRectangle>
     944:	ea00003e 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 6) { // Filled Rectangle With Border
     948:	e3540006 	cmp	r4, #6
     94c:	1a00001f 	bne	9d0 <DrawRandomShape+0x2f4>
        int width = rand()%(WIDTH - x1);
     950:	eb0000e0 	bl	cd8 <rand>
     954:	e2661e32 	rsb	r1, r6, #800	; 0x320
     958:	eb00008b 	bl	b8c <__aeabi_idivmod>
     95c:	e1a08001 	mov	r8, r1
        int height = rand()%(HEIGHT - y1);
     960:	eb0000dc 	bl	cd8 <rand>
     964:	e2651e1e 	rsb	r1, r5, #480	; 0x1e0
     968:	eb000087 	bl	b8c <__aeabi_idivmod>
     96c:	e1a04001 	mov	r4, r1
        
        int min_dimension = width < height ? width : height;
     970:	e1510008 	cmp	r1, r8
     974:	b1a0a001 	movlt	r10, r1
     978:	a1a0a008 	movge	r10, r8
        int borderWidth = rand()%min_dimension;
     97c:	eb0000d5 	bl	cd8 <rand>
     980:	e1a0100a 	mov	r1, r10
     984:	eb000080 	bl	b8c <__aeabi_idivmod>
     988:	e1a0a001 	mov	r10, r1
        
        int borderColour;
        do {
            borderColour = rand()%8;
     98c:	eb0000d1 	bl	cd8 <rand>
     990:	e1a0cfc0 	asr	r12, r0, #31
     994:	e1a0ceac 	lsr	r12, r12, #29
     998:	e080000c 	add	r0, r0, r12
     99c:	e2000007 	and	r0, r0, #7
     9a0:	e06cc000 	rsb	r12, r12, r0
        } while (borderColour == colour);
     9a4:	e15c0007 	cmp	r12, r7
     9a8:	0afffff7 	beq	98c <DrawRandomShape+0x2b0>

        FilledRectangleWithBorder(x1, y1, width, height, borderWidth, colour, borderColour);
     9ac:	e58da000 	str	r10, [sp]
     9b0:	e58d7004 	str	r7, [sp, #4]
     9b4:	e58dc008 	str	r12, [sp, #8]
     9b8:	e1a00006 	mov	r0, r6
     9bc:	e1a01005 	mov	r1, r5
     9c0:	e1a02008 	mov	r2, r8
     9c4:	e1a03004 	mov	r3, r4
     9c8:	ebfffef5 	bl	5a4 <FilledRectangleWithBorder>
     9cc:	ea00001c 	b	a44 <DrawRandomShape+0x368>
    } else if (randomShape == 7) { // Circle
     9d0:	e3540007 	cmp	r4, #7
     9d4:	1a00000d 	bne	a10 <DrawRandomShape+0x334>
        int radius = rand()%(WIDTH/2);
     9d8:	eb0000be 	bl	cd8 <rand>
     9dc:	e1a03000 	mov	r3, r0
     9e0:	e308251f 	movw	r2, #34079	; 0x851f
     9e4:	e34521eb 	movt	r2, #20971	; 0x51eb
     9e8:	e0c20392 	smull	r0, r2, r2, r3
     9ec:	e1a01fc3 	asr	r1, r3, #31
     9f0:	e06123c2 	rsb	r2, r1, r2, asr #7
        Circle(x1, y1, radius, colour);
     9f4:	e1a00006 	mov	r0, r6
     9f8:	e1a01005 	mov	r1, r5
     9fc:	e3a0ce19 	mov	r12, #400	; 0x190
     a00:	e062329c 	mls	r2, r12, r2, r3
     a04:	e1a03007 	mov	r3, r7
     a08:	ebffff0f 	bl	64c <Circle>
     a0c:	ea00000c 	b	a44 <DrawRandomShape+0x368>
    } else { // Filled Circle
        int radius = rand()%(WIDTH/2);
     a10:	eb0000b0 	bl	cd8 <rand>
     a14:	e1a03000 	mov	r3, r0
     a18:	e308251f 	movw	r2, #34079	; 0x851f
     a1c:	e34521eb 	movt	r2, #20971	; 0x51eb
     a20:	e0c21092 	smull	r1, r2, r2, r0
     a24:	e1a01fc0 	asr	r1, r0, #31
     a28:	e06123c2 	rsb	r2, r1, r2, asr #7
        FilledCircle(x1, y1, radius, colour);
     a2c:	e1a00006 	mov	r0, r6
     a30:	e1a01005 	mov	r1, r5
     a34:	e3a0ce19 	mov	r12, #400	; 0x190
     a38:	e062329c 	mls	r2, r12, r2, r3
     a3c:	e1a03007 	mov	r3, r7
     a40:	ebffff15 	bl	69c <FilledCircle>
    }
}
     a44:	e28dd010 	add	sp, sp, #16
     a48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00000a4c <main>:

int main(void)
{
     a4c:	e92d4008 	push	{r3, lr}
    printf("Starting...\n");
     a50:	e304000c 	movw	r0, #16396	; 0x400c
     a54:	e3400000 	movt	r0, #0
     a58:	eb000092 	bl	ca8 <puts>
    // Draw a filled circle
    FilledCircle(250, 50, 30, YELLOW); */

    // Draw random things on the screen
    while (1) {
        DrawRandomShape();
     a5c:	ebffff1e 	bl	6dc <DrawRandomShape>
     a60:	eafffffd 	b	a5c <main+0x10>

00000a64 <__aeabi_idiv>:
     a64:	e3510000 	cmp	r1, #0
     a68:	0a000043 	beq	b7c <.divsi3_skip_div0_test+0x110>

00000a6c <.divsi3_skip_div0_test>:
     a6c:	e020c001 	eor	r12, r0, r1
     a70:	42611000 	rsbmi	r1, r1, #0
     a74:	e2512001 	subs	r2, r1, #1
     a78:	0a000027 	beq	b1c <.divsi3_skip_div0_test+0xb0>
     a7c:	e1b03000 	movs	r3, r0
     a80:	42603000 	rsbmi	r3, r0, #0
     a84:	e1530001 	cmp	r3, r1
     a88:	9a000026 	bls	b28 <.divsi3_skip_div0_test+0xbc>
     a8c:	e1110002 	tst	r1, r2
     a90:	0a000028 	beq	b38 <.divsi3_skip_div0_test+0xcc>
     a94:	e311020e 	tst	r1, #-536870912	; 0xe0000000
     a98:	01a01181 	lsleq	r1, r1, #3
     a9c:	03a02008 	moveq	r2, #8
     aa0:	13a02001 	movne	r2, #1
     aa4:	e3510201 	cmp	r1, #268435456	; 0x10000000
     aa8:	31510003 	cmpcc	r1, r3
     aac:	31a01201 	lslcc	r1, r1, #4
     ab0:	31a02202 	lslcc	r2, r2, #4
     ab4:	3afffffa 	bcc	aa4 <.divsi3_skip_div0_test+0x38>
     ab8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     abc:	31510003 	cmpcc	r1, r3
     ac0:	31a01081 	lslcc	r1, r1, #1
     ac4:	31a02082 	lslcc	r2, r2, #1
     ac8:	3afffffa 	bcc	ab8 <.divsi3_skip_div0_test+0x4c>
     acc:	e3a00000 	mov	r0, #0
     ad0:	e1530001 	cmp	r3, r1
     ad4:	20433001 	subcs	r3, r3, r1
     ad8:	21800002 	orrcs	r0, r0, r2
     adc:	e15300a1 	cmp	r3, r1, lsr #1
     ae0:	204330a1 	subcs	r3, r3, r1, lsr #1
     ae4:	218000a2 	orrcs	r0, r0, r2, lsr #1
     ae8:	e1530121 	cmp	r3, r1, lsr #2
     aec:	20433121 	subcs	r3, r3, r1, lsr #2
     af0:	21800122 	orrcs	r0, r0, r2, lsr #2
     af4:	e15301a1 	cmp	r3, r1, lsr #3
     af8:	204331a1 	subcs	r3, r3, r1, lsr #3
     afc:	218001a2 	orrcs	r0, r0, r2, lsr #3
     b00:	e3530000 	cmp	r3, #0
     b04:	11b02222 	lsrsne	r2, r2, #4
     b08:	11a01221 	lsrne	r1, r1, #4
     b0c:	1affffef 	bne	ad0 <.divsi3_skip_div0_test+0x64>
     b10:	e35c0000 	cmp	r12, #0
     b14:	42600000 	rsbmi	r0, r0, #0
     b18:	e12fff1e 	bx	lr
     b1c:	e13c0000 	teq	r12, r0
     b20:	42600000 	rsbmi	r0, r0, #0
     b24:	e12fff1e 	bx	lr
     b28:	33a00000 	movcc	r0, #0
     b2c:	01a00fcc 	asreq	r0, r12, #31
     b30:	03800001 	orreq	r0, r0, #1
     b34:	e12fff1e 	bx	lr
     b38:	e3510801 	cmp	r1, #65536	; 0x10000
     b3c:	21a01821 	lsrcs	r1, r1, #16
     b40:	23a02010 	movcs	r2, #16
     b44:	33a02000 	movcc	r2, #0
     b48:	e3510c01 	cmp	r1, #256	; 0x100
     b4c:	21a01421 	lsrcs	r1, r1, #8
     b50:	22822008 	addcs	r2, r2, #8
     b54:	e3510010 	cmp	r1, #16
     b58:	21a01221 	lsrcs	r1, r1, #4
     b5c:	22822004 	addcs	r2, r2, #4
     b60:	e3510004 	cmp	r1, #4
     b64:	82822003 	addhi	r2, r2, #3
     b68:	908220a1 	addls	r2, r2, r1, lsr #1
     b6c:	e35c0000 	cmp	r12, #0
     b70:	e1a00233 	lsr	r0, r3, r2
     b74:	42600000 	rsbmi	r0, r0, #0
     b78:	e12fff1e 	bx	lr
     b7c:	e3500000 	cmp	r0, #0
     b80:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
     b84:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
     b88:	ea000007 	b	bac <__aeabi_idiv0>

00000b8c <__aeabi_idivmod>:
     b8c:	e3510000 	cmp	r1, #0
     b90:	0afffff9 	beq	b7c <.divsi3_skip_div0_test+0x110>
     b94:	e92d4003 	push	{r0, r1, lr}
     b98:	ebffffb3 	bl	a6c <.divsi3_skip_div0_test>
     b9c:	e8bd4006 	pop	{r1, r2, lr}
     ba0:	e0030092 	mul	r3, r2, r0
     ba4:	e0411003 	sub	r1, r1, r3
     ba8:	e12fff1e 	bx	lr

00000bac <__aeabi_idiv0>:
     bac:	e12fff1e 	bx	lr

00000bb0 <atexit>:
     bb0:	e1a01000 	mov	r1, r0
     bb4:	e3a00000 	mov	r0, #0
     bb8:	e92d4008 	push	{r3, lr}
     bbc:	e1a02000 	mov	r2, r0
     bc0:	e1a03000 	mov	r3, r0
     bc4:	eb000072 	bl	d94 <__register_exitproc>
     bc8:	e8bd4008 	pop	{r3, lr}
     bcc:	e12fff1e 	bx	lr

00000bd0 <exit>:
     bd0:	e92d4008 	push	{r3, lr}
     bd4:	e3a01000 	mov	r1, #0
     bd8:	e1a04000 	mov	r4, r0
     bdc:	eb0000a9 	bl	e88 <__call_exitprocs>
     be0:	e59f3018 	ldr	r3, [pc, #24]	; c00 <exit+0x30>
     be4:	e5930000 	ldr	r0, [r3]
     be8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     bec:	e3530000 	cmp	r3, #0
     bf0:	11a0e00f 	movne	lr, pc
     bf4:	112fff13 	bxne	r3
     bf8:	e1a00004 	mov	r0, r4
     bfc:	eb000b68 	bl	39a4 <_exit>
     c00:	00004018 	.word	0x00004018

00000c04 <_puts_r>:
     c04:	e92d4030 	push	{r4, r5, lr}
     c08:	e1a05000 	mov	r5, r0
     c0c:	e24dd024 	sub	sp, sp, #36	; 0x24
     c10:	e1a00001 	mov	r0, r1
     c14:	e1a04001 	mov	r4, r1
     c18:	eb000045 	bl	d34 <strlen>
     c1c:	e59f307c 	ldr	r3, [pc, #124]	; ca0 <_puts_r+0x9c>
     c20:	e5933000 	ldr	r3, [r3]
     c24:	e1a02000 	mov	r2, r0
     c28:	e5933008 	ldr	r3, [r3, #8]
     c2c:	e58d2014 	str	r2, [sp, #20]
     c30:	e59f206c 	ldr	r2, [pc, #108]	; ca4 <_puts_r+0xa0>
     c34:	e1d310bc 	ldrh	r1, [r3, #12]
     c38:	e58d2018 	str	r2, [sp, #24]
     c3c:	e3a02001 	mov	r2, #1
     c40:	e58d201c 	str	r2, [sp, #28]
     c44:	e28d2010 	add	r2, sp, #16
     c48:	e3110a02 	tst	r1, #8192	; 0x2000
     c4c:	e58d2004 	str	r2, [sp, #4]
     c50:	e3a02002 	mov	r2, #2
     c54:	e58d2008 	str	r2, [sp, #8]
     c58:	05932064 	ldreq	r2, [r3, #100]	; 0x64
     c5c:	03811a02 	orreq	r1, r1, #8192	; 0x2000
     c60:	03c22a02 	biceq	r2, r2, #8192	; 0x2000
     c64:	e2800001 	add	r0, r0, #1
     c68:	01c310bc 	strheq	r1, [r3, #12]
     c6c:	05832064 	streq	r2, [r3, #100]	; 0x64
     c70:	e58d000c 	str	r0, [sp, #12]
     c74:	e5951008 	ldr	r1, [r5, #8]
     c78:	e1a00005 	mov	r0, r5
     c7c:	e28d2004 	add	r2, sp, #4
     c80:	e58d4010 	str	r4, [sp, #16]
     c84:	eb0000f8 	bl	106c <__sfvwrite_r>
     c88:	e3500000 	cmp	r0, #0
     c8c:	03a0000a 	moveq	r0, #10
     c90:	13e00000 	mvnne	r0, #0
     c94:	e28dd024 	add	sp, sp, #36	; 0x24
     c98:	e8bd4030 	pop	{r4, r5, lr}
     c9c:	e12fff1e 	bx	lr
     ca0:	00004088 	.word	0x00004088
     ca4:	00004020 	.word	0x00004020

00000ca8 <puts>:
     ca8:	e59f3008 	ldr	r3, [pc, #8]	; cb8 <puts+0x10>
     cac:	e1a01000 	mov	r1, r0
     cb0:	e5930000 	ldr	r0, [r3]
     cb4:	eaffffd2 	b	c04 <_puts_r>
     cb8:	00004088 	.word	0x00004088

00000cbc <srand>:
     cbc:	e59f3010 	ldr	r3, [pc, #16]	; cd4 <srand+0x18>
     cc0:	e5933000 	ldr	r3, [r3]
     cc4:	e3a02000 	mov	r2, #0
     cc8:	e58300a8 	str	r0, [r3, #168]	; 0xa8
     ccc:	e58320ac 	str	r2, [r3, #172]	; 0xac
     cd0:	e12fff1e 	bx	lr
     cd4:	00004088 	.word	0x00004088

00000cd8 <rand>:
     cd8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     cdc:	e59f3044 	ldr	r3, [pc, #68]	; d28 <rand+0x50>
     ce0:	e593c000 	ldr	r12, [r3]
     ce4:	e59f4040 	ldr	r4, [pc, #64]	; d2c <rand+0x54>
     ce8:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
     cec:	e0040492 	mul	r4, r2, r4
     cf0:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
     cf4:	e59f3034 	ldr	r3, [pc, #52]	; d30 <rand+0x58>
     cf8:	e0244193 	mla	r4, r3, r1, r4
     cfc:	e0810392 	umull	r0, r1, r2, r3
     d00:	e3a02001 	mov	r2, #1
     d04:	e0922000 	adds	r2, r2, r0
     d08:	e0841001 	add	r1, r4, r1
     d0c:	e3a03000 	mov	r3, #0
     d10:	e0a33001 	adc	r3, r3, r1
     d14:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
     d18:	e58c30ac 	str	r3, [r12, #172]	; 0xac
     d1c:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
     d20:	e8bd0010 	ldmfd	sp!, {r4}
     d24:	e12fff1e 	bx	lr
     d28:	00004088 	.word	0x00004088
     d2c:	5851f42d 	.word	0x5851f42d
     d30:	4c957f2d 	.word	0x4c957f2d

00000d34 <strlen>:
     d34:	e3c01003 	bic	r1, r0, #3
     d38:	e2100003 	ands	r0, r0, #3
     d3c:	e2600000 	rsb	r0, r0, #0
     d40:	e4913004 	ldr	r3, [r1], #4
     d44:	e280c004 	add	r12, r0, #4
     d48:	e1a0c18c 	lsl	r12, r12, #3
     d4c:	e3e02000 	mvn	r2, #0
     d50:	11833c32 	orrne	r3, r3, r2, lsr r12
     d54:	e3a0c001 	mov	r12, #1
     d58:	e18cc40c 	orr	r12, r12, r12, lsl #8
     d5c:	e18cc80c 	orr	r12, r12, r12, lsl #16
     d60:	e043200c 	sub	r2, r3, r12
     d64:	e1c22003 	bic	r2, r2, r3
     d68:	e012238c 	ands	r2, r2, r12, lsl #7
     d6c:	04913004 	ldreq	r3, [r1], #4
     d70:	02800004 	addeq	r0, r0, #4
     d74:	0afffff9 	beq	d60 <strlen+0x2c>
     d78:	e31300ff 	tst	r3, #255	; 0xff
     d7c:	12800001 	addne	r0, r0, #1
     d80:	13130cff 	tstne	r3, #65280	; 0xff00
     d84:	12800001 	addne	r0, r0, #1
     d88:	131308ff 	tstne	r3, #16711680	; 0xff0000
     d8c:	12800001 	addne	r0, r0, #1
     d90:	e12fff1e 	bx	lr

00000d94 <__register_exitproc>:
     d94:	e59fc0e4 	ldr	r12, [pc, #228]	; e80 <__register_exitproc+0xec>
     d98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     d9c:	e59c4000 	ldr	r4, [r12]
     da0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     da4:	e35c0000 	cmp	r12, #0
     da8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     dac:	e59c5004 	ldr	r5, [r12, #4]
     db0:	0584c148 	streq	r12, [r4, #328]	; 0x148
     db4:	e355001f 	cmp	r5, #31
     db8:	e24dd010 	sub	sp, sp, #16
     dbc:	e1a06000 	mov	r6, r0
     dc0:	da000015 	ble	e1c <__register_exitproc+0x88>
     dc4:	e59f00b8 	ldr	r0, [pc, #184]	; e84 <__register_exitproc+0xf0>
     dc8:	e3500000 	cmp	r0, #0
     dcc:	1a000001 	bne	dd8 <__register_exitproc+0x44>
     dd0:	e3e00000 	mvn	r0, #0
     dd4:	ea000018 	b	e3c <__register_exitproc+0xa8>
     dd8:	e3a00e19 	mov	r0, #400	; 0x190
     ddc:	e58d100c 	str	r1, [sp, #12]
     de0:	e58d2008 	str	r2, [sp, #8]
     de4:	e58d3004 	str	r3, [sp, #4]
     de8:	e320f000 	nop	{0}
     dec:	e250c000 	subs	r12, r0, #0
     df0:	e59d100c 	ldr	r1, [sp, #12]
     df4:	e59d2008 	ldr	r2, [sp, #8]
     df8:	e59d3004 	ldr	r3, [sp, #4]
     dfc:	0afffff3 	beq	dd0 <__register_exitproc+0x3c>
     e00:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     e04:	e3a00000 	mov	r0, #0
     e08:	e58c0004 	str	r0, [r12, #4]
     e0c:	e58c5000 	str	r5, [r12]
     e10:	e584c148 	str	r12, [r4, #328]	; 0x148
     e14:	e58c0188 	str	r0, [r12, #392]	; 0x188
     e18:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     e1c:	e3560000 	cmp	r6, #0
     e20:	e59c4004 	ldr	r4, [r12, #4]
     e24:	1a000007 	bne	e48 <__register_exitproc+0xb4>
     e28:	e2843002 	add	r3, r4, #2
     e2c:	e2844001 	add	r4, r4, #1
     e30:	e78c1103 	str	r1, [r12, r3, lsl #2]
     e34:	e58c4004 	str	r4, [r12, #4]
     e38:	e3a00000 	mov	r0, #0
     e3c:	e28dd010 	add	sp, sp, #16
     e40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     e44:	e12fff1e 	bx	lr
     e48:	e3a00001 	mov	r0, #1
     e4c:	e1a00410 	lsl	r0, r0, r4
     e50:	e08c8104 	add	r8, r12, r4, lsl #2
     e54:	e3560002 	cmp	r6, #2
     e58:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     e5c:	e5883108 	str	r3, [r8, #264]	; 0x108
     e60:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     e64:	e1877000 	orr	r7, r7, r0
     e68:	01830000 	orreq	r0, r3, r0
     e6c:	e1a05008 	mov	r5, r8
     e70:	e5882088 	str	r2, [r8, #136]	; 0x88
     e74:	e58c7188 	str	r7, [r12, #392]	; 0x188
     e78:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     e7c:	eaffffe9 	b	e28 <__register_exitproc+0x94>
     e80:	00004018 	.word	0x00004018
     e84:	00000000 	.word	0x00000000

00000e88 <__call_exitprocs>:
     e88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e8c:	e59f3168 	ldr	r3, [pc, #360]	; ffc <__call_exitprocs+0x174>
     e90:	e5933000 	ldr	r3, [r3]
     e94:	e24dd014 	sub	sp, sp, #20
     e98:	e58d3004 	str	r3, [sp, #4]
     e9c:	e2833f52 	add	r3, r3, #328	; 0x148
     ea0:	e58d0008 	str	r0, [sp, #8]
     ea4:	e58d300c 	str	r3, [sp, #12]
     ea8:	e1a07001 	mov	r7, r1
     eac:	e3a08001 	mov	r8, #1
     eb0:	e59d3004 	ldr	r3, [sp, #4]
     eb4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     eb8:	e3560000 	cmp	r6, #0
     ebc:	e59db00c 	ldr	r11, [sp, #12]
     ec0:	0a000033 	beq	f94 <__call_exitprocs+0x10c>
     ec4:	e5965004 	ldr	r5, [r6, #4]
     ec8:	e2554001 	subs	r4, r5, #1
     ecc:	5286a088 	addpl	r10, r6, #136	; 0x88
     ed0:	5285501f 	addpl	r5, r5, #31
     ed4:	508a5105 	addpl	r5, r10, r5, lsl #2
     ed8:	5a000007 	bpl	efc <__call_exitprocs+0x74>
     edc:	ea000029 	b	f88 <__call_exitprocs+0x100>
     ee0:	e5953000 	ldr	r3, [r5]
     ee4:	e1530007 	cmp	r3, r7
     ee8:	0a000005 	beq	f04 <__call_exitprocs+0x7c>
     eec:	e2444001 	sub	r4, r4, #1
     ef0:	e3740001 	cmn	r4, #1
     ef4:	e2455004 	sub	r5, r5, #4
     ef8:	0a000022 	beq	f88 <__call_exitprocs+0x100>
     efc:	e3570000 	cmp	r7, #0
     f00:	1afffff6 	bne	ee0 <__call_exitprocs+0x58>
     f04:	e5963004 	ldr	r3, [r6, #4]
     f08:	e06a2005 	rsb	r2, r10, r5
     f0c:	e2433001 	sub	r3, r3, #1
     f10:	e0862002 	add	r2, r6, r2
     f14:	e1530004 	cmp	r3, r4
     f18:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     f1c:	13a01000 	movne	r1, #0
     f20:	05864004 	streq	r4, [r6, #4]
     f24:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     f28:	e3530000 	cmp	r3, #0
     f2c:	0affffee 	beq	eec <__call_exitprocs+0x64>
     f30:	e1a02418 	lsl	r2, r8, r4
     f34:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     f38:	e1120001 	tst	r2, r1
     f3c:	e5969004 	ldr	r9, [r6, #4]
     f40:	0a000016 	beq	fa0 <__call_exitprocs+0x118>
     f44:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     f48:	e1120001 	tst	r2, r1
     f4c:	1a000016 	bne	fac <__call_exitprocs+0x124>
     f50:	e59d0008 	ldr	r0, [sp, #8]
     f54:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     f58:	e1a0e00f 	mov	lr, pc
     f5c:	e12fff13 	bx	r3
     f60:	e5963004 	ldr	r3, [r6, #4]
     f64:	e1530009 	cmp	r3, r9
     f68:	1affffd0 	bne	eb0 <__call_exitprocs+0x28>
     f6c:	e59b3000 	ldr	r3, [r11]
     f70:	e1530006 	cmp	r3, r6
     f74:	1affffcd 	bne	eb0 <__call_exitprocs+0x28>
     f78:	e2444001 	sub	r4, r4, #1
     f7c:	e3740001 	cmn	r4, #1
     f80:	e2455004 	sub	r5, r5, #4
     f84:	1affffdc 	bne	efc <__call_exitprocs+0x74>
     f88:	e59f1070 	ldr	r1, [pc, #112]	; 1000 <__call_exitprocs+0x178>
     f8c:	e3510000 	cmp	r1, #0
     f90:	1a000009 	bne	fbc <__call_exitprocs+0x134>
     f94:	e28dd014 	add	sp, sp, #20
     f98:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f9c:	e12fff1e 	bx	lr
     fa0:	e1a0e00f 	mov	lr, pc
     fa4:	e12fff13 	bx	r3
     fa8:	eaffffec 	b	f60 <__call_exitprocs+0xd8>
     fac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     fb0:	e1a0e00f 	mov	lr, pc
     fb4:	e12fff13 	bx	r3
     fb8:	eaffffe8 	b	f60 <__call_exitprocs+0xd8>
     fbc:	e5963004 	ldr	r3, [r6, #4]
     fc0:	e3530000 	cmp	r3, #0
     fc4:	e5963000 	ldr	r3, [r6]
     fc8:	1a000008 	bne	ff0 <__call_exitprocs+0x168>
     fcc:	e3530000 	cmp	r3, #0
     fd0:	0a000006 	beq	ff0 <__call_exitprocs+0x168>
     fd4:	e1a00006 	mov	r0, r6
     fd8:	e58b3000 	str	r3, [r11]
     fdc:	e320f000 	nop	{0}
     fe0:	e59b6000 	ldr	r6, [r11]
     fe4:	e3560000 	cmp	r6, #0
     fe8:	1affffb5 	bne	ec4 <__call_exitprocs+0x3c>
     fec:	eaffffe8 	b	f94 <__call_exitprocs+0x10c>
     ff0:	e1a0b006 	mov	r11, r6
     ff4:	e1a06003 	mov	r6, r3
     ff8:	eafffff9 	b	fe4 <__call_exitprocs+0x15c>
     ffc:	00004018 	.word	0x00004018
    1000:	00000000 	.word	0x00000000

00001004 <register_fini>:
    1004:	e92d4008 	push	{r3, lr}
    1008:	e59f3010 	ldr	r3, [pc, #16]	; 1020 <register_fini+0x1c>
    100c:	e3530000 	cmp	r3, #0
    1010:	159f000c 	ldrne	r0, [pc, #12]	; 1024 <register_fini+0x20>
    1014:	1bfffee5 	blne	bb0 <atexit>
    1018:	e8bd4008 	pop	{r3, lr}
    101c:	e12fff1e 	bx	lr
    1020:	0000404c 	.word	0x0000404c
    1024:	00001028 	.word	0x00001028

00001028 <__libc_fini_array>:
    1028:	e92d4038 	push	{r3, r4, r5, lr}
    102c:	e59f5030 	ldr	r5, [pc, #48]	; 1064 <__libc_fini_array+0x3c>
    1030:	e59f4030 	ldr	r4, [pc, #48]	; 1068 <__libc_fini_array+0x40>
    1034:	e0654004 	rsb	r4, r5, r4
    1038:	e1b04144 	asrs	r4, r4, #2
    103c:	10855104 	addne	r5, r5, r4, lsl #2
    1040:	0a000004 	beq	1058 <__libc_fini_array+0x30>
    1044:	e5353004 	ldr	r3, [r5, #-4]!
    1048:	e1a0e00f 	mov	lr, pc
    104c:	e12fff13 	bx	r3
    1050:	e2544001 	subs	r4, r4, #1
    1054:	1afffffa 	bne	1044 <__libc_fini_array+0x1c>
    1058:	eb000bfb 	bl	404c <__libc_fini>
    105c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1060:	e12fff1e 	bx	lr
    1064:	00004064 	.word	0x00004064
    1068:	00004068 	.word	0x00004068

0000106c <__sfvwrite_r>:
    106c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1070:	e5923008 	ldr	r3, [r2, #8]
    1074:	e3530000 	cmp	r3, #0
    1078:	e24dd00c 	sub	sp, sp, #12
    107c:	e1a07002 	mov	r7, r2
    1080:	e1a0a000 	mov	r10, r0
    1084:	e1a04001 	mov	r4, r1
    1088:	0a00001e 	beq	1108 <__sfvwrite_r+0x9c>
    108c:	e1d130bc 	ldrh	r3, [r1, #12]
    1090:	e3130008 	tst	r3, #8
    1094:	0a00001f 	beq	1118 <__sfvwrite_r+0xac>
    1098:	e5912010 	ldr	r2, [r1, #16]
    109c:	e3520000 	cmp	r2, #0
    10a0:	0a00001c 	beq	1118 <__sfvwrite_r+0xac>
    10a4:	e2132002 	ands	r2, r3, #2
    10a8:	e5975000 	ldr	r5, [r7]
    10ac:	0a000029 	beq	1158 <__sfvwrite_r+0xec>
    10b0:	e3a08000 	mov	r8, #0
    10b4:	e1a06008 	mov	r6, r8
    10b8:	e3560000 	cmp	r6, #0
    10bc:	e1a02008 	mov	r2, r8
    10c0:	e1a0000a 	mov	r0, r10
    10c4:	0a00001f 	beq	1148 <__sfvwrite_r+0xdc>
    10c8:	e3560b01 	cmp	r6, #1024	; 0x400
    10cc:	31a03006 	movcc	r3, r6
    10d0:	23a03b01 	movcs	r3, #1024	; 0x400
    10d4:	e594101c 	ldr	r1, [r4, #28]
    10d8:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    10dc:	e1a0e00f 	mov	lr, pc
    10e0:	e12fff1c 	bx	r12
    10e4:	e3500000 	cmp	r0, #0
    10e8:	da000050 	ble	1230 <__sfvwrite_r+0x1c4>
    10ec:	e5973008 	ldr	r3, [r7, #8]
    10f0:	e0603003 	rsb	r3, r0, r3
    10f4:	e3530000 	cmp	r3, #0
    10f8:	e0888000 	add	r8, r8, r0
    10fc:	e0606006 	rsb	r6, r0, r6
    1100:	e5873008 	str	r3, [r7, #8]
    1104:	1affffeb 	bne	10b8 <__sfvwrite_r+0x4c>
    1108:	e3a00000 	mov	r0, #0
    110c:	e28dd00c 	add	sp, sp, #12
    1110:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1114:	e12fff1e 	bx	lr
    1118:	e1a0000a 	mov	r0, r10
    111c:	e1a01004 	mov	r1, r4
    1120:	eb00054f 	bl	2664 <__swsetup_r>
    1124:	e3500000 	cmp	r0, #0
    1128:	e1d430bc 	ldrh	r3, [r4, #12]
    112c:	0affffdc 	beq	10a4 <__sfvwrite_r+0x38>
    1130:	e3833040 	orr	r3, r3, #64	; 0x40
    1134:	e1c430bc 	strh	r3, [r4, #12]
    1138:	e3a03009 	mov	r3, #9
    113c:	e3e00000 	mvn	r0, #0
    1140:	e58a3000 	str	r3, [r10]
    1144:	eafffff0 	b	110c <__sfvwrite_r+0xa0>
    1148:	e5958000 	ldr	r8, [r5]
    114c:	e5956004 	ldr	r6, [r5, #4]
    1150:	e2855008 	add	r5, r5, #8
    1154:	eaffffd7 	b	10b8 <__sfvwrite_r+0x4c>
    1158:	e2139001 	ands	r9, r3, #1
    115c:	1a000038 	bne	1244 <__sfvwrite_r+0x1d8>
    1160:	e1a06009 	mov	r6, r9
    1164:	e3560000 	cmp	r6, #0
    1168:	0a000024 	beq	1200 <__sfvwrite_r+0x194>
    116c:	e3130c02 	tst	r3, #512	; 0x200
    1170:	e5948008 	ldr	r8, [r4, #8]
    1174:	e1a02003 	mov	r2, r3
    1178:	0a000062 	beq	1308 <__sfvwrite_r+0x29c>
    117c:	e1560008 	cmp	r6, r8
    1180:	e1a0c008 	mov	r12, r8
    1184:	3a000089 	bcc	13b0 <__sfvwrite_r+0x344>
    1188:	e2022d12 	and	r2, r2, #1152	; 0x480
    118c:	e3520000 	cmp	r2, #0
    1190:	1a0000a2 	bne	1420 <__sfvwrite_r+0x3b4>
    1194:	e5940000 	ldr	r0, [r4]
    1198:	e1a0b008 	mov	r11, r8
    119c:	e1a03006 	mov	r3, r6
    11a0:	e1a08006 	mov	r8, r6
    11a4:	e1a0200c 	mov	r2, r12
    11a8:	e1a01009 	mov	r1, r9
    11ac:	e58d3004 	str	r3, [sp, #4]
    11b0:	e58dc000 	str	r12, [sp]
    11b4:	eb00036e 	bl	1f74 <memmove>
    11b8:	e59dc000 	ldr	r12, [sp]
    11bc:	e5941008 	ldr	r1, [r4, #8]
    11c0:	e5942000 	ldr	r2, [r4]
    11c4:	e06bb001 	rsb	r11, r11, r1
    11c8:	e082c00c 	add	r12, r2, r12
    11cc:	e584b008 	str	r11, [r4, #8]
    11d0:	e584c000 	str	r12, [r4]
    11d4:	e59d3004 	ldr	r3, [sp, #4]
    11d8:	e5972008 	ldr	r2, [r7, #8]
    11dc:	e0688002 	rsb	r8, r8, r2
    11e0:	e3580000 	cmp	r8, #0
    11e4:	e0899003 	add	r9, r9, r3
    11e8:	e0636006 	rsb	r6, r3, r6
    11ec:	e5878008 	str	r8, [r7, #8]
    11f0:	0affffc4 	beq	1108 <__sfvwrite_r+0x9c>
    11f4:	e3560000 	cmp	r6, #0
    11f8:	e1d430bc 	ldrh	r3, [r4, #12]
    11fc:	1affffda 	bne	116c <__sfvwrite_r+0x100>
    1200:	e5959000 	ldr	r9, [r5]
    1204:	e5956004 	ldr	r6, [r5, #4]
    1208:	e2855008 	add	r5, r5, #8
    120c:	eaffffd4 	b	1164 <__sfvwrite_r+0xf8>
    1210:	eb0003a6 	bl	20b0 <_realloc_r>
    1214:	e2503000 	subs	r3, r0, #0
    1218:	1a00009d 	bne	1494 <__sfvwrite_r+0x428>
    121c:	e1a0000a 	mov	r0, r10
    1220:	e5941010 	ldr	r1, [r4, #16]
    1224:	eb0006e7 	bl	2dc8 <_free_r>
    1228:	e3a0300c 	mov	r3, #12
    122c:	e58a3000 	str	r3, [r10]
    1230:	e1d430bc 	ldrh	r3, [r4, #12]
    1234:	e3833040 	orr	r3, r3, #64	; 0x40
    1238:	e1c430bc 	strh	r3, [r4, #12]
    123c:	e3e00000 	mvn	r0, #0
    1240:	eaffffb1 	b	110c <__sfvwrite_r+0xa0>
    1244:	e1a09002 	mov	r9, r2
    1248:	e1a0c002 	mov	r12, r2
    124c:	e1a0b002 	mov	r11, r2
    1250:	e1a08002 	mov	r8, r2
    1254:	e3580000 	cmp	r8, #0
    1258:	0a000025 	beq	12f4 <__sfvwrite_r+0x288>
    125c:	e35c0000 	cmp	r12, #0
    1260:	0a000064 	beq	13f8 <__sfvwrite_r+0x38c>
    1264:	e5940000 	ldr	r0, [r4]
    1268:	e5942010 	ldr	r2, [r4, #16]
    126c:	e1590008 	cmp	r9, r8
    1270:	31a03009 	movcc	r3, r9
    1274:	21a03008 	movcs	r3, r8
    1278:	e1500002 	cmp	r0, r2
    127c:	e5946008 	ldr	r6, [r4, #8]
    1280:	e594e014 	ldr	lr, [r4, #20]
    1284:	9a000002 	bls	1294 <__sfvwrite_r+0x228>
    1288:	e086600e 	add	r6, r6, lr
    128c:	e1530006 	cmp	r3, r6
    1290:	ca00008a 	bgt	14c0 <__sfvwrite_r+0x454>
    1294:	e153000e 	cmp	r3, lr
    1298:	ba00002d 	blt	1354 <__sfvwrite_r+0x2e8>
    129c:	e594101c 	ldr	r1, [r4, #28]
    12a0:	e1a0000a 	mov	r0, r10
    12a4:	e58dc000 	str	r12, [sp]
    12a8:	e1a0200b 	mov	r2, r11
    12ac:	e1a0300e 	mov	r3, lr
    12b0:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    12b4:	e1a0e00f 	mov	lr, pc
    12b8:	e12fff1c 	bx	r12
    12bc:	e2506000 	subs	r6, r0, #0
    12c0:	e59dc000 	ldr	r12, [sp]
    12c4:	daffffd9 	ble	1230 <__sfvwrite_r+0x1c4>
    12c8:	e0599006 	subs	r9, r9, r6
    12cc:	0a000030 	beq	1394 <__sfvwrite_r+0x328>
    12d0:	e5973008 	ldr	r3, [r7, #8]
    12d4:	e0663003 	rsb	r3, r6, r3
    12d8:	e3530000 	cmp	r3, #0
    12dc:	e08bb006 	add	r11, r11, r6
    12e0:	e0668008 	rsb	r8, r6, r8
    12e4:	e5873008 	str	r3, [r7, #8]
    12e8:	0affff86 	beq	1108 <__sfvwrite_r+0x9c>
    12ec:	e3580000 	cmp	r8, #0
    12f0:	1affffd9 	bne	125c <__sfvwrite_r+0x1f0>
    12f4:	e595b000 	ldr	r11, [r5]
    12f8:	e5958004 	ldr	r8, [r5, #4]
    12fc:	e3a0c000 	mov	r12, #0
    1300:	e2855008 	add	r5, r5, #8
    1304:	eaffffd2 	b	1254 <__sfvwrite_r+0x1e8>
    1308:	e5940000 	ldr	r0, [r4]
    130c:	e5943010 	ldr	r3, [r4, #16]
    1310:	e1500003 	cmp	r0, r3
    1314:	9a000001 	bls	1320 <__sfvwrite_r+0x2b4>
    1318:	e1560008 	cmp	r6, r8
    131c:	8a000075 	bhi	14f8 <__sfvwrite_r+0x48c>
    1320:	e5943014 	ldr	r3, [r4, #20]
    1324:	e1560003 	cmp	r6, r3
    1328:	3a000026 	bcc	13c8 <__sfvwrite_r+0x35c>
    132c:	e1a0000a 	mov	r0, r10
    1330:	e594101c 	ldr	r1, [r4, #28]
    1334:	e1a02009 	mov	r2, r9
    1338:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    133c:	e1a0e00f 	mov	lr, pc
    1340:	e12fff1c 	bx	r12
    1344:	e2508000 	subs	r8, r0, #0
    1348:	daffffb8 	ble	1230 <__sfvwrite_r+0x1c4>
    134c:	e1a03008 	mov	r3, r8
    1350:	eaffffa0 	b	11d8 <__sfvwrite_r+0x16c>
    1354:	e1a02003 	mov	r2, r3
    1358:	e1a0100b 	mov	r1, r11
    135c:	e58d3004 	str	r3, [sp, #4]
    1360:	e58dc000 	str	r12, [sp]
    1364:	eb000302 	bl	1f74 <memmove>
    1368:	e59d3004 	ldr	r3, [sp, #4]
    136c:	e5941008 	ldr	r1, [r4, #8]
    1370:	e5942000 	ldr	r2, [r4]
    1374:	e1a06003 	mov	r6, r3
    1378:	e0631001 	rsb	r1, r3, r1
    137c:	e0822003 	add	r2, r2, r3
    1380:	e0599006 	subs	r9, r9, r6
    1384:	e5841008 	str	r1, [r4, #8]
    1388:	e5842000 	str	r2, [r4]
    138c:	e59dc000 	ldr	r12, [sp]
    1390:	1affffce 	bne	12d0 <__sfvwrite_r+0x264>
    1394:	e1a0000a 	mov	r0, r10
    1398:	e1a01004 	mov	r1, r4
    139c:	eb0004fe 	bl	279c <_fflush_r>
    13a0:	e3500000 	cmp	r0, #0
    13a4:	1affffa1 	bne	1230 <__sfvwrite_r+0x1c4>
    13a8:	e1a0c009 	mov	r12, r9
    13ac:	eaffffc7 	b	12d0 <__sfvwrite_r+0x264>
    13b0:	e5940000 	ldr	r0, [r4]
    13b4:	e1a0b006 	mov	r11, r6
    13b8:	e1a03006 	mov	r3, r6
    13bc:	e1a08006 	mov	r8, r6
    13c0:	e1a0c006 	mov	r12, r6
    13c4:	eaffff76 	b	11a4 <__sfvwrite_r+0x138>
    13c8:	e1a02006 	mov	r2, r6
    13cc:	e1a01009 	mov	r1, r9
    13d0:	eb0002e7 	bl	1f74 <memmove>
    13d4:	e5942008 	ldr	r2, [r4, #8]
    13d8:	e5943000 	ldr	r3, [r4]
    13dc:	e0662002 	rsb	r2, r6, r2
    13e0:	e0833006 	add	r3, r3, r6
    13e4:	e5843000 	str	r3, [r4]
    13e8:	e5842008 	str	r2, [r4, #8]
    13ec:	e1a08006 	mov	r8, r6
    13f0:	e1a03006 	mov	r3, r6
    13f4:	eaffff77 	b	11d8 <__sfvwrite_r+0x16c>
    13f8:	e1a0000b 	mov	r0, r11
    13fc:	e3a0100a 	mov	r1, #10
    1400:	e1a02008 	mov	r2, r8
    1404:	eb000210 	bl	1c4c <memchr>
    1408:	e3500000 	cmp	r0, #0
    140c:	12809001 	addne	r9, r0, #1
    1410:	106b9009 	rsbne	r9, r11, r9
    1414:	02889001 	addeq	r9, r8, #1
    1418:	e3a0c001 	mov	r12, #1
    141c:	eaffff90 	b	1264 <__sfvwrite_r+0x1f8>
    1420:	e5941010 	ldr	r1, [r4, #16]
    1424:	e594b000 	ldr	r11, [r4]
    1428:	e5948014 	ldr	r8, [r4, #20]
    142c:	e061b00b 	rsb	r11, r1, r11
    1430:	e0888088 	add	r8, r8, r8, lsl #1
    1434:	e0888fa8 	add	r8, r8, r8, lsr #31
    1438:	e28b0001 	add	r0, r11, #1
    143c:	e1a080c8 	asr	r8, r8, #1
    1440:	e0800006 	add	r0, r0, r6
    1444:	e1580000 	cmp	r8, r0
    1448:	e1a02008 	mov	r2, r8
    144c:	31a08000 	movcc	r8, r0
    1450:	31a02008 	movcc	r2, r8
    1454:	e3130b01 	tst	r3, #1024	; 0x400
    1458:	e1a0000a 	mov	r0, r10
    145c:	0affff6b 	beq	1210 <__sfvwrite_r+0x1a4>
    1460:	e1a01002 	mov	r1, r2
    1464:	eb000031 	bl	1530 <_malloc_r>
    1468:	e2503000 	subs	r3, r0, #0
    146c:	0affff6d 	beq	1228 <__sfvwrite_r+0x1bc>
    1470:	e5941010 	ldr	r1, [r4, #16]
    1474:	e1a0200b 	mov	r2, r11
    1478:	e58d3004 	str	r3, [sp, #4]
    147c:	eb000239 	bl	1d68 <memcpy>
    1480:	e1d420bc 	ldrh	r2, [r4, #12]
    1484:	e3c22d12 	bic	r2, r2, #1152	; 0x480
    1488:	e3822080 	orr	r2, r2, #128	; 0x80
    148c:	e1c420bc 	strh	r2, [r4, #12]
    1490:	e59d3004 	ldr	r3, [sp, #4]
    1494:	e083000b 	add	r0, r3, r11
    1498:	e06b2008 	rsb	r2, r11, r8
    149c:	e5843010 	str	r3, [r4, #16]
    14a0:	e5848014 	str	r8, [r4, #20]
    14a4:	e5840000 	str	r0, [r4]
    14a8:	e1a0b006 	mov	r11, r6
    14ac:	e5842008 	str	r2, [r4, #8]
    14b0:	e1a03006 	mov	r3, r6
    14b4:	e1a08006 	mov	r8, r6
    14b8:	e1a0c006 	mov	r12, r6
    14bc:	eaffff38 	b	11a4 <__sfvwrite_r+0x138>
    14c0:	e1a0100b 	mov	r1, r11
    14c4:	e1a02006 	mov	r2, r6
    14c8:	e58dc000 	str	r12, [sp]
    14cc:	eb0002a8 	bl	1f74 <memmove>
    14d0:	e5943000 	ldr	r3, [r4]
    14d4:	e0833006 	add	r3, r3, r6
    14d8:	e5843000 	str	r3, [r4]
    14dc:	e1a0000a 	mov	r0, r10
    14e0:	e1a01004 	mov	r1, r4
    14e4:	eb0004ac 	bl	279c <_fflush_r>
    14e8:	e3500000 	cmp	r0, #0
    14ec:	e59dc000 	ldr	r12, [sp]
    14f0:	0affff74 	beq	12c8 <__sfvwrite_r+0x25c>
    14f4:	eaffff4d 	b	1230 <__sfvwrite_r+0x1c4>
    14f8:	e1a01009 	mov	r1, r9
    14fc:	e1a02008 	mov	r2, r8
    1500:	e58d8004 	str	r8, [sp, #4]
    1504:	eb00029a 	bl	1f74 <memmove>
    1508:	e5942000 	ldr	r2, [r4]
    150c:	e0822008 	add	r2, r2, r8
    1510:	e5842000 	str	r2, [r4]
    1514:	e1a0000a 	mov	r0, r10
    1518:	e1a01004 	mov	r1, r4
    151c:	eb00049e 	bl	279c <_fflush_r>
    1520:	e3500000 	cmp	r0, #0
    1524:	e59d3004 	ldr	r3, [sp, #4]
    1528:	0affff2a 	beq	11d8 <__sfvwrite_r+0x16c>
    152c:	eaffff3f 	b	1230 <__sfvwrite_r+0x1c4>

00001530 <_malloc_r>:
    1530:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1534:	e281500b 	add	r5, r1, #11
    1538:	e3550016 	cmp	r5, #22
    153c:	83c55007 	bichi	r5, r5, #7
    1540:	81a03fa5 	lsrhi	r3, r5, #31
    1544:	93a03000 	movls	r3, #0
    1548:	93a05010 	movls	r5, #16
    154c:	e1550001 	cmp	r5, r1
    1550:	21a01003 	movcs	r1, r3
    1554:	33831001 	orrcc	r1, r3, #1
    1558:	e3510000 	cmp	r1, #0
    155c:	13a0300c 	movne	r3, #12
    1560:	e24dd00c 	sub	sp, sp, #12
    1564:	e1a06000 	mov	r6, r0
    1568:	15803000 	strne	r3, [r0]
    156c:	13a04000 	movne	r4, #0
    1570:	1a000015 	bne	15cc <_malloc_r+0x9c>
    1574:	eb0002cb 	bl	20a8 <__malloc_lock>
    1578:	e3550f7e 	cmp	r5, #504	; 0x1f8
    157c:	2a000016 	bcs	15dc <_malloc_r+0xac>
    1580:	e59f76b8 	ldr	r7, [pc, #1720]	; 1c40 <_malloc_r+0x710>
    1584:	e1a0e1a5 	lsr	lr, r5, #3
    1588:	e087318e 	add	r3, r7, lr, lsl #3
    158c:	e593400c 	ldr	r4, [r3, #12]
    1590:	e1540003 	cmp	r4, r3
    1594:	0a00014b 	beq	1ac8 <_malloc_r+0x598>
    1598:	e5943004 	ldr	r3, [r4, #4]
    159c:	e3c33003 	bic	r3, r3, #3
    15a0:	e0843003 	add	r3, r4, r3
    15a4:	e5930004 	ldr	r0, [r3, #4]
    15a8:	e2841008 	add	r1, r4, #8
    15ac:	e8910006 	ldm	r1, {r1, r2}
    15b0:	e3800001 	orr	r0, r0, #1
    15b4:	e5830004 	str	r0, [r3, #4]
    15b8:	e581200c 	str	r2, [r1, #12]
    15bc:	e5821008 	str	r1, [r2, #8]
    15c0:	e1a00006 	mov	r0, r6
    15c4:	eb0002b8 	bl	20ac <__malloc_unlock>
    15c8:	e2844008 	add	r4, r4, #8
    15cc:	e1a00004 	mov	r0, r4
    15d0:	e28dd00c 	add	sp, sp, #12
    15d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15d8:	e12fff1e 	bx	lr
    15dc:	e1b0e4a5 	lsrs	lr, r5, #9
    15e0:	01a0e1a5 	lsreq	lr, r5, #3
    15e4:	01a0108e 	lsleq	r1, lr, #1
    15e8:	1a000061 	bne	1774 <_malloc_r+0x244>
    15ec:	e59f764c 	ldr	r7, [pc, #1612]	; 1c40 <_malloc_r+0x710>
    15f0:	e0871101 	add	r1, r7, r1, lsl #2
    15f4:	e591400c 	ldr	r4, [r1, #12]
    15f8:	e1510004 	cmp	r1, r4
    15fc:	1a000005 	bne	1618 <_malloc_r+0xe8>
    1600:	ea00000a 	b	1630 <_malloc_r+0x100>
    1604:	e3530000 	cmp	r3, #0
    1608:	aa0000d7 	bge	196c <_malloc_r+0x43c>
    160c:	e594400c 	ldr	r4, [r4, #12]
    1610:	e1510004 	cmp	r1, r4
    1614:	0a000005 	beq	1630 <_malloc_r+0x100>
    1618:	e5942004 	ldr	r2, [r4, #4]
    161c:	e3c22003 	bic	r2, r2, #3
    1620:	e0653002 	rsb	r3, r5, r2
    1624:	e353000f 	cmp	r3, #15
    1628:	dafffff5 	ble	1604 <_malloc_r+0xd4>
    162c:	e24ee001 	sub	lr, lr, #1
    1630:	e28ee001 	add	lr, lr, #1
    1634:	e59f3604 	ldr	r3, [pc, #1540]	; 1c40 <_malloc_r+0x710>
    1638:	e5974010 	ldr	r4, [r7, #16]
    163c:	e2838008 	add	r8, r3, #8
    1640:	e1540008 	cmp	r4, r8
    1644:	05931004 	ldreq	r1, [r3, #4]
    1648:	0a000016 	beq	16a8 <_malloc_r+0x178>
    164c:	e5942004 	ldr	r2, [r4, #4]
    1650:	e3c22003 	bic	r2, r2, #3
    1654:	e0651002 	rsb	r1, r5, r2
    1658:	e351000f 	cmp	r1, #15
    165c:	ca0000f7 	bgt	1a40 <_malloc_r+0x510>
    1660:	e3510000 	cmp	r1, #0
    1664:	e5838014 	str	r8, [r3, #20]
    1668:	e5838010 	str	r8, [r3, #16]
    166c:	aa000046 	bge	178c <_malloc_r+0x25c>
    1670:	e3520c02 	cmp	r2, #512	; 0x200
    1674:	2a0000d2 	bcs	19c4 <_malloc_r+0x494>
    1678:	e5930004 	ldr	r0, [r3, #4]
    167c:	e1a021a2 	lsr	r2, r2, #3
    1680:	e1a01142 	asr	r1, r2, #2
    1684:	e3a0c001 	mov	r12, #1
    1688:	e180111c 	orr	r1, r0, r12, lsl r1
    168c:	e0832182 	add	r2, r3, r2, lsl #3
    1690:	e5920008 	ldr	r0, [r2, #8]
    1694:	e584200c 	str	r2, [r4, #12]
    1698:	e5840008 	str	r0, [r4, #8]
    169c:	e5831004 	str	r1, [r3, #4]
    16a0:	e5824008 	str	r4, [r2, #8]
    16a4:	e580400c 	str	r4, [r0, #12]
    16a8:	e1a0014e 	asr	r0, lr, #2
    16ac:	e3a03001 	mov	r3, #1
    16b0:	e1a00013 	lsl	r0, r3, r0
    16b4:	e1500001 	cmp	r0, r1
    16b8:	8a00003b 	bhi	17ac <_malloc_r+0x27c>
    16bc:	e1110000 	tst	r1, r0
    16c0:	1a000008 	bne	16e8 <_malloc_r+0x1b8>
    16c4:	e1a00310 	lsl	r0, r0, r3
    16c8:	e3cee003 	bic	lr, lr, #3
    16cc:	e1110000 	tst	r1, r0
    16d0:	e28ee004 	add	lr, lr, #4
    16d4:	1a000003 	bne	16e8 <_malloc_r+0x1b8>
    16d8:	e1a00080 	lsl	r0, r0, #1
    16dc:	e1110000 	tst	r1, r0
    16e0:	e28ee004 	add	lr, lr, #4
    16e4:	0afffffb 	beq	16d8 <_malloc_r+0x1a8>
    16e8:	e087a18e 	add	r10, r7, lr, lsl #3
    16ec:	e1a0c00a 	mov	r12, r10
    16f0:	e1a0400e 	mov	r4, lr
    16f4:	e59c300c 	ldr	r3, [r12, #12]
    16f8:	e15c0003 	cmp	r12, r3
    16fc:	1a000005 	bne	1718 <_malloc_r+0x1e8>
    1700:	ea0000db 	b	1a74 <_malloc_r+0x544>
    1704:	e3520000 	cmp	r2, #0
    1708:	aa0000f4 	bge	1ae0 <_malloc_r+0x5b0>
    170c:	e593300c 	ldr	r3, [r3, #12]
    1710:	e15c0003 	cmp	r12, r3
    1714:	0a0000d6 	beq	1a74 <_malloc_r+0x544>
    1718:	e5931004 	ldr	r1, [r3, #4]
    171c:	e3c11003 	bic	r1, r1, #3
    1720:	e0652001 	rsb	r2, r5, r1
    1724:	e352000f 	cmp	r2, #15
    1728:	dafffff5 	ble	1704 <_malloc_r+0x1d4>
    172c:	e1a04003 	mov	r4, r3
    1730:	e593000c 	ldr	r0, [r3, #12]
    1734:	e5b4c008 	ldr	r12, [r4, #8]!
    1738:	e0831005 	add	r1, r3, r5
    173c:	e382e001 	orr	lr, r2, #1
    1740:	e3855001 	orr	r5, r5, #1
    1744:	e58c000c 	str	r0, [r12, #12]
    1748:	e580c008 	str	r12, [r0, #8]
    174c:	e5835004 	str	r5, [r3, #4]
    1750:	e5871014 	str	r1, [r7, #20]
    1754:	e5871010 	str	r1, [r7, #16]
    1758:	e581800c 	str	r8, [r1, #12]
    175c:	e5818008 	str	r8, [r1, #8]
    1760:	e581e004 	str	lr, [r1, #4]
    1764:	e7812002 	str	r2, [r1, r2]
    1768:	e1a00006 	mov	r0, r6
    176c:	eb00024e 	bl	20ac <__malloc_unlock>
    1770:	eaffff95 	b	15cc <_malloc_r+0x9c>
    1774:	e35e0004 	cmp	lr, #4
    1778:	8a000087 	bhi	199c <_malloc_r+0x46c>
    177c:	e1a0e325 	lsr	lr, r5, #6
    1780:	e28ee038 	add	lr, lr, #56	; 0x38
    1784:	e1a0108e 	lsl	r1, lr, #1
    1788:	eaffff97 	b	15ec <_malloc_r+0xbc>
    178c:	e0842002 	add	r2, r4, r2
    1790:	e5923004 	ldr	r3, [r2, #4]
    1794:	e3833001 	orr	r3, r3, #1
    1798:	e5823004 	str	r3, [r2, #4]
    179c:	e1a00006 	mov	r0, r6
    17a0:	eb000241 	bl	20ac <__malloc_unlock>
    17a4:	e2844008 	add	r4, r4, #8
    17a8:	eaffff87 	b	15cc <_malloc_r+0x9c>
    17ac:	e5974008 	ldr	r4, [r7, #8]
    17b0:	e594a004 	ldr	r10, [r4, #4]
    17b4:	e3caa003 	bic	r10, r10, #3
    17b8:	e155000a 	cmp	r5, r10
    17bc:	8a000002 	bhi	17cc <_malloc_r+0x29c>
    17c0:	e065300a 	rsb	r3, r5, r10
    17c4:	e353000f 	cmp	r3, #15
    17c8:	ca00005d 	bgt	1944 <_malloc_r+0x414>
    17cc:	e59f9470 	ldr	r9, [pc, #1136]	; 1c44 <_malloc_r+0x714>
    17d0:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    17d4:	e599b000 	ldr	r11, [r9]
    17d8:	e3730001 	cmn	r3, #1
    17dc:	e085b00b 	add	r11, r5, r11
    17e0:	128bba01 	addne	r11, r11, #4096	; 0x1000
    17e4:	128bb00f 	addne	r11, r11, #15
    17e8:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    17ec:	028bb010 	addeq	r11, r11, #16
    17f0:	13cbb00f 	bicne	r11, r11, #15
    17f4:	e084200a 	add	r2, r4, r10
    17f8:	e1a00006 	mov	r0, r6
    17fc:	e1a0100b 	mov	r1, r11
    1800:	e58d2004 	str	r2, [sp, #4]
    1804:	eb000386 	bl	2624 <_sbrk_r>
    1808:	e3700001 	cmn	r0, #1
    180c:	e1a08000 	mov	r8, r0
    1810:	e59d2004 	ldr	r2, [sp, #4]
    1814:	0a0000e2 	beq	1ba4 <_malloc_r+0x674>
    1818:	e1520000 	cmp	r2, r0
    181c:	8a0000bf 	bhi	1b20 <_malloc_r+0x5f0>
    1820:	e5993004 	ldr	r3, [r9, #4]
    1824:	e1520008 	cmp	r2, r8
    1828:	e08b3003 	add	r3, r11, r3
    182c:	e5893004 	str	r3, [r9, #4]
    1830:	0a0000df 	beq	1bb4 <_malloc_r+0x684>
    1834:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    1838:	e3710001 	cmn	r1, #1
    183c:	10622008 	rsbne	r2, r2, r8
    1840:	059f33f8 	ldreq	r3, [pc, #1016]	; 1c40 <_malloc_r+0x710>
    1844:	10833002 	addne	r3, r3, r2
    1848:	05838408 	streq	r8, [r3, #1032]	; 0x408
    184c:	15893004 	strne	r3, [r9, #4]
    1850:	e2183007 	ands	r3, r8, #7
    1854:	12632008 	rsbne	r2, r3, #8
    1858:	10888002 	addne	r8, r8, r2
    185c:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    1860:	12832008 	addne	r2, r3, #8
    1864:	e088300b 	add	r3, r8, r11
    1868:	03a02a01 	moveq	r2, #4096	; 0x1000
    186c:	e1a03a03 	lsl	r3, r3, #20
    1870:	e042ba23 	sub	r11, r2, r3, lsr #20
    1874:	e1a0100b 	mov	r1, r11
    1878:	e1a00006 	mov	r0, r6
    187c:	eb000368 	bl	2624 <_sbrk_r>
    1880:	e3700001 	cmn	r0, #1
    1884:	10682000 	rsbne	r2, r8, r0
    1888:	e5993004 	ldr	r3, [r9, #4]
    188c:	108b2002 	addne	r2, r11, r2
    1890:	03a0b000 	moveq	r11, #0
    1894:	13822001 	orrne	r2, r2, #1
    1898:	03a02001 	moveq	r2, #1
    189c:	e08b3003 	add	r3, r11, r3
    18a0:	e1540007 	cmp	r4, r7
    18a4:	e5893004 	str	r3, [r9, #4]
    18a8:	e5878008 	str	r8, [r7, #8]
    18ac:	e5882004 	str	r2, [r8, #4]
    18b0:	0a00000d 	beq	18ec <_malloc_r+0x3bc>
    18b4:	e35a000f 	cmp	r10, #15
    18b8:	9a0000ac 	bls	1b70 <_malloc_r+0x640>
    18bc:	e594c004 	ldr	r12, [r4, #4]
    18c0:	e24a200c 	sub	r2, r10, #12
    18c4:	e3c22007 	bic	r2, r2, #7
    18c8:	e20cc001 	and	r12, r12, #1
    18cc:	e0841002 	add	r1, r4, r2
    18d0:	e3a00005 	mov	r0, #5
    18d4:	e182c00c 	orr	r12, r2, r12
    18d8:	e352000f 	cmp	r2, #15
    18dc:	e584c004 	str	r12, [r4, #4]
    18e0:	e5810004 	str	r0, [r1, #4]
    18e4:	e5810008 	str	r0, [r1, #8]
    18e8:	8a0000b8 	bhi	1bd0 <_malloc_r+0x6a0>
    18ec:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    18f0:	e1530002 	cmp	r3, r2
    18f4:	859f2348 	ldrhi	r2, [pc, #840]	; 1c44 <_malloc_r+0x714>
    18f8:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    18fc:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    1900:	e5974008 	ldr	r4, [r7, #8]
    1904:	e1530002 	cmp	r3, r2
    1908:	95943004 	ldrls	r3, [r4, #4]
    190c:	85942004 	ldrhi	r2, [r4, #4]
    1910:	859f132c 	ldrhi	r1, [pc, #812]	; 1c44 <_malloc_r+0x714>
    1914:	93c33003 	bicls	r3, r3, #3
    1918:	85813030 	strhi	r3, [r1, #48]	; 0x30
    191c:	83c23003 	bichi	r3, r2, #3
    1920:	e1550003 	cmp	r5, r3
    1924:	e0653003 	rsb	r3, r5, r3
    1928:	8a000001 	bhi	1934 <_malloc_r+0x404>
    192c:	e353000f 	cmp	r3, #15
    1930:	ca000003 	bgt	1944 <_malloc_r+0x414>
    1934:	e1a00006 	mov	r0, r6
    1938:	eb0001db 	bl	20ac <__malloc_unlock>
    193c:	e3a04000 	mov	r4, #0
    1940:	eaffff21 	b	15cc <_malloc_r+0x9c>
    1944:	e0842005 	add	r2, r4, r5
    1948:	e3833001 	orr	r3, r3, #1
    194c:	e3855001 	orr	r5, r5, #1
    1950:	e5845004 	str	r5, [r4, #4]
    1954:	e1a00006 	mov	r0, r6
    1958:	e5823004 	str	r3, [r2, #4]
    195c:	e5872008 	str	r2, [r7, #8]
    1960:	e2844008 	add	r4, r4, #8
    1964:	eb0001d0 	bl	20ac <__malloc_unlock>
    1968:	eaffff17 	b	15cc <_malloc_r+0x9c>
    196c:	e0842002 	add	r2, r4, r2
    1970:	e5920004 	ldr	r0, [r2, #4]
    1974:	e2841008 	add	r1, r4, #8
    1978:	e891000a 	ldm	r1, {r1, r3}
    197c:	e3800001 	orr	r0, r0, #1
    1980:	e5820004 	str	r0, [r2, #4]
    1984:	e581300c 	str	r3, [r1, #12]
    1988:	e5831008 	str	r1, [r3, #8]
    198c:	e1a00006 	mov	r0, r6
    1990:	eb0001c5 	bl	20ac <__malloc_unlock>
    1994:	e2844008 	add	r4, r4, #8
    1998:	eaffff0b 	b	15cc <_malloc_r+0x9c>
    199c:	e35e0014 	cmp	lr, #20
    19a0:	928ee05b 	addls	lr, lr, #91	; 0x5b
    19a4:	91a0108e 	lslls	r1, lr, #1
    19a8:	9affff0f 	bls	15ec <_malloc_r+0xbc>
    19ac:	e35e0054 	cmp	lr, #84	; 0x54
    19b0:	8a000061 	bhi	1b3c <_malloc_r+0x60c>
    19b4:	e1a0e625 	lsr	lr, r5, #12
    19b8:	e28ee06e 	add	lr, lr, #110	; 0x6e
    19bc:	e1a0108e 	lsl	r1, lr, #1
    19c0:	eaffff09 	b	15ec <_malloc_r+0xbc>
    19c4:	e1a034a2 	lsr	r3, r2, #9
    19c8:	e3530004 	cmp	r3, #4
    19cc:	9a00004f 	bls	1b10 <_malloc_r+0x5e0>
    19d0:	e3530014 	cmp	r3, #20
    19d4:	9283a05b 	addls	r10, r3, #91	; 0x5b
    19d8:	91a0008a 	lslls	r0, r10, #1
    19dc:	9a000004 	bls	19f4 <_malloc_r+0x4c4>
    19e0:	e3530054 	cmp	r3, #84	; 0x54
    19e4:	8a00007f 	bhi	1be8 <_malloc_r+0x6b8>
    19e8:	e1a0a622 	lsr	r10, r2, #12
    19ec:	e28aa06e 	add	r10, r10, #110	; 0x6e
    19f0:	e1a0008a 	lsl	r0, r10, #1
    19f4:	e0870100 	add	r0, r7, r0, lsl #2
    19f8:	e5903008 	ldr	r3, [r0, #8]
    19fc:	e1530000 	cmp	r3, r0
    1a00:	e59fc238 	ldr	r12, [pc, #568]	; 1c40 <_malloc_r+0x710>
    1a04:	0a000052 	beq	1b54 <_malloc_r+0x624>
    1a08:	e5931004 	ldr	r1, [r3, #4]
    1a0c:	e3c11003 	bic	r1, r1, #3
    1a10:	e1520001 	cmp	r2, r1
    1a14:	2a000002 	bcs	1a24 <_malloc_r+0x4f4>
    1a18:	e5933008 	ldr	r3, [r3, #8]
    1a1c:	e1500003 	cmp	r0, r3
    1a20:	1afffff8 	bne	1a08 <_malloc_r+0x4d8>
    1a24:	e593200c 	ldr	r2, [r3, #12]
    1a28:	e5971004 	ldr	r1, [r7, #4]
    1a2c:	e584200c 	str	r2, [r4, #12]
    1a30:	e5843008 	str	r3, [r4, #8]
    1a34:	e583400c 	str	r4, [r3, #12]
    1a38:	e5824008 	str	r4, [r2, #8]
    1a3c:	eaffff19 	b	16a8 <_malloc_r+0x178>
    1a40:	e0842005 	add	r2, r4, r5
    1a44:	e3810001 	orr	r0, r1, #1
    1a48:	e3855001 	orr	r5, r5, #1
    1a4c:	e5845004 	str	r5, [r4, #4]
    1a50:	e5832014 	str	r2, [r3, #20]
    1a54:	e5832010 	str	r2, [r3, #16]
    1a58:	e582800c 	str	r8, [r2, #12]
    1a5c:	e9820101 	stmib	r2, {r0, r8}
    1a60:	e7821001 	str	r1, [r2, r1]
    1a64:	e1a00006 	mov	r0, r6
    1a68:	eb00018f 	bl	20ac <__malloc_unlock>
    1a6c:	e2844008 	add	r4, r4, #8
    1a70:	eafffed5 	b	15cc <_malloc_r+0x9c>
    1a74:	e2844001 	add	r4, r4, #1
    1a78:	e3140003 	tst	r4, #3
    1a7c:	e28cc008 	add	r12, r12, #8
    1a80:	1affff1b 	bne	16f4 <_malloc_r+0x1c4>
    1a84:	e31e0003 	tst	lr, #3
    1a88:	e24a3008 	sub	r3, r10, #8
    1a8c:	0a000062 	beq	1c1c <_malloc_r+0x6ec>
    1a90:	e59aa000 	ldr	r10, [r10]
    1a94:	e15a0003 	cmp	r10, r3
    1a98:	e24ee001 	sub	lr, lr, #1
    1a9c:	0afffff8 	beq	1a84 <_malloc_r+0x554>
    1aa0:	e5973004 	ldr	r3, [r7, #4]
    1aa4:	e1a00080 	lsl	r0, r0, #1
    1aa8:	e1500003 	cmp	r0, r3
    1aac:	8affff3e 	bhi	17ac <_malloc_r+0x27c>
    1ab0:	e3500000 	cmp	r0, #0
    1ab4:	0affff3c 	beq	17ac <_malloc_r+0x27c>
    1ab8:	e1130000 	tst	r3, r0
    1abc:	0a00005a 	beq	1c2c <_malloc_r+0x6fc>
    1ac0:	e1a0e004 	mov	lr, r4
    1ac4:	eaffff07 	b	16e8 <_malloc_r+0x1b8>
    1ac8:	e2843008 	add	r3, r4, #8
    1acc:	e5944014 	ldr	r4, [r4, #20]
    1ad0:	e1530004 	cmp	r3, r4
    1ad4:	028ee002 	addeq	lr, lr, #2
    1ad8:	0afffed5 	beq	1634 <_malloc_r+0x104>
    1adc:	eafffead 	b	1598 <_malloc_r+0x68>
    1ae0:	e0831001 	add	r1, r3, r1
    1ae4:	e5910004 	ldr	r0, [r1, #4]
    1ae8:	e1a04003 	mov	r4, r3
    1aec:	e5b42008 	ldr	r2, [r4, #8]!
    1af0:	e593300c 	ldr	r3, [r3, #12]
    1af4:	e3800001 	orr	r0, r0, #1
    1af8:	e5810004 	str	r0, [r1, #4]
    1afc:	e582300c 	str	r3, [r2, #12]
    1b00:	e5832008 	str	r2, [r3, #8]
    1b04:	e1a00006 	mov	r0, r6
    1b08:	eb000167 	bl	20ac <__malloc_unlock>
    1b0c:	eafffeae 	b	15cc <_malloc_r+0x9c>
    1b10:	e1a0a322 	lsr	r10, r2, #6
    1b14:	e28aa038 	add	r10, r10, #56	; 0x38
    1b18:	e1a0008a 	lsl	r0, r10, #1
    1b1c:	eaffffb4 	b	19f4 <_malloc_r+0x4c4>
    1b20:	e1540007 	cmp	r4, r7
    1b24:	0affff3d 	beq	1820 <_malloc_r+0x2f0>
    1b28:	e59f3110 	ldr	r3, [pc, #272]	; 1c40 <_malloc_r+0x710>
    1b2c:	e5934008 	ldr	r4, [r3, #8]
    1b30:	e5943004 	ldr	r3, [r4, #4]
    1b34:	e3c33003 	bic	r3, r3, #3
    1b38:	eaffff78 	b	1920 <_malloc_r+0x3f0>
    1b3c:	e35e0f55 	cmp	lr, #340	; 0x154
    1b40:	8a00000f 	bhi	1b84 <_malloc_r+0x654>
    1b44:	e1a0e7a5 	lsr	lr, r5, #15
    1b48:	e28ee077 	add	lr, lr, #119	; 0x77
    1b4c:	e1a0108e 	lsl	r1, lr, #1
    1b50:	eafffea5 	b	15ec <_malloc_r+0xbc>
    1b54:	e59c2004 	ldr	r2, [r12, #4]
    1b58:	e1a0a14a 	asr	r10, r10, #2
    1b5c:	e3a01001 	mov	r1, #1
    1b60:	e1821a11 	orr	r1, r2, r1, lsl r10
    1b64:	e1a02003 	mov	r2, r3
    1b68:	e58c1004 	str	r1, [r12, #4]
    1b6c:	eaffffae 	b	1a2c <_malloc_r+0x4fc>
    1b70:	e3a03001 	mov	r3, #1
    1b74:	e5883004 	str	r3, [r8, #4]
    1b78:	e1a04008 	mov	r4, r8
    1b7c:	e3a03000 	mov	r3, #0
    1b80:	eaffff66 	b	1920 <_malloc_r+0x3f0>
    1b84:	e59f30bc 	ldr	r3, [pc, #188]	; 1c48 <_malloc_r+0x718>
    1b88:	e15e0003 	cmp	lr, r3
    1b8c:	91a0e925 	lsrls	lr, r5, #18
    1b90:	928ee07c 	addls	lr, lr, #124	; 0x7c
    1b94:	91a0108e 	lslls	r1, lr, #1
    1b98:	83a010fc 	movhi	r1, #252	; 0xfc
    1b9c:	83a0e07e 	movhi	lr, #126	; 0x7e
    1ba0:	eafffe91 	b	15ec <_malloc_r+0xbc>
    1ba4:	e5974008 	ldr	r4, [r7, #8]
    1ba8:	e5943004 	ldr	r3, [r4, #4]
    1bac:	e3c33003 	bic	r3, r3, #3
    1bb0:	eaffff5a 	b	1920 <_malloc_r+0x3f0>
    1bb4:	e1b01a02 	lsls	r1, r2, #20
    1bb8:	1affff1d 	bne	1834 <_malloc_r+0x304>
    1bbc:	e5972008 	ldr	r2, [r7, #8]
    1bc0:	e08b100a 	add	r1, r11, r10
    1bc4:	e3811001 	orr	r1, r1, #1
    1bc8:	e5821004 	str	r1, [r2, #4]
    1bcc:	eaffff46 	b	18ec <_malloc_r+0x3bc>
    1bd0:	e1a00006 	mov	r0, r6
    1bd4:	e2841008 	add	r1, r4, #8
    1bd8:	eb00047a 	bl	2dc8 <_free_r>
    1bdc:	e59f3060 	ldr	r3, [pc, #96]	; 1c44 <_malloc_r+0x714>
    1be0:	e5933004 	ldr	r3, [r3, #4]
    1be4:	eaffff40 	b	18ec <_malloc_r+0x3bc>
    1be8:	e3530f55 	cmp	r3, #340	; 0x154
    1bec:	91a0a7a2 	lsrls	r10, r2, #15
    1bf0:	928aa077 	addls	r10, r10, #119	; 0x77
    1bf4:	91a0008a 	lslls	r0, r10, #1
    1bf8:	9affff7d 	bls	19f4 <_malloc_r+0x4c4>
    1bfc:	e59f1044 	ldr	r1, [pc, #68]	; 1c48 <_malloc_r+0x718>
    1c00:	e1530001 	cmp	r3, r1
    1c04:	91a0a922 	lsrls	r10, r2, #18
    1c08:	928aa07c 	addls	r10, r10, #124	; 0x7c
    1c0c:	91a0008a 	lslls	r0, r10, #1
    1c10:	83a000fc 	movhi	r0, #252	; 0xfc
    1c14:	83a0a07e 	movhi	r10, #126	; 0x7e
    1c18:	eaffff75 	b	19f4 <_malloc_r+0x4c4>
    1c1c:	e5973004 	ldr	r3, [r7, #4]
    1c20:	e1c33000 	bic	r3, r3, r0
    1c24:	e5873004 	str	r3, [r7, #4]
    1c28:	eaffff9d 	b	1aa4 <_malloc_r+0x574>
    1c2c:	e1a00080 	lsl	r0, r0, #1
    1c30:	e1130000 	tst	r3, r0
    1c34:	e2844004 	add	r4, r4, #4
    1c38:	1affffa0 	bne	1ac0 <_malloc_r+0x590>
    1c3c:	eafffffa 	b	1c2c <_malloc_r+0x6fc>
    1c40:	000044b8 	.word	0x000044b8
    1c44:	000048ec 	.word	0x000048ec
    1c48:	00000554 	.word	0x00000554

00001c4c <memchr>:
    1c4c:	e3100003 	tst	r0, #3
    1c50:	e92d0070 	push	{r4, r5, r6}
    1c54:	e20110ff 	and	r1, r1, #255	; 0xff
    1c58:	0a00003c 	beq	1d50 <memchr+0x104>
    1c5c:	e3520000 	cmp	r2, #0
    1c60:	e242c001 	sub	r12, r2, #1
    1c64:	0a00003b 	beq	1d58 <memchr+0x10c>
    1c68:	e5d03000 	ldrb	r3, [r0]
    1c6c:	e1530001 	cmp	r3, r1
    1c70:	0a00001f 	beq	1cf4 <memchr+0xa8>
    1c74:	e2803001 	add	r3, r0, #1
    1c78:	ea000006 	b	1c98 <memchr+0x4c>
    1c7c:	e35c0000 	cmp	r12, #0
    1c80:	0a00001d 	beq	1cfc <memchr+0xb0>
    1c84:	e5d02000 	ldrb	r2, [r0]
    1c88:	e1520001 	cmp	r2, r1
    1c8c:	e2833001 	add	r3, r3, #1
    1c90:	e24cc001 	sub	r12, r12, #1
    1c94:	0a000016 	beq	1cf4 <memchr+0xa8>
    1c98:	e3130003 	tst	r3, #3
    1c9c:	e1a00003 	mov	r0, r3
    1ca0:	1afffff5 	bne	1c7c <memchr+0x30>
    1ca4:	e35c0003 	cmp	r12, #3
    1ca8:	8a000015 	bhi	1d04 <memchr+0xb8>
    1cac:	e35c0000 	cmp	r12, #0
    1cb0:	e24c4001 	sub	r4, r12, #1
    1cb4:	0a000010 	beq	1cfc <memchr+0xb0>
    1cb8:	e5d03000 	ldrb	r3, [r0]
    1cbc:	e1530001 	cmp	r3, r1
    1cc0:	0a00000b 	beq	1cf4 <memchr+0xa8>
    1cc4:	e2802001 	add	r2, r0, #1
    1cc8:	e3a03000 	mov	r3, #0
    1ccc:	ea000004 	b	1ce4 <memchr+0x98>
    1cd0:	e5d0c000 	ldrb	r12, [r0]
    1cd4:	e15c0001 	cmp	r12, r1
    1cd8:	e2822001 	add	r2, r2, #1
    1cdc:	e2833001 	add	r3, r3, #1
    1ce0:	0a000003 	beq	1cf4 <memchr+0xa8>
    1ce4:	e1540003 	cmp	r4, r3
    1ce8:	e1a00002 	mov	r0, r2
    1cec:	1afffff7 	bne	1cd0 <memchr+0x84>
    1cf0:	e3a00000 	mov	r0, #0
    1cf4:	e8bd0070 	pop	{r4, r5, r6}
    1cf8:	e12fff1e 	bx	lr
    1cfc:	e1a0000c 	mov	r0, r12
    1d00:	eafffffb 	b	1cf4 <memchr+0xa8>
    1d04:	e1816401 	orr	r6, r1, r1, lsl #8
    1d08:	e1866806 	orr	r6, r6, r6, lsl #16
    1d0c:	e5903000 	ldr	r3, [r0]
    1d10:	e59f4048 	ldr	r4, [pc, #72]	; 1d60 <memchr+0x114>
    1d14:	e0263003 	eor	r3, r6, r3
    1d18:	e0834004 	add	r4, r3, r4
    1d1c:	e59f2040 	ldr	r2, [pc, #64]	; 1d64 <memchr+0x118>
    1d20:	e1c44003 	bic	r4, r4, r3
    1d24:	e0042002 	and	r2, r4, r2
    1d28:	e3520000 	cmp	r2, #0
    1d2c:	e1a05000 	mov	r5, r0
    1d30:	e2800004 	add	r0, r0, #4
    1d34:	1a000003 	bne	1d48 <memchr+0xfc>
    1d38:	e24cc004 	sub	r12, r12, #4
    1d3c:	e35c0003 	cmp	r12, #3
    1d40:	8afffff1 	bhi	1d0c <memchr+0xc0>
    1d44:	eaffffd8 	b	1cac <memchr+0x60>
    1d48:	e1a00005 	mov	r0, r5
    1d4c:	eaffffd6 	b	1cac <memchr+0x60>
    1d50:	e1a0c002 	mov	r12, r2
    1d54:	eaffffd2 	b	1ca4 <memchr+0x58>
    1d58:	e1a00002 	mov	r0, r2
    1d5c:	eaffffe4 	b	1cf4 <memchr+0xa8>
    1d60:	fefefeff 	.word	0xfefefeff
    1d64:	80808080 	.word	0x80808080

00001d68 <memcpy>:
    1d68:	e3520003 	cmp	r2, #3
    1d6c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    1d70:	8a000009 	bhi	1d9c <memcpy+0x34>
    1d74:	e3520000 	cmp	r2, #0
    1d78:	0a000005 	beq	1d94 <memcpy+0x2c>
    1d7c:	e3a03000 	mov	r3, #0
    1d80:	e7d1c003 	ldrb	r12, [r1, r3]
    1d84:	e7c0c003 	strb	r12, [r0, r3]
    1d88:	e2833001 	add	r3, r3, #1
    1d8c:	e1530002 	cmp	r3, r2
    1d90:	1afffffa 	bne	1d80 <memcpy+0x18>
    1d94:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    1d98:	e12fff1e 	bx	lr
    1d9c:	e3100003 	tst	r0, #3
    1da0:	e0802002 	add	r2, r0, r2
    1da4:	0a00000b 	beq	1dd8 <memcpy+0x70>
    1da8:	e280c001 	add	r12, r0, #1
    1dac:	e2814001 	add	r4, r1, #1
    1db0:	e20c3003 	and	r3, r12, #3
    1db4:	e5545001 	ldrb	r5, [r4, #-1]
    1db8:	e3530000 	cmp	r3, #0
    1dbc:	e1a01004 	mov	r1, r4
    1dc0:	e1a0300c 	mov	r3, r12
    1dc4:	e54c5001 	strb	r5, [r12, #-1]
    1dc8:	e2844001 	add	r4, r4, #1
    1dcc:	e28cc001 	add	r12, r12, #1
    1dd0:	1afffff6 	bne	1db0 <memcpy+0x48>
    1dd4:	ea000000 	b	1ddc <memcpy+0x74>
    1dd8:	e1a03000 	mov	r3, r0
    1ddc:	e211c003 	ands	r12, r1, #3
    1de0:	1a00004f 	bne	1f24 <memcpy+0x1bc>
    1de4:	e063c002 	rsb	r12, r3, r2
    1de8:	e35c003f 	cmp	r12, #63	; 0x3f
    1dec:	da000024 	ble	1e84 <memcpy+0x11c>
    1df0:	e591c000 	ldr	r12, [r1]
    1df4:	e583c000 	str	r12, [r3]
    1df8:	e591c004 	ldr	r12, [r1, #4]
    1dfc:	e583c004 	str	r12, [r3, #4]
    1e00:	e591c008 	ldr	r12, [r1, #8]
    1e04:	e583c008 	str	r12, [r3, #8]
    1e08:	e591c00c 	ldr	r12, [r1, #12]
    1e0c:	e583c00c 	str	r12, [r3, #12]
    1e10:	e591c010 	ldr	r12, [r1, #16]
    1e14:	e583c010 	str	r12, [r3, #16]
    1e18:	e591c014 	ldr	r12, [r1, #20]
    1e1c:	e583c014 	str	r12, [r3, #20]
    1e20:	e591c018 	ldr	r12, [r1, #24]
    1e24:	e583c018 	str	r12, [r3, #24]
    1e28:	e591c01c 	ldr	r12, [r1, #28]
    1e2c:	e583c01c 	str	r12, [r3, #28]
    1e30:	e591c020 	ldr	r12, [r1, #32]
    1e34:	e583c020 	str	r12, [r3, #32]
    1e38:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    1e3c:	e583c024 	str	r12, [r3, #36]	; 0x24
    1e40:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    1e44:	e583c028 	str	r12, [r3, #40]	; 0x28
    1e48:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    1e4c:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    1e50:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    1e54:	e583c030 	str	r12, [r3, #48]	; 0x30
    1e58:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    1e5c:	e583c034 	str	r12, [r3, #52]	; 0x34
    1e60:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    1e64:	e583c038 	str	r12, [r3, #56]	; 0x38
    1e68:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    1e6c:	e2833040 	add	r3, r3, #64	; 0x40
    1e70:	e503c004 	str	r12, [r3, #-4]
    1e74:	e063c002 	rsb	r12, r3, r2
    1e78:	e35c003f 	cmp	r12, #63	; 0x3f
    1e7c:	e2811040 	add	r1, r1, #64	; 0x40
    1e80:	caffffda 	bgt	1df0 <memcpy+0x88>
    1e84:	e35c000f 	cmp	r12, #15
    1e88:	da00000c 	ble	1ec0 <memcpy+0x158>
    1e8c:	e591c000 	ldr	r12, [r1]
    1e90:	e583c000 	str	r12, [r3]
    1e94:	e591c004 	ldr	r12, [r1, #4]
    1e98:	e583c004 	str	r12, [r3, #4]
    1e9c:	e591c008 	ldr	r12, [r1, #8]
    1ea0:	e583c008 	str	r12, [r3, #8]
    1ea4:	e591c00c 	ldr	r12, [r1, #12]
    1ea8:	e2833010 	add	r3, r3, #16
    1eac:	e503c004 	str	r12, [r3, #-4]
    1eb0:	e063c002 	rsb	r12, r3, r2
    1eb4:	e35c000f 	cmp	r12, #15
    1eb8:	e2811010 	add	r1, r1, #16
    1ebc:	cafffff2 	bgt	1e8c <memcpy+0x124>
    1ec0:	e35c0003 	cmp	r12, #3
    1ec4:	da00000a 	ble	1ef4 <memcpy+0x18c>
    1ec8:	e283c004 	add	r12, r3, #4
    1ecc:	e2814004 	add	r4, r1, #4
    1ed0:	e06c3002 	rsb	r3, r12, r2
    1ed4:	e5145004 	ldr	r5, [r4, #-4]
    1ed8:	e3530003 	cmp	r3, #3
    1edc:	e1a01004 	mov	r1, r4
    1ee0:	e1a0300c 	mov	r3, r12
    1ee4:	e50c5004 	str	r5, [r12, #-4]
    1ee8:	e2844004 	add	r4, r4, #4
    1eec:	e28cc004 	add	r12, r12, #4
    1ef0:	cafffff6 	bgt	1ed0 <memcpy+0x168>
    1ef4:	e1520003 	cmp	r2, r3
    1ef8:	82833001 	addhi	r3, r3, #1
    1efc:	82811001 	addhi	r1, r1, #1
    1f00:	82822001 	addhi	r2, r2, #1
    1f04:	9affffa2 	bls	1d94 <memcpy+0x2c>
    1f08:	e551c001 	ldrb	r12, [r1, #-1]
    1f0c:	e2833001 	add	r3, r3, #1
    1f10:	e1530002 	cmp	r3, r2
    1f14:	e543c002 	strb	r12, [r3, #-2]
    1f18:	e2811001 	add	r1, r1, #1
    1f1c:	1afffff9 	bne	1f08 <memcpy+0x1a0>
    1f20:	eaffff9b 	b	1d94 <memcpy+0x2c>
    1f24:	e0635002 	rsb	r5, r3, r2
    1f28:	e06c4001 	rsb	r4, r12, r1
    1f2c:	e3550003 	cmp	r5, #3
    1f30:	e5945000 	ldr	r5, [r4]
    1f34:	daffffee 	ble	1ef4 <memcpy+0x18c>
    1f38:	e26c6004 	rsb	r6, r12, #4
    1f3c:	e1a0718c 	lsl	r7, r12, #3
    1f40:	e1a06186 	lsl	r6, r6, #3
    1f44:	e283c004 	add	r12, r3, #4
    1f48:	e1a08735 	lsr	r8, r5, r7
    1f4c:	e5b45004 	ldr	r5, [r4, #4]!
    1f50:	e1888615 	orr	r8, r8, r5, lsl r6
    1f54:	e06c3002 	rsb	r3, r12, r2
    1f58:	e3530003 	cmp	r3, #3
    1f5c:	e50c8004 	str	r8, [r12, #-4]
    1f60:	e1a0300c 	mov	r3, r12
    1f64:	e2811004 	add	r1, r1, #4
    1f68:	e28cc004 	add	r12, r12, #4
    1f6c:	cafffff5 	bgt	1f48 <memcpy+0x1e0>
    1f70:	eaffffdf 	b	1ef4 <memcpy+0x18c>

00001f74 <memmove>:
    1f74:	e1500001 	cmp	r0, r1
    1f78:	e92d00f0 	push	{r4, r5, r6, r7}
    1f7c:	9a00000e 	bls	1fbc <memmove+0x48>
    1f80:	e081c002 	add	r12, r1, r2
    1f84:	e150000c 	cmp	r0, r12
    1f88:	2a00000b 	bcs	1fbc <memmove+0x48>
    1f8c:	e3520000 	cmp	r2, #0
    1f90:	e0803002 	add	r3, r0, r2
    1f94:	e2422001 	sub	r2, r2, #1
    1f98:	0a000005 	beq	1fb4 <memmove+0x40>
    1f9c:	e1a0100c 	mov	r1, r12
    1fa0:	e571c001 	ldrb	r12, [r1, #-1]!
    1fa4:	e2422001 	sub	r2, r2, #1
    1fa8:	e3720001 	cmn	r2, #1
    1fac:	e563c001 	strb	r12, [r3, #-1]!
    1fb0:	1afffffa 	bne	1fa0 <memmove+0x2c>
    1fb4:	e8bd00f0 	pop	{r4, r5, r6, r7}
    1fb8:	e12fff1e 	bx	lr
    1fbc:	e352000f 	cmp	r2, #15
    1fc0:	8a000009 	bhi	1fec <memmove+0x78>
    1fc4:	e1a03000 	mov	r3, r0
    1fc8:	e3520000 	cmp	r2, #0
    1fcc:	0afffff8 	beq	1fb4 <memmove+0x40>
    1fd0:	e2411001 	sub	r1, r1, #1
    1fd4:	e0832002 	add	r2, r3, r2
    1fd8:	e5f1c001 	ldrb	r12, [r1, #1]!
    1fdc:	e4c3c001 	strb	r12, [r3], #1
    1fe0:	e1530002 	cmp	r3, r2
    1fe4:	1afffffb 	bne	1fd8 <memmove+0x64>
    1fe8:	eafffff1 	b	1fb4 <memmove+0x40>
    1fec:	e1813000 	orr	r3, r1, r0
    1ff0:	e3130003 	tst	r3, #3
    1ff4:	1a000027 	bne	2098 <memmove+0x124>
    1ff8:	e1a0c001 	mov	r12, r1
    1ffc:	e1a03000 	mov	r3, r0
    2000:	e1a04002 	mov	r4, r2
    2004:	e59c5000 	ldr	r5, [r12]
    2008:	e5835000 	str	r5, [r3]
    200c:	e59c5004 	ldr	r5, [r12, #4]
    2010:	e5835004 	str	r5, [r3, #4]
    2014:	e59c5008 	ldr	r5, [r12, #8]
    2018:	e5835008 	str	r5, [r3, #8]
    201c:	e2444010 	sub	r4, r4, #16
    2020:	e59c500c 	ldr	r5, [r12, #12]
    2024:	e354000f 	cmp	r4, #15
    2028:	e583500c 	str	r5, [r3, #12]
    202c:	e28cc010 	add	r12, r12, #16
    2030:	e2833010 	add	r3, r3, #16
    2034:	8afffff2 	bhi	2004 <memmove+0x90>
    2038:	e2424010 	sub	r4, r2, #16
    203c:	e3c4400f 	bic	r4, r4, #15
    2040:	e202c00f 	and	r12, r2, #15
    2044:	e2844010 	add	r4, r4, #16
    2048:	e35c0003 	cmp	r12, #3
    204c:	e0803004 	add	r3, r0, r4
    2050:	e0811004 	add	r1, r1, r4
    2054:	9a000011 	bls	20a0 <memmove+0x12c>
    2058:	e24cc004 	sub	r12, r12, #4
    205c:	e1a0712c 	lsr	r7, r12, #2
    2060:	e0816107 	add	r6, r1, r7, lsl #2
    2064:	e1a0c001 	mov	r12, r1
    2068:	e2866004 	add	r6, r6, #4
    206c:	e1a04003 	mov	r4, r3
    2070:	e49c5004 	ldr	r5, [r12], #4
    2074:	e15c0006 	cmp	r12, r6
    2078:	e4845004 	str	r5, [r4], #4
    207c:	1afffffb 	bne	2070 <memmove+0xfc>
    2080:	e287c001 	add	r12, r7, #1
    2084:	e1a0c10c 	lsl	r12, r12, #2
    2088:	e2022003 	and	r2, r2, #3
    208c:	e081100c 	add	r1, r1, r12
    2090:	e083300c 	add	r3, r3, r12
    2094:	eaffffcb 	b	1fc8 <memmove+0x54>
    2098:	e1a03000 	mov	r3, r0
    209c:	eaffffcb 	b	1fd0 <memmove+0x5c>
    20a0:	e1a0200c 	mov	r2, r12
    20a4:	eaffffc7 	b	1fc8 <memmove+0x54>

000020a8 <__malloc_lock>:
    20a8:	e12fff1e 	bx	lr

000020ac <__malloc_unlock>:
    20ac:	e12fff1e 	bx	lr

000020b0 <_realloc_r>:
    20b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    20b4:	e2514000 	subs	r4, r1, #0
    20b8:	e24dd00c 	sub	sp, sp, #12
    20bc:	e1a08000 	mov	r8, r0
    20c0:	e1a0b002 	mov	r11, r2
    20c4:	0a0000d1 	beq	2410 <_realloc_r+0x360>
    20c8:	ebfffff6 	bl	20a8 <__malloc_lock>
    20cc:	e28b500b 	add	r5, r11, #11
    20d0:	e3550016 	cmp	r5, #22
    20d4:	83c55007 	bichi	r5, r5, #7
    20d8:	93a01010 	movls	r1, #16
    20dc:	81a06fa5 	lsrhi	r6, r5, #31
    20e0:	93a06000 	movls	r6, #0
    20e4:	91a05001 	movls	r5, r1
    20e8:	e5143004 	ldr	r3, [r4, #-4]
    20ec:	81a01005 	movhi	r1, r5
    20f0:	e155000b 	cmp	r5, r11
    20f4:	33866001 	orrcc	r6, r6, #1
    20f8:	e3560000 	cmp	r6, #0
    20fc:	e3c37003 	bic	r7, r3, #3
    2100:	13a0300c 	movne	r3, #12
    2104:	e244a008 	sub	r10, r4, #8
    2108:	15883000 	strne	r3, [r8]
    210c:	13a06000 	movne	r6, #0
    2110:	1a00000f 	bne	2154 <_realloc_r+0xa4>
    2114:	e1570001 	cmp	r7, r1
    2118:	ba000011 	blt	2164 <_realloc_r+0xb4>
    211c:	e1a06007 	mov	r6, r7
    2120:	e0652006 	rsb	r2, r5, r6
    2124:	e352000f 	cmp	r2, #15
    2128:	e2033001 	and	r3, r3, #1
    212c:	8a00005e 	bhi	22ac <_realloc_r+0x1fc>
    2130:	e1833006 	orr	r3, r3, r6
    2134:	e58a3004 	str	r3, [r10, #4]
    2138:	e08aa006 	add	r10, r10, r6
    213c:	e59a3004 	ldr	r3, [r10, #4]
    2140:	e3833001 	orr	r3, r3, #1
    2144:	e58a3004 	str	r3, [r10, #4]
    2148:	e1a00008 	mov	r0, r8
    214c:	ebffffd6 	bl	20ac <__malloc_unlock>
    2150:	e1a06004 	mov	r6, r4
    2154:	e1a00006 	mov	r0, r6
    2158:	e28dd00c 	add	sp, sp, #12
    215c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2160:	e12fff1e 	bx	lr
    2164:	e59f24b4 	ldr	r2, [pc, #1204]	; 2620 <_realloc_r+0x570>
    2168:	e592c008 	ldr	r12, [r2, #8]
    216c:	e08a0007 	add	r0, r10, r7
    2170:	e15c0000 	cmp	r12, r0
    2174:	0a0000a9 	beq	2420 <_realloc_r+0x370>
    2178:	e590e004 	ldr	lr, [r0, #4]
    217c:	e3ce9001 	bic	r9, lr, #1
    2180:	e0809009 	add	r9, r0, r9
    2184:	e5999004 	ldr	r9, [r9, #4]
    2188:	e3190001 	tst	r9, #1
    218c:	11a0e006 	movne	lr, r6
    2190:	11a0000e 	movne	r0, lr
    2194:	0a00003b 	beq	2288 <_realloc_r+0x1d8>
    2198:	e3130001 	tst	r3, #1
    219c:	1a00004f 	bne	22e0 <_realloc_r+0x230>
    21a0:	e5149008 	ldr	r9, [r4, #-8]
    21a4:	e069900a 	rsb	r9, r9, r10
    21a8:	e5993004 	ldr	r3, [r9, #4]
    21ac:	e3500000 	cmp	r0, #0
    21b0:	e3c33003 	bic	r3, r3, #3
    21b4:	0a000067 	beq	2358 <_realloc_r+0x2a8>
    21b8:	e150000c 	cmp	r0, r12
    21bc:	e083c007 	add	r12, r3, r7
    21c0:	0a0000ce 	beq	2500 <_realloc_r+0x450>
    21c4:	e08e600c 	add	r6, lr, r12
    21c8:	e1560001 	cmp	r6, r1
    21cc:	ba000062 	blt	235c <_realloc_r+0x2ac>
    21d0:	e2802008 	add	r2, r0, #8
    21d4:	e892000c 	ldm	r2, {r2, r3}
    21d8:	e5832008 	str	r2, [r3, #8]
    21dc:	e582300c 	str	r3, [r2, #12]
    21e0:	e1a0a009 	mov	r10, r9
    21e4:	e599300c 	ldr	r3, [r9, #12]
    21e8:	e5ba1008 	ldr	r1, [r10, #8]!
    21ec:	e2472004 	sub	r2, r7, #4
    21f0:	e3520024 	cmp	r2, #36	; 0x24
    21f4:	e581300c 	str	r3, [r1, #12]
    21f8:	e5831008 	str	r1, [r3, #8]
    21fc:	8a0000fa 	bhi	25ec <_realloc_r+0x53c>
    2200:	e3520013 	cmp	r2, #19
    2204:	91a0300a 	movls	r3, r10
    2208:	9a000014 	bls	2260 <_realloc_r+0x1b0>
    220c:	e5943000 	ldr	r3, [r4]
    2210:	e5893008 	str	r3, [r9, #8]
    2214:	e5943004 	ldr	r3, [r4, #4]
    2218:	e352001b 	cmp	r2, #27
    221c:	e589300c 	str	r3, [r9, #12]
    2220:	92844008 	addls	r4, r4, #8
    2224:	92893010 	addls	r3, r9, #16
    2228:	9a00000c 	bls	2260 <_realloc_r+0x1b0>
    222c:	e5943008 	ldr	r3, [r4, #8]
    2230:	e5893010 	str	r3, [r9, #16]
    2234:	e594300c 	ldr	r3, [r4, #12]
    2238:	e5893014 	str	r3, [r9, #20]
    223c:	e3520024 	cmp	r2, #36	; 0x24
    2240:	05943010 	ldreq	r3, [r4, #16]
    2244:	05893018 	streq	r3, [r9, #24]
    2248:	05942014 	ldreq	r2, [r4, #20]
    224c:	0589201c 	streq	r2, [r9, #28]
    2250:	12893018 	addne	r3, r9, #24
    2254:	12844010 	addne	r4, r4, #16
    2258:	02893020 	addeq	r3, r9, #32
    225c:	02844018 	addeq	r4, r4, #24
    2260:	e5942000 	ldr	r2, [r4]
    2264:	e5832000 	str	r2, [r3]
    2268:	e5942004 	ldr	r2, [r4, #4]
    226c:	e5832004 	str	r2, [r3, #4]
    2270:	e5942008 	ldr	r2, [r4, #8]
    2274:	e5832008 	str	r2, [r3, #8]
    2278:	e1a0400a 	mov	r4, r10
    227c:	e5993004 	ldr	r3, [r9, #4]
    2280:	e1a0a009 	mov	r10, r9
    2284:	eaffffa5 	b	2120 <_realloc_r+0x70>
    2288:	e3cee003 	bic	lr, lr, #3
    228c:	e08e6007 	add	r6, lr, r7
    2290:	e1560001 	cmp	r6, r1
    2294:	baffffbf 	blt	2198 <_realloc_r+0xe8>
    2298:	e2801008 	add	r1, r0, #8
    229c:	e8910006 	ldm	r1, {r1, r2}
    22a0:	e581200c 	str	r2, [r1, #12]
    22a4:	e5821008 	str	r1, [r2, #8]
    22a8:	eaffff9c 	b	2120 <_realloc_r+0x70>
    22ac:	e08a1005 	add	r1, r10, r5
    22b0:	e3820001 	orr	r0, r2, #1
    22b4:	e1835005 	orr	r5, r3, r5
    22b8:	e58a5004 	str	r5, [r10, #4]
    22bc:	e5810004 	str	r0, [r1, #4]
    22c0:	e0812002 	add	r2, r1, r2
    22c4:	e5923004 	ldr	r3, [r2, #4]
    22c8:	e3833001 	orr	r3, r3, #1
    22cc:	e5823004 	str	r3, [r2, #4]
    22d0:	e1a00008 	mov	r0, r8
    22d4:	e2811008 	add	r1, r1, #8
    22d8:	eb0002ba 	bl	2dc8 <_free_r>
    22dc:	eaffff99 	b	2148 <_realloc_r+0x98>
    22e0:	e1a00008 	mov	r0, r8
    22e4:	e1a0100b 	mov	r1, r11
    22e8:	ebfffc90 	bl	1530 <_malloc_r>
    22ec:	e2506000 	subs	r6, r0, #0
    22f0:	0a000015 	beq	234c <_realloc_r+0x29c>
    22f4:	e5143004 	ldr	r3, [r4, #-4]
    22f8:	e3c32001 	bic	r2, r3, #1
    22fc:	e2461008 	sub	r1, r6, #8
    2300:	e08a2002 	add	r2, r10, r2
    2304:	e1510002 	cmp	r1, r2
    2308:	0a0000b3 	beq	25dc <_realloc_r+0x52c>
    230c:	e2472004 	sub	r2, r7, #4
    2310:	e3520024 	cmp	r2, #36	; 0x24
    2314:	8a000076 	bhi	24f4 <_realloc_r+0x444>
    2318:	e3520013 	cmp	r2, #19
    231c:	91a03006 	movls	r3, r6
    2320:	91a02004 	movls	r2, r4
    2324:	8a000052 	bhi	2474 <_realloc_r+0x3c4>
    2328:	e5921000 	ldr	r1, [r2]
    232c:	e5831000 	str	r1, [r3]
    2330:	e5921004 	ldr	r1, [r2, #4]
    2334:	e5831004 	str	r1, [r3, #4]
    2338:	e5922008 	ldr	r2, [r2, #8]
    233c:	e5832008 	str	r2, [r3, #8]
    2340:	e1a00008 	mov	r0, r8
    2344:	e1a01004 	mov	r1, r4
    2348:	eb00029e 	bl	2dc8 <_free_r>
    234c:	e1a00008 	mov	r0, r8
    2350:	ebffff55 	bl	20ac <__malloc_unlock>
    2354:	eaffff7e 	b	2154 <_realloc_r+0xa4>
    2358:	e083c007 	add	r12, r3, r7
    235c:	e15c0001 	cmp	r12, r1
    2360:	baffffde 	blt	22e0 <_realloc_r+0x230>
    2364:	e1a06009 	mov	r6, r9
    2368:	e599300c 	ldr	r3, [r9, #12]
    236c:	e5b61008 	ldr	r1, [r6, #8]!
    2370:	e2472004 	sub	r2, r7, #4
    2374:	e3520024 	cmp	r2, #36	; 0x24
    2378:	e581300c 	str	r3, [r1, #12]
    237c:	e5831008 	str	r1, [r3, #8]
    2380:	8a000051 	bhi	24cc <_realloc_r+0x41c>
    2384:	e3520013 	cmp	r2, #19
    2388:	91a03006 	movls	r3, r6
    238c:	9a000014 	bls	23e4 <_realloc_r+0x334>
    2390:	e5943000 	ldr	r3, [r4]
    2394:	e5893008 	str	r3, [r9, #8]
    2398:	e5943004 	ldr	r3, [r4, #4]
    239c:	e352001b 	cmp	r2, #27
    23a0:	e589300c 	str	r3, [r9, #12]
    23a4:	92844008 	addls	r4, r4, #8
    23a8:	92893010 	addls	r3, r9, #16
    23ac:	9a00000c 	bls	23e4 <_realloc_r+0x334>
    23b0:	e5943008 	ldr	r3, [r4, #8]
    23b4:	e5893010 	str	r3, [r9, #16]
    23b8:	e594300c 	ldr	r3, [r4, #12]
    23bc:	e5893014 	str	r3, [r9, #20]
    23c0:	e3520024 	cmp	r2, #36	; 0x24
    23c4:	05943010 	ldreq	r3, [r4, #16]
    23c8:	05893018 	streq	r3, [r9, #24]
    23cc:	05942014 	ldreq	r2, [r4, #20]
    23d0:	0589201c 	streq	r2, [r9, #28]
    23d4:	12893018 	addne	r3, r9, #24
    23d8:	12844010 	addne	r4, r4, #16
    23dc:	02893020 	addeq	r3, r9, #32
    23e0:	02844018 	addeq	r4, r4, #24
    23e4:	e5942000 	ldr	r2, [r4]
    23e8:	e5832000 	str	r2, [r3]
    23ec:	e5942004 	ldr	r2, [r4, #4]
    23f0:	e5832004 	str	r2, [r3, #4]
    23f4:	e5942008 	ldr	r2, [r4, #8]
    23f8:	e5832008 	str	r2, [r3, #8]
    23fc:	e1a04006 	mov	r4, r6
    2400:	e5993004 	ldr	r3, [r9, #4]
    2404:	e1a0600c 	mov	r6, r12
    2408:	e1a0a009 	mov	r10, r9
    240c:	eaffff43 	b	2120 <_realloc_r+0x70>
    2410:	e1a01002 	mov	r1, r2
    2414:	ebfffc45 	bl	1530 <_malloc_r>
    2418:	e1a06000 	mov	r6, r0
    241c:	eaffff4c 	b	2154 <_realloc_r+0xa4>
    2420:	e59ce004 	ldr	lr, [r12, #4]
    2424:	e3cee003 	bic	lr, lr, #3
    2428:	e08e0007 	add	r0, lr, r7
    242c:	e2856010 	add	r6, r5, #16
    2430:	e1500006 	cmp	r0, r6
    2434:	b1a0000c 	movlt	r0, r12
    2438:	baffff56 	blt	2198 <_realloc_r+0xe8>
    243c:	e0653000 	rsb	r3, r5, r0
    2440:	e08aa005 	add	r10, r10, r5
    2444:	e3833001 	orr	r3, r3, #1
    2448:	e58a3004 	str	r3, [r10, #4]
    244c:	e5143004 	ldr	r3, [r4, #-4]
    2450:	e2033001 	and	r3, r3, #1
    2454:	e1855003 	orr	r5, r5, r3
    2458:	e59f31c0 	ldr	r3, [pc, #448]	; 2620 <_realloc_r+0x570>
    245c:	e5045004 	str	r5, [r4, #-4]
    2460:	e1a00008 	mov	r0, r8
    2464:	e583a008 	str	r10, [r3, #8]
    2468:	e1a06004 	mov	r6, r4
    246c:	ebffff0e 	bl	20ac <__malloc_unlock>
    2470:	eaffff37 	b	2154 <_realloc_r+0xa4>
    2474:	e5943000 	ldr	r3, [r4]
    2478:	e5863000 	str	r3, [r6]
    247c:	e5943004 	ldr	r3, [r4, #4]
    2480:	e352001b 	cmp	r2, #27
    2484:	e5863004 	str	r3, [r6, #4]
    2488:	92842008 	addls	r2, r4, #8
    248c:	92863008 	addls	r3, r6, #8
    2490:	9affffa4 	bls	2328 <_realloc_r+0x278>
    2494:	e5943008 	ldr	r3, [r4, #8]
    2498:	e5863008 	str	r3, [r6, #8]
    249c:	e594300c 	ldr	r3, [r4, #12]
    24a0:	e586300c 	str	r3, [r6, #12]
    24a4:	e3520024 	cmp	r2, #36	; 0x24
    24a8:	05943010 	ldreq	r3, [r4, #16]
    24ac:	05863010 	streq	r3, [r6, #16]
    24b0:	05942014 	ldreq	r2, [r4, #20]
    24b4:	12863010 	addne	r3, r6, #16
    24b8:	05862014 	streq	r2, [r6, #20]
    24bc:	12842010 	addne	r2, r4, #16
    24c0:	02863018 	addeq	r3, r6, #24
    24c4:	02842018 	addeq	r2, r4, #24
    24c8:	eaffff96 	b	2328 <_realloc_r+0x278>
    24cc:	e1a01004 	mov	r1, r4
    24d0:	e1a00006 	mov	r0, r6
    24d4:	e58dc004 	str	r12, [sp, #4]
    24d8:	ebfffea5 	bl	1f74 <memmove>
    24dc:	e59dc004 	ldr	r12, [sp, #4]
    24e0:	e1a04006 	mov	r4, r6
    24e4:	e5993004 	ldr	r3, [r9, #4]
    24e8:	e1a0600c 	mov	r6, r12
    24ec:	e1a0a009 	mov	r10, r9
    24f0:	eaffff0a 	b	2120 <_realloc_r+0x70>
    24f4:	e1a01004 	mov	r1, r4
    24f8:	ebfffe9d 	bl	1f74 <memmove>
    24fc:	eaffff8f 	b	2340 <_realloc_r+0x290>
    2500:	e08e300c 	add	r3, lr, r12
    2504:	e2850010 	add	r0, r5, #16
    2508:	e1530000 	cmp	r3, r0
    250c:	baffff92 	blt	235c <_realloc_r+0x2ac>
    2510:	e1a06009 	mov	r6, r9
    2514:	e599100c 	ldr	r1, [r9, #12]
    2518:	e5b60008 	ldr	r0, [r6, #8]!
    251c:	e2472004 	sub	r2, r7, #4
    2520:	e3520024 	cmp	r2, #36	; 0x24
    2524:	e580100c 	str	r1, [r0, #12]
    2528:	e5810008 	str	r0, [r1, #8]
    252c:	8a000035 	bhi	2608 <_realloc_r+0x558>
    2530:	e3520013 	cmp	r2, #19
    2534:	91a02006 	movls	r2, r6
    2538:	9a000014 	bls	2590 <_realloc_r+0x4e0>
    253c:	e5941000 	ldr	r1, [r4]
    2540:	e5891008 	str	r1, [r9, #8]
    2544:	e5941004 	ldr	r1, [r4, #4]
    2548:	e352001b 	cmp	r2, #27
    254c:	e589100c 	str	r1, [r9, #12]
    2550:	92892010 	addls	r2, r9, #16
    2554:	92844008 	addls	r4, r4, #8
    2558:	9a00000c 	bls	2590 <_realloc_r+0x4e0>
    255c:	e5941008 	ldr	r1, [r4, #8]
    2560:	e5891010 	str	r1, [r9, #16]
    2564:	e594100c 	ldr	r1, [r4, #12]
    2568:	e5891014 	str	r1, [r9, #20]
    256c:	e3520024 	cmp	r2, #36	; 0x24
    2570:	05942010 	ldreq	r2, [r4, #16]
    2574:	05892018 	streq	r2, [r9, #24]
    2578:	05941014 	ldreq	r1, [r4, #20]
    257c:	0589101c 	streq	r1, [r9, #28]
    2580:	12892018 	addne	r2, r9, #24
    2584:	12844010 	addne	r4, r4, #16
    2588:	02892020 	addeq	r2, r9, #32
    258c:	02844018 	addeq	r4, r4, #24
    2590:	e5941000 	ldr	r1, [r4]
    2594:	e5821000 	str	r1, [r2]
    2598:	e5941004 	ldr	r1, [r4, #4]
    259c:	e5821004 	str	r1, [r2, #4]
    25a0:	e5941008 	ldr	r1, [r4, #8]
    25a4:	e5821008 	str	r1, [r2, #8]
    25a8:	e0653003 	rsb	r3, r5, r3
    25ac:	e0892005 	add	r2, r9, r5
    25b0:	e3833001 	orr	r3, r3, #1
    25b4:	e5823004 	str	r3, [r2, #4]
    25b8:	e5993004 	ldr	r3, [r9, #4]
    25bc:	e2033001 	and	r3, r3, #1
    25c0:	e1855003 	orr	r5, r5, r3
    25c4:	e59f3054 	ldr	r3, [pc, #84]	; 2620 <_realloc_r+0x570>
    25c8:	e5895004 	str	r5, [r9, #4]
    25cc:	e1a00008 	mov	r0, r8
    25d0:	e5832008 	str	r2, [r3, #8]
    25d4:	ebfffeb4 	bl	20ac <__malloc_unlock>
    25d8:	eafffedd 	b	2154 <_realloc_r+0xa4>
    25dc:	e5166004 	ldr	r6, [r6, #-4]
    25e0:	e3c66003 	bic	r6, r6, #3
    25e4:	e0866007 	add	r6, r6, r7
    25e8:	eafffecc 	b	2120 <_realloc_r+0x70>
    25ec:	e1a01004 	mov	r1, r4
    25f0:	e1a0000a 	mov	r0, r10
    25f4:	ebfffe5e 	bl	1f74 <memmove>
    25f8:	e1a0400a 	mov	r4, r10
    25fc:	e5993004 	ldr	r3, [r9, #4]
    2600:	e1a0a009 	mov	r10, r9
    2604:	eafffec5 	b	2120 <_realloc_r+0x70>
    2608:	e1a00006 	mov	r0, r6
    260c:	e1a01004 	mov	r1, r4
    2610:	e58d3004 	str	r3, [sp, #4]
    2614:	ebfffe56 	bl	1f74 <memmove>
    2618:	e59d3004 	ldr	r3, [sp, #4]
    261c:	eaffffe1 	b	25a8 <_realloc_r+0x4f8>
    2620:	000044b8 	.word	0x000044b8

00002624 <_sbrk_r>:
    2624:	e92d4038 	push	{r3, r4, r5, lr}
    2628:	e59f4030 	ldr	r4, [pc, #48]	; 2660 <_sbrk_r+0x3c>
    262c:	e3a03000 	mov	r3, #0
    2630:	e1a05000 	mov	r5, r0
    2634:	e1a00001 	mov	r0, r1
    2638:	e5843000 	str	r3, [r4]
    263c:	eb00055c 	bl	3bb4 <_sbrk>
    2640:	e3700001 	cmn	r0, #1
    2644:	0a000001 	beq	2650 <_sbrk_r+0x2c>
    2648:	e8bd4038 	pop	{r3, r4, r5, lr}
    264c:	e12fff1e 	bx	lr
    2650:	e5943000 	ldr	r3, [r4]
    2654:	e3530000 	cmp	r3, #0
    2658:	15853000 	strne	r3, [r5]
    265c:	eafffff9 	b	2648 <_sbrk_r+0x24>
    2660:	00004920 	.word	0x00004920

00002664 <__swsetup_r>:
    2664:	e92d4038 	push	{r3, r4, r5, lr}
    2668:	e59f3128 	ldr	r3, [pc, #296]	; 2798 <__swsetup_r+0x134>
    266c:	e5933000 	ldr	r3, [r3]
    2670:	e3530000 	cmp	r3, #0
    2674:	e1a05000 	mov	r5, r0
    2678:	e1a04001 	mov	r4, r1
    267c:	0a000002 	beq	268c <__swsetup_r+0x28>
    2680:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    2684:	e3520000 	cmp	r2, #0
    2688:	0a00002e 	beq	2748 <__swsetup_r+0xe4>
    268c:	e1d430bc 	ldrh	r3, [r4, #12]
    2690:	e3130008 	tst	r3, #8
    2694:	e1a02003 	mov	r2, r3
    2698:	0a00000c 	beq	26d0 <__swsetup_r+0x6c>
    269c:	e5942010 	ldr	r2, [r4, #16]
    26a0:	e3520000 	cmp	r2, #0
    26a4:	0a000012 	beq	26f4 <__swsetup_r+0x90>
    26a8:	e2131001 	ands	r1, r3, #1
    26ac:	1a000019 	bne	2718 <__swsetup_r+0xb4>
    26b0:	e3130002 	tst	r3, #2
    26b4:	05941014 	ldreq	r1, [r4, #20]
    26b8:	e3520000 	cmp	r2, #0
    26bc:	e5841008 	str	r1, [r4, #8]
    26c0:	0a00001b 	beq	2734 <__swsetup_r+0xd0>
    26c4:	e3a00000 	mov	r0, #0
    26c8:	e8bd4038 	pop	{r3, r4, r5, lr}
    26cc:	e12fff1e 	bx	lr
    26d0:	e3130010 	tst	r3, #16
    26d4:	0a000019 	beq	2740 <__swsetup_r+0xdc>
    26d8:	e3120004 	tst	r2, #4
    26dc:	1a00001c 	bne	2754 <__swsetup_r+0xf0>
    26e0:	e5942010 	ldr	r2, [r4, #16]
    26e4:	e3833008 	orr	r3, r3, #8
    26e8:	e3520000 	cmp	r2, #0
    26ec:	e1c430bc 	strh	r3, [r4, #12]
    26f0:	1affffec 	bne	26a8 <__swsetup_r+0x44>
    26f4:	e2031d0a 	and	r1, r3, #640	; 0x280
    26f8:	e3510c02 	cmp	r1, #512	; 0x200
    26fc:	0affffe9 	beq	26a8 <__swsetup_r+0x44>
    2700:	e1a00005 	mov	r0, r5
    2704:	e1a01004 	mov	r1, r4
    2708:	eb00028e 	bl	3148 <__smakebuf_r>
    270c:	e1d430bc 	ldrh	r3, [r4, #12]
    2710:	e5942010 	ldr	r2, [r4, #16]
    2714:	eaffffe3 	b	26a8 <__swsetup_r+0x44>
    2718:	e5943014 	ldr	r3, [r4, #20]
    271c:	e3a01000 	mov	r1, #0
    2720:	e2633000 	rsb	r3, r3, #0
    2724:	e3520000 	cmp	r2, #0
    2728:	e5841008 	str	r1, [r4, #8]
    272c:	e5843018 	str	r3, [r4, #24]
    2730:	1affffe3 	bne	26c4 <__swsetup_r+0x60>
    2734:	e1d430bc 	ldrh	r3, [r4, #12]
    2738:	e3130080 	tst	r3, #128	; 0x80
    273c:	0affffe0 	beq	26c4 <__swsetup_r+0x60>
    2740:	e3e00000 	mvn	r0, #0
    2744:	eaffffdf 	b	26c8 <__swsetup_r+0x64>
    2748:	e1a00003 	mov	r0, r3
    274c:	eb0000ec 	bl	2b04 <__sinit>
    2750:	eaffffcd 	b	268c <__swsetup_r+0x28>
    2754:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    2758:	e3510000 	cmp	r1, #0
    275c:	0a000007 	beq	2780 <__swsetup_r+0x11c>
    2760:	e2842040 	add	r2, r4, #64	; 0x40
    2764:	e1510002 	cmp	r1, r2
    2768:	0a000002 	beq	2778 <__swsetup_r+0x114>
    276c:	e1a00005 	mov	r0, r5
    2770:	eb000194 	bl	2dc8 <_free_r>
    2774:	e1d430bc 	ldrh	r3, [r4, #12]
    2778:	e3a02000 	mov	r2, #0
    277c:	e5842030 	str	r2, [r4, #48]	; 0x30
    2780:	e5942010 	ldr	r2, [r4, #16]
    2784:	e3a01000 	mov	r1, #0
    2788:	e3c33024 	bic	r3, r3, #36	; 0x24
    278c:	e5841004 	str	r1, [r4, #4]
    2790:	e5842000 	str	r2, [r4]
    2794:	eaffffd2 	b	26e4 <__swsetup_r+0x80>
    2798:	00004088 	.word	0x00004088

0000279c <_fflush_r>:
    279c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    27a0:	e2507000 	subs	r7, r0, #0
    27a4:	e1a04001 	mov	r4, r1
    27a8:	0a000002 	beq	27b8 <_fflush_r+0x1c>
    27ac:	e5973038 	ldr	r3, [r7, #56]	; 0x38
    27b0:	e3530000 	cmp	r3, #0
    27b4:	0a000059 	beq	2920 <_fflush_r+0x184>
    27b8:	e1d420bc 	ldrh	r2, [r4, #12]
    27bc:	e3520000 	cmp	r2, #0
    27c0:	0a000023 	beq	2854 <_fflush_r+0xb8>
    27c4:	e3120008 	tst	r2, #8
    27c8:	0a000024 	beq	2860 <_fflush_r+0xc4>
    27cc:	e5946010 	ldr	r6, [r4, #16]
    27d0:	e3560000 	cmp	r6, #0
    27d4:	0a00001e 	beq	2854 <_fflush_r+0xb8>
    27d8:	e5945000 	ldr	r5, [r4]
    27dc:	e3120003 	tst	r2, #3
    27e0:	05943014 	ldreq	r3, [r4, #20]
    27e4:	e0665005 	rsb	r5, r6, r5
    27e8:	13a03000 	movne	r3, #0
    27ec:	e3550000 	cmp	r5, #0
    27f0:	e5846000 	str	r6, [r4]
    27f4:	e5843008 	str	r3, [r4, #8]
    27f8:	ca000003 	bgt	280c <_fflush_r+0x70>
    27fc:	ea000014 	b	2854 <_fflush_r+0xb8>
    2800:	e3550000 	cmp	r5, #0
    2804:	e0866000 	add	r6, r6, r0
    2808:	da000011 	ble	2854 <_fflush_r+0xb8>
    280c:	e1a03005 	mov	r3, r5
    2810:	e1a02006 	mov	r2, r6
    2814:	e1a00007 	mov	r0, r7
    2818:	e594101c 	ldr	r1, [r4, #28]
    281c:	e594c024 	ldr	r12, [r4, #36]	; 0x24
    2820:	e1a0e00f 	mov	lr, pc
    2824:	e12fff1c 	bx	r12
    2828:	e3500000 	cmp	r0, #0
    282c:	e0605005 	rsb	r5, r0, r5
    2830:	cafffff2 	bgt	2800 <_fflush_r+0x64>
    2834:	e1d430bc 	ldrh	r3, [r4, #12]
    2838:	e3833040 	orr	r3, r3, #64	; 0x40
    283c:	e1c430bc 	strh	r3, [r4, #12]
    2840:	e3e00000 	mvn	r0, #0
    2844:	ea000003 	b	2858 <_fflush_r+0xbc>
    2848:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
    284c:	e3510000 	cmp	r1, #0
    2850:	ca000007 	bgt	2874 <_fflush_r+0xd8>
    2854:	e3a00000 	mov	r0, #0
    2858:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    285c:	e12fff1e 	bx	lr
    2860:	e5941004 	ldr	r1, [r4, #4]
    2864:	e3823b02 	orr	r3, r2, #2048	; 0x800
    2868:	e3510000 	cmp	r1, #0
    286c:	e1c430bc 	strh	r3, [r4, #12]
    2870:	dafffff4 	ble	2848 <_fflush_r+0xac>
    2874:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    2878:	e35c0000 	cmp	r12, #0
    287c:	0afffff4 	beq	2854 <_fflush_r+0xb8>
    2880:	e3a01000 	mov	r1, #0
    2884:	e2126a01 	ands	r6, r2, #4096	; 0x1000
    2888:	e5975000 	ldr	r5, [r7]
    288c:	e5871000 	str	r1, [r7]
    2890:	0a000024 	beq	2928 <_fflush_r+0x18c>
    2894:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    2898:	e3130004 	tst	r3, #4
    289c:	0a000005 	beq	28b8 <_fflush_r+0x11c>
    28a0:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    28a4:	e5943004 	ldr	r3, [r4, #4]
    28a8:	e3510000 	cmp	r1, #0
    28ac:	e0632002 	rsb	r2, r3, r2
    28b0:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    28b4:	10632002 	rsbne	r2, r3, r2
    28b8:	e1a00007 	mov	r0, r7
    28bc:	e594101c 	ldr	r1, [r4, #28]
    28c0:	e3a03000 	mov	r3, #0
    28c4:	e1a0e00f 	mov	lr, pc
    28c8:	e12fff1c 	bx	r12
    28cc:	e3700001 	cmn	r0, #1
    28d0:	0a000020 	beq	2958 <_fflush_r+0x1bc>
    28d4:	e1d430bc 	ldrh	r3, [r4, #12]
    28d8:	e5942010 	ldr	r2, [r4, #16]
    28dc:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    28e0:	e3130a01 	tst	r3, #4096	; 0x1000
    28e4:	e3a03000 	mov	r3, #0
    28e8:	e1c410bc 	strh	r1, [r4, #12]
    28ec:	e884000c 	stm	r4, {r2, r3}
    28f0:	1a000028 	bne	2998 <_fflush_r+0x1fc>
    28f4:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    28f8:	e3510000 	cmp	r1, #0
    28fc:	e5875000 	str	r5, [r7]
    2900:	0affffd3 	beq	2854 <_fflush_r+0xb8>
    2904:	e2843040 	add	r3, r4, #64	; 0x40
    2908:	e1510003 	cmp	r1, r3
    290c:	11a00007 	movne	r0, r7
    2910:	1b00012c 	blne	2dc8 <_free_r>
    2914:	e3a00000 	mov	r0, #0
    2918:	e5840030 	str	r0, [r4, #48]	; 0x30
    291c:	eaffffcd 	b	2858 <_fflush_r+0xbc>
    2920:	eb000077 	bl	2b04 <__sinit>
    2924:	eaffffa3 	b	27b8 <_fflush_r+0x1c>
    2928:	e1a02006 	mov	r2, r6
    292c:	e1a00007 	mov	r0, r7
    2930:	e594101c 	ldr	r1, [r4, #28]
    2934:	e3a03001 	mov	r3, #1
    2938:	e1a0e00f 	mov	lr, pc
    293c:	e12fff1c 	bx	r12
    2940:	e3700001 	cmn	r0, #1
    2944:	e1a02000 	mov	r2, r0
    2948:	0a000014 	beq	29a0 <_fflush_r+0x204>
    294c:	e1d430bc 	ldrh	r3, [r4, #12]
    2950:	e594c028 	ldr	r12, [r4, #40]	; 0x28
    2954:	eaffffcf 	b	2898 <_fflush_r+0xfc>
    2958:	e597c000 	ldr	r12, [r7]
    295c:	e35c001d 	cmp	r12, #29
    2960:	8affffb3 	bhi	2834 <_fflush_r+0x98>
    2964:	e59f3058 	ldr	r3, [pc, #88]	; 29c4 <_fflush_r+0x228>
    2968:	e1b03c13 	lsls	r3, r3, r12
    296c:	5affffb0 	bpl	2834 <_fflush_r+0x98>
    2970:	e1d430bc 	ldrh	r3, [r4, #12]
    2974:	e5942010 	ldr	r2, [r4, #16]
    2978:	e3c31b02 	bic	r1, r3, #2048	; 0x800
    297c:	e3130a01 	tst	r3, #4096	; 0x1000
    2980:	e3a03000 	mov	r3, #0
    2984:	e1c410bc 	strh	r1, [r4, #12]
    2988:	e884000c 	stm	r4, {r2, r3}
    298c:	0affffd8 	beq	28f4 <_fflush_r+0x158>
    2990:	e35c0000 	cmp	r12, #0
    2994:	1affffd6 	bne	28f4 <_fflush_r+0x158>
    2998:	e5840050 	str	r0, [r4, #80]	; 0x50
    299c:	eaffffd4 	b	28f4 <_fflush_r+0x158>
    29a0:	e5973000 	ldr	r3, [r7]
    29a4:	e3530000 	cmp	r3, #0
    29a8:	0affffe7 	beq	294c <_fflush_r+0x1b0>
    29ac:	e353001d 	cmp	r3, #29
    29b0:	13530016 	cmpne	r3, #22
    29b4:	05875000 	streq	r5, [r7]
    29b8:	01a00006 	moveq	r0, r6
    29bc:	0affffa5 	beq	2858 <_fflush_r+0xbc>
    29c0:	eaffff9b 	b	2834 <_fflush_r+0x98>
    29c4:	80000204 	.word	0x80000204

000029c8 <fflush>:
    29c8:	e2501000 	subs	r1, r0, #0
    29cc:	e92d4008 	push	{r3, lr}
    29d0:	0a000003 	beq	29e4 <fflush+0x1c>
    29d4:	e59f3020 	ldr	r3, [pc, #32]	; 29fc <fflush+0x34>
    29d8:	e5930000 	ldr	r0, [r3]
    29dc:	e8bd4008 	pop	{r3, lr}
    29e0:	eaffff6d 	b	279c <_fflush_r>
    29e4:	e59f3014 	ldr	r3, [pc, #20]	; 2a00 <fflush+0x38>
    29e8:	e59f1014 	ldr	r1, [pc, #20]	; 2a04 <fflush+0x3c>
    29ec:	e5930000 	ldr	r0, [r3]
    29f0:	eb0001b1 	bl	30bc <_fwalk_reent>
    29f4:	e8bd4008 	pop	{r3, lr}
    29f8:	e12fff1e 	bx	lr
    29fc:	00004088 	.word	0x00004088
    2a00:	00004018 	.word	0x00004018
    2a04:	0000279c 	.word	0x0000279c

00002a08 <__fp_lock>:
    2a08:	e3a00000 	mov	r0, #0
    2a0c:	e12fff1e 	bx	lr

00002a10 <__fp_unlock>:
    2a10:	e3a00000 	mov	r0, #0
    2a14:	e12fff1e 	bx	lr

00002a18 <_cleanup_r>:
    2a18:	e92d4008 	push	{r3, lr}
    2a1c:	e59f1008 	ldr	r1, [pc, #8]	; 2a2c <_cleanup_r+0x14>
    2a20:	eb000183 	bl	3034 <_fwalk>
    2a24:	e8bd4008 	pop	{r3, lr}
    2a28:	e12fff1e 	bx	lr
    2a2c:	000037c8 	.word	0x000037c8

00002a30 <std.isra.0>:
    2a30:	e3a03000 	mov	r3, #0
    2a34:	e92d4010 	push	{r4, lr}
    2a38:	e1a04000 	mov	r4, r0
    2a3c:	e1c010bc 	strh	r1, [r0, #12]
    2a40:	e1c020be 	strh	r2, [r0, #14]
    2a44:	e5803000 	str	r3, [r0]
    2a48:	e5803004 	str	r3, [r0, #4]
    2a4c:	e5803008 	str	r3, [r0, #8]
    2a50:	e5803064 	str	r3, [r0, #100]	; 0x64
    2a54:	e5803010 	str	r3, [r0, #16]
    2a58:	e5803014 	str	r3, [r0, #20]
    2a5c:	e5803018 	str	r3, [r0, #24]
    2a60:	e1a01003 	mov	r1, r3
    2a64:	e280005c 	add	r0, r0, #92	; 0x5c
    2a68:	e3a02008 	mov	r2, #8
    2a6c:	eb00020c 	bl	32a4 <memset>
    2a70:	e59f3024 	ldr	r3, [pc, #36]	; 2a9c <std.isra.0+0x6c>
    2a74:	e5843020 	str	r3, [r4, #32]
    2a78:	e59f3020 	ldr	r3, [pc, #32]	; 2aa0 <std.isra.0+0x70>
    2a7c:	e5843024 	str	r3, [r4, #36]	; 0x24
    2a80:	e59f301c 	ldr	r3, [pc, #28]	; 2aa4 <std.isra.0+0x74>
    2a84:	e5843028 	str	r3, [r4, #40]	; 0x28
    2a88:	e59f3018 	ldr	r3, [pc, #24]	; 2aa8 <std.isra.0+0x78>
    2a8c:	e584401c 	str	r4, [r4, #28]
    2a90:	e584302c 	str	r3, [r4, #44]	; 0x2c
    2a94:	e8bd4010 	pop	{r4, lr}
    2a98:	e12fff1e 	bx	lr
    2a9c:	00003574 	.word	0x00003574
    2aa0:	000035b0 	.word	0x000035b0
    2aa4:	00003608 	.word	0x00003608
    2aa8:	0000363c 	.word	0x0000363c

00002aac <__sfmoreglue>:
    2aac:	e92d4070 	push	{r4, r5, r6, lr}
    2ab0:	e0816081 	add	r6, r1, r1, lsl #1
    2ab4:	e0816106 	add	r6, r1, r6, lsl #2
    2ab8:	e1a06186 	lsl	r6, r6, #3
    2abc:	e1a05001 	mov	r5, r1
    2ac0:	e286100c 	add	r1, r6, #12
    2ac4:	ebfffa99 	bl	1530 <_malloc_r>
    2ac8:	e2504000 	subs	r4, r0, #0
    2acc:	0a000005 	beq	2ae8 <__sfmoreglue+0x3c>
    2ad0:	e284000c 	add	r0, r4, #12
    2ad4:	e3a01000 	mov	r1, #0
    2ad8:	e8840022 	stm	r4, {r1, r5}
    2adc:	e5840008 	str	r0, [r4, #8]
    2ae0:	e1a02006 	mov	r2, r6
    2ae4:	eb0001ee 	bl	32a4 <memset>
    2ae8:	e1a00004 	mov	r0, r4
    2aec:	e8bd4070 	pop	{r4, r5, r6, lr}
    2af0:	e12fff1e 	bx	lr

00002af4 <_cleanup>:
    2af4:	e59f3004 	ldr	r3, [pc, #4]	; 2b00 <_cleanup+0xc>
    2af8:	e5930000 	ldr	r0, [r3]
    2afc:	eaffffc5 	b	2a18 <_cleanup_r>
    2b00:	00004018 	.word	0x00004018

00002b04 <__sinit>:
    2b04:	e92d4038 	push	{r3, r4, r5, lr}
    2b08:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    2b0c:	e3530000 	cmp	r3, #0
    2b10:	e1a04000 	mov	r4, r0
    2b14:	0a000001 	beq	2b20 <__sinit+0x1c>
    2b18:	e8bd4038 	pop	{r3, r4, r5, lr}
    2b1c:	e12fff1e 	bx	lr
    2b20:	e59fe050 	ldr	lr, [pc, #80]	; 2b78 <__sinit+0x74>
    2b24:	e280cfbb 	add	r12, r0, #748	; 0x2ec
    2b28:	e3a05001 	mov	r5, #1
    2b2c:	e1a02003 	mov	r2, r3
    2b30:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
    2b34:	e3a03003 	mov	r3, #3
    2b38:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    2b3c:	e58432e4 	str	r3, [r4, #740]	; 0x2e4
    2b40:	e584c2e8 	str	r12, [r4, #744]	; 0x2e8
    2b44:	e5900004 	ldr	r0, [r0, #4]
    2b48:	e3a01004 	mov	r1, #4
    2b4c:	e5845038 	str	r5, [r4, #56]	; 0x38
    2b50:	ebffffb6 	bl	2a30 <std.isra.0>
    2b54:	e5940008 	ldr	r0, [r4, #8]
    2b58:	e1a02005 	mov	r2, r5
    2b5c:	e3a01009 	mov	r1, #9
    2b60:	ebffffb2 	bl	2a30 <std.isra.0>
    2b64:	e594000c 	ldr	r0, [r4, #12]
    2b68:	e3a01012 	mov	r1, #18
    2b6c:	e3a02002 	mov	r2, #2
    2b70:	e8bd4038 	pop	{r3, r4, r5, lr}
    2b74:	eaffffad 	b	2a30 <std.isra.0>
    2b78:	00002a18 	.word	0x00002a18

00002b7c <__sfp>:
    2b7c:	e59f30ec 	ldr	r3, [pc, #236]	; 2c70 <__sfp+0xf4>
    2b80:	e92d4070 	push	{r4, r5, r6, lr}
    2b84:	e5935000 	ldr	r5, [r3]
    2b88:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    2b8c:	e3530000 	cmp	r3, #0
    2b90:	e1a06000 	mov	r6, r0
    2b94:	0a000028 	beq	2c3c <__sfp+0xc0>
    2b98:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    2b9c:	e5953004 	ldr	r3, [r5, #4]
    2ba0:	e2533001 	subs	r3, r3, #1
    2ba4:	e5954008 	ldr	r4, [r5, #8]
    2ba8:	5a000004 	bpl	2bc0 <__sfp+0x44>
    2bac:	ea00001d 	b	2c28 <__sfp+0xac>
    2bb0:	e2433001 	sub	r3, r3, #1
    2bb4:	e3730001 	cmn	r3, #1
    2bb8:	e2844068 	add	r4, r4, #104	; 0x68
    2bbc:	0a000019 	beq	2c28 <__sfp+0xac>
    2bc0:	e1d420fc 	ldrsh	r2, [r4, #12]
    2bc4:	e3520000 	cmp	r2, #0
    2bc8:	1afffff8 	bne	2bb0 <__sfp+0x34>
    2bcc:	e3e03000 	mvn	r3, #0
    2bd0:	e3a05000 	mov	r5, #0
    2bd4:	e1c430be 	strh	r3, [r4, #14]
    2bd8:	e3a03001 	mov	r3, #1
    2bdc:	e1c430bc 	strh	r3, [r4, #12]
    2be0:	e5845064 	str	r5, [r4, #100]	; 0x64
    2be4:	e5845000 	str	r5, [r4]
    2be8:	e5845008 	str	r5, [r4, #8]
    2bec:	e5845004 	str	r5, [r4, #4]
    2bf0:	e5845010 	str	r5, [r4, #16]
    2bf4:	e5845014 	str	r5, [r4, #20]
    2bf8:	e5845018 	str	r5, [r4, #24]
    2bfc:	e284005c 	add	r0, r4, #92	; 0x5c
    2c00:	e1a01005 	mov	r1, r5
    2c04:	e3a02008 	mov	r2, #8
    2c08:	eb0001a5 	bl	32a4 <memset>
    2c0c:	e5845030 	str	r5, [r4, #48]	; 0x30
    2c10:	e5845034 	str	r5, [r4, #52]	; 0x34
    2c14:	e5845044 	str	r5, [r4, #68]	; 0x44
    2c18:	e5845048 	str	r5, [r4, #72]	; 0x48
    2c1c:	e1a00004 	mov	r0, r4
    2c20:	e8bd4070 	pop	{r4, r5, r6, lr}
    2c24:	e12fff1e 	bx	lr
    2c28:	e5950000 	ldr	r0, [r5]
    2c2c:	e3500000 	cmp	r0, #0
    2c30:	0a000004 	beq	2c48 <__sfp+0xcc>
    2c34:	e1a05000 	mov	r5, r0
    2c38:	eaffffd7 	b	2b9c <__sfp+0x20>
    2c3c:	e1a00005 	mov	r0, r5
    2c40:	ebffffaf 	bl	2b04 <__sinit>
    2c44:	eaffffd3 	b	2b98 <__sfp+0x1c>
    2c48:	e1a00006 	mov	r0, r6
    2c4c:	e3a01004 	mov	r1, #4
    2c50:	ebffff95 	bl	2aac <__sfmoreglue>
    2c54:	e3500000 	cmp	r0, #0
    2c58:	e5850000 	str	r0, [r5]
    2c5c:	1afffff4 	bne	2c34 <__sfp+0xb8>
    2c60:	e3a0300c 	mov	r3, #12
    2c64:	e5863000 	str	r3, [r6]
    2c68:	e1a04000 	mov	r4, r0
    2c6c:	eaffffea 	b	2c1c <__sfp+0xa0>
    2c70:	00004018 	.word	0x00004018

00002c74 <__sfp_lock_acquire>:
    2c74:	e12fff1e 	bx	lr

00002c78 <__sfp_lock_release>:
    2c78:	e12fff1e 	bx	lr

00002c7c <__sinit_lock_acquire>:
    2c7c:	e12fff1e 	bx	lr

00002c80 <__sinit_lock_release>:
    2c80:	e12fff1e 	bx	lr

00002c84 <__fp_lock_all>:
    2c84:	e92d4008 	push	{r3, lr}
    2c88:	e59f3010 	ldr	r3, [pc, #16]	; 2ca0 <__fp_lock_all+0x1c>
    2c8c:	e59f1010 	ldr	r1, [pc, #16]	; 2ca4 <__fp_lock_all+0x20>
    2c90:	e5930000 	ldr	r0, [r3]
    2c94:	eb0000e6 	bl	3034 <_fwalk>
    2c98:	e8bd4008 	pop	{r3, lr}
    2c9c:	e12fff1e 	bx	lr
    2ca0:	00004088 	.word	0x00004088
    2ca4:	00002a08 	.word	0x00002a08

00002ca8 <__fp_unlock_all>:
    2ca8:	e92d4008 	push	{r3, lr}
    2cac:	e59f3010 	ldr	r3, [pc, #16]	; 2cc4 <__fp_unlock_all+0x1c>
    2cb0:	e59f1010 	ldr	r1, [pc, #16]	; 2cc8 <__fp_unlock_all+0x20>
    2cb4:	e5930000 	ldr	r0, [r3]
    2cb8:	eb0000dd 	bl	3034 <_fwalk>
    2cbc:	e8bd4008 	pop	{r3, lr}
    2cc0:	e12fff1e 	bx	lr
    2cc4:	00004088 	.word	0x00004088
    2cc8:	00002a10 	.word	0x00002a10

00002ccc <_malloc_trim_r>:
    2ccc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2cd0:	e59f50e4 	ldr	r5, [pc, #228]	; 2dbc <_malloc_trim_r+0xf0>
    2cd4:	e1a07001 	mov	r7, r1
    2cd8:	e1a04000 	mov	r4, r0
    2cdc:	ebfffcf1 	bl	20a8 <__malloc_lock>
    2ce0:	e5953008 	ldr	r3, [r5, #8]
    2ce4:	e5936004 	ldr	r6, [r3, #4]
    2ce8:	e3c66003 	bic	r6, r6, #3
    2cec:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    2cf0:	e283300f 	add	r3, r3, #15
    2cf4:	e0677003 	rsb	r7, r7, r3
    2cf8:	e1a07627 	lsr	r7, r7, #12
    2cfc:	e2477001 	sub	r7, r7, #1
    2d00:	e1a07607 	lsl	r7, r7, #12
    2d04:	e3570a01 	cmp	r7, #4096	; 0x1000
    2d08:	ba000006 	blt	2d28 <_malloc_trim_r+0x5c>
    2d0c:	e1a00004 	mov	r0, r4
    2d10:	e3a01000 	mov	r1, #0
    2d14:	ebfffe42 	bl	2624 <_sbrk_r>
    2d18:	e5953008 	ldr	r3, [r5, #8]
    2d1c:	e0833006 	add	r3, r3, r6
    2d20:	e1500003 	cmp	r0, r3
    2d24:	0a000004 	beq	2d3c <_malloc_trim_r+0x70>
    2d28:	e1a00004 	mov	r0, r4
    2d2c:	ebfffcde 	bl	20ac <__malloc_unlock>
    2d30:	e3a00000 	mov	r0, #0
    2d34:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2d38:	e12fff1e 	bx	lr
    2d3c:	e1a00004 	mov	r0, r4
    2d40:	e2671000 	rsb	r1, r7, #0
    2d44:	ebfffe36 	bl	2624 <_sbrk_r>
    2d48:	e3700001 	cmn	r0, #1
    2d4c:	0a00000b 	beq	2d80 <_malloc_trim_r+0xb4>
    2d50:	e59f3068 	ldr	r3, [pc, #104]	; 2dc0 <_malloc_trim_r+0xf4>
    2d54:	e5952008 	ldr	r2, [r5, #8]
    2d58:	e5931000 	ldr	r1, [r3]
    2d5c:	e0676006 	rsb	r6, r7, r6
    2d60:	e3866001 	orr	r6, r6, #1
    2d64:	e0677001 	rsb	r7, r7, r1
    2d68:	e1a00004 	mov	r0, r4
    2d6c:	e5826004 	str	r6, [r2, #4]
    2d70:	e5837000 	str	r7, [r3]
    2d74:	ebfffccc 	bl	20ac <__malloc_unlock>
    2d78:	e3a00001 	mov	r0, #1
    2d7c:	eaffffec 	b	2d34 <_malloc_trim_r+0x68>
    2d80:	e1a00004 	mov	r0, r4
    2d84:	e3a01000 	mov	r1, #0
    2d88:	ebfffe25 	bl	2624 <_sbrk_r>
    2d8c:	e5953008 	ldr	r3, [r5, #8]
    2d90:	e0632000 	rsb	r2, r3, r0
    2d94:	e352000f 	cmp	r2, #15
    2d98:	daffffe2 	ble	2d28 <_malloc_trim_r+0x5c>
    2d9c:	e59f1020 	ldr	r1, [pc, #32]	; 2dc4 <_malloc_trim_r+0xf8>
    2da0:	e5911000 	ldr	r1, [r1]
    2da4:	e0610000 	rsb	r0, r1, r0
    2da8:	e59f1010 	ldr	r1, [pc, #16]	; 2dc0 <_malloc_trim_r+0xf4>
    2dac:	e3822001 	orr	r2, r2, #1
    2db0:	e5810000 	str	r0, [r1]
    2db4:	e5832004 	str	r2, [r3, #4]
    2db8:	eaffffda 	b	2d28 <_malloc_trim_r+0x5c>
    2dbc:	000044b8 	.word	0x000044b8
    2dc0:	000048f0 	.word	0x000048f0
    2dc4:	000048c0 	.word	0x000048c0

00002dc8 <_free_r>:
    2dc8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2dcc:	e2514000 	subs	r4, r1, #0
    2dd0:	e1a06000 	mov	r6, r0
    2dd4:	0a000046 	beq	2ef4 <_free_r+0x12c>
    2dd8:	ebfffcb2 	bl	20a8 <__malloc_lock>
    2ddc:	e514e004 	ldr	lr, [r4, #-4]
    2de0:	e59f1238 	ldr	r1, [pc, #568]	; 3020 <_free_r+0x258>
    2de4:	e244c008 	sub	r12, r4, #8
    2de8:	e3ce3001 	bic	r3, lr, #1
    2dec:	e08c2003 	add	r2, r12, r3
    2df0:	e5910008 	ldr	r0, [r1, #8]
    2df4:	e5925004 	ldr	r5, [r2, #4]
    2df8:	e1500002 	cmp	r0, r2
    2dfc:	e3c55003 	bic	r5, r5, #3
    2e00:	0a00004a 	beq	2f30 <_free_r+0x168>
    2e04:	e21ee001 	ands	lr, lr, #1
    2e08:	e5825004 	str	r5, [r2, #4]
    2e0c:	13a0e000 	movne	lr, #0
    2e10:	1a000009 	bne	2e3c <_free_r+0x74>
    2e14:	e5144008 	ldr	r4, [r4, #-8]
    2e18:	e064c00c 	rsb	r12, r4, r12
    2e1c:	e59c0008 	ldr	r0, [r12, #8]
    2e20:	e2817008 	add	r7, r1, #8
    2e24:	e1500007 	cmp	r0, r7
    2e28:	e0833004 	add	r3, r3, r4
    2e2c:	159c400c 	ldrne	r4, [r12, #12]
    2e30:	1580400c 	strne	r4, [r0, #12]
    2e34:	15840008 	strne	r0, [r4, #8]
    2e38:	03a0e001 	moveq	lr, #1
    2e3c:	e0820005 	add	r0, r2, r5
    2e40:	e5900004 	ldr	r0, [r0, #4]
    2e44:	e3100001 	tst	r0, #1
    2e48:	1a000009 	bne	2e74 <_free_r+0xac>
    2e4c:	e35e0000 	cmp	lr, #0
    2e50:	e5920008 	ldr	r0, [r2, #8]
    2e54:	e0833005 	add	r3, r3, r5
    2e58:	1a000002 	bne	2e68 <_free_r+0xa0>
    2e5c:	e59f41c0 	ldr	r4, [pc, #448]	; 3024 <_free_r+0x25c>
    2e60:	e1500004 	cmp	r0, r4
    2e64:	0a000047 	beq	2f88 <_free_r+0x1c0>
    2e68:	e592200c 	ldr	r2, [r2, #12]
    2e6c:	e580200c 	str	r2, [r0, #12]
    2e70:	e5820008 	str	r0, [r2, #8]
    2e74:	e3832001 	orr	r2, r3, #1
    2e78:	e35e0000 	cmp	lr, #0
    2e7c:	e58c2004 	str	r2, [r12, #4]
    2e80:	e78c3003 	str	r3, [r12, r3]
    2e84:	1a000018 	bne	2eec <_free_r+0x124>
    2e88:	e3530c02 	cmp	r3, #512	; 0x200
    2e8c:	3a00001a 	bcc	2efc <_free_r+0x134>
    2e90:	e1a024a3 	lsr	r2, r3, #9
    2e94:	e3520004 	cmp	r2, #4
    2e98:	8a000042 	bhi	2fa8 <_free_r+0x1e0>
    2e9c:	e1a0e323 	lsr	lr, r3, #6
    2ea0:	e28ee038 	add	lr, lr, #56	; 0x38
    2ea4:	e1a0008e 	lsl	r0, lr, #1
    2ea8:	e0810100 	add	r0, r1, r0, lsl #2
    2eac:	e5902008 	ldr	r2, [r0, #8]
    2eb0:	e1520000 	cmp	r2, r0
    2eb4:	e59f1164 	ldr	r1, [pc, #356]	; 3020 <_free_r+0x258>
    2eb8:	0a000044 	beq	2fd0 <_free_r+0x208>
    2ebc:	e5921004 	ldr	r1, [r2, #4]
    2ec0:	e3c11003 	bic	r1, r1, #3
    2ec4:	e1530001 	cmp	r3, r1
    2ec8:	2a000002 	bcs	2ed8 <_free_r+0x110>
    2ecc:	e5922008 	ldr	r2, [r2, #8]
    2ed0:	e1500002 	cmp	r0, r2
    2ed4:	1afffff8 	bne	2ebc <_free_r+0xf4>
    2ed8:	e592300c 	ldr	r3, [r2, #12]
    2edc:	e58c300c 	str	r3, [r12, #12]
    2ee0:	e58c2008 	str	r2, [r12, #8]
    2ee4:	e582c00c 	str	r12, [r2, #12]
    2ee8:	e583c008 	str	r12, [r3, #8]
    2eec:	e1a00006 	mov	r0, r6
    2ef0:	ebfffc6d 	bl	20ac <__malloc_unlock>
    2ef4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2ef8:	e12fff1e 	bx	lr
    2efc:	e5912004 	ldr	r2, [r1, #4]
    2f00:	e1a031a3 	lsr	r3, r3, #3
    2f04:	e1a00143 	asr	r0, r3, #2
    2f08:	e3a0e001 	mov	lr, #1
    2f0c:	e182001e 	orr	r0, r2, lr, lsl r0
    2f10:	e0813183 	add	r3, r1, r3, lsl #3
    2f14:	e5932008 	ldr	r2, [r3, #8]
    2f18:	e58c300c 	str	r3, [r12, #12]
    2f1c:	e58c2008 	str	r2, [r12, #8]
    2f20:	e5810004 	str	r0, [r1, #4]
    2f24:	e583c008 	str	r12, [r3, #8]
    2f28:	e582c00c 	str	r12, [r2, #12]
    2f2c:	eaffffee 	b	2eec <_free_r+0x124>
    2f30:	e31e0001 	tst	lr, #1
    2f34:	e0853003 	add	r3, r5, r3
    2f38:	1a000006 	bne	2f58 <_free_r+0x190>
    2f3c:	e5142008 	ldr	r2, [r4, #-8]
    2f40:	e062c00c 	rsb	r12, r2, r12
    2f44:	e59c000c 	ldr	r0, [r12, #12]
    2f48:	e59ce008 	ldr	lr, [r12, #8]
    2f4c:	e58e000c 	str	r0, [lr, #12]
    2f50:	e580e008 	str	lr, [r0, #8]
    2f54:	e0833002 	add	r3, r3, r2
    2f58:	e59f20c8 	ldr	r2, [pc, #200]	; 3028 <_free_r+0x260>
    2f5c:	e5920000 	ldr	r0, [r2]
    2f60:	e3832001 	orr	r2, r3, #1
    2f64:	e1530000 	cmp	r3, r0
    2f68:	e58c2004 	str	r2, [r12, #4]
    2f6c:	e581c008 	str	r12, [r1, #8]
    2f70:	3affffdd 	bcc	2eec <_free_r+0x124>
    2f74:	e59f30b0 	ldr	r3, [pc, #176]	; 302c <_free_r+0x264>
    2f78:	e1a00006 	mov	r0, r6
    2f7c:	e5931000 	ldr	r1, [r3]
    2f80:	ebffff51 	bl	2ccc <_malloc_trim_r>
    2f84:	eaffffd8 	b	2eec <_free_r+0x124>
    2f88:	e3832001 	orr	r2, r3, #1
    2f8c:	e581c014 	str	r12, [r1, #20]
    2f90:	e581c010 	str	r12, [r1, #16]
    2f94:	e58c000c 	str	r0, [r12, #12]
    2f98:	e58c0008 	str	r0, [r12, #8]
    2f9c:	e58c2004 	str	r2, [r12, #4]
    2fa0:	e78c3003 	str	r3, [r12, r3]
    2fa4:	eaffffd0 	b	2eec <_free_r+0x124>
    2fa8:	e3520014 	cmp	r2, #20
    2fac:	9282e05b 	addls	lr, r2, #91	; 0x5b
    2fb0:	91a0008e 	lslls	r0, lr, #1
    2fb4:	9affffbb 	bls	2ea8 <_free_r+0xe0>
    2fb8:	e3520054 	cmp	r2, #84	; 0x54
    2fbc:	8a00000a 	bhi	2fec <_free_r+0x224>
    2fc0:	e1a0e623 	lsr	lr, r3, #12
    2fc4:	e28ee06e 	add	lr, lr, #110	; 0x6e
    2fc8:	e1a0008e 	lsl	r0, lr, #1
    2fcc:	eaffffb5 	b	2ea8 <_free_r+0xe0>
    2fd0:	e5913004 	ldr	r3, [r1, #4]
    2fd4:	e1a0e14e 	asr	lr, lr, #2
    2fd8:	e3a00001 	mov	r0, #1
    2fdc:	e1830e10 	orr	r0, r3, r0, lsl lr
    2fe0:	e1a03002 	mov	r3, r2
    2fe4:	e5810004 	str	r0, [r1, #4]
    2fe8:	eaffffbb 	b	2edc <_free_r+0x114>
    2fec:	e3520f55 	cmp	r2, #340	; 0x154
    2ff0:	91a0e7a3 	lsrls	lr, r3, #15
    2ff4:	928ee077 	addls	lr, lr, #119	; 0x77
    2ff8:	91a0008e 	lslls	r0, lr, #1
    2ffc:	9affffa9 	bls	2ea8 <_free_r+0xe0>
    3000:	e59f0028 	ldr	r0, [pc, #40]	; 3030 <_free_r+0x268>
    3004:	e1520000 	cmp	r2, r0
    3008:	91a0e923 	lsrls	lr, r3, #18
    300c:	928ee07c 	addls	lr, lr, #124	; 0x7c
    3010:	91a0008e 	lslls	r0, lr, #1
    3014:	83a000fc 	movhi	r0, #252	; 0xfc
    3018:	83a0e07e 	movhi	lr, #126	; 0x7e
    301c:	eaffffa1 	b	2ea8 <_free_r+0xe0>
    3020:	000044b8 	.word	0x000044b8
    3024:	000044c0 	.word	0x000044c0
    3028:	000048c4 	.word	0x000048c4
    302c:	000048ec 	.word	0x000048ec
    3030:	00000554 	.word	0x00000554

00003034 <_fwalk>:
    3034:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3038:	e1a06000 	mov	r6, r0
    303c:	e1a08001 	mov	r8, r1
    3040:	ebffff0b 	bl	2c74 <__sfp_lock_acquire>
    3044:	e2966e2e 	adds	r6, r6, #736	; 0x2e0
    3048:	0a000019 	beq	30b4 <_fwalk+0x80>
    304c:	e3a07000 	mov	r7, #0
    3050:	e5965004 	ldr	r5, [r6, #4]
    3054:	e2555001 	subs	r5, r5, #1
    3058:	e5964008 	ldr	r4, [r6, #8]
    305c:	4a00000d 	bmi	3098 <_fwalk+0x64>
    3060:	e1d430fc 	ldrsh	r3, [r4, #12]
    3064:	e3530000 	cmp	r3, #0
    3068:	e2455001 	sub	r5, r5, #1
    306c:	0a000006 	beq	308c <_fwalk+0x58>
    3070:	e1d430fe 	ldrsh	r3, [r4, #14]
    3074:	e3730001 	cmn	r3, #1
    3078:	e1a00004 	mov	r0, r4
    307c:	0a000002 	beq	308c <_fwalk+0x58>
    3080:	e1a0e00f 	mov	lr, pc
    3084:	e12fff18 	bx	r8
    3088:	e1877000 	orr	r7, r7, r0
    308c:	e3750001 	cmn	r5, #1
    3090:	e2844068 	add	r4, r4, #104	; 0x68
    3094:	1afffff1 	bne	3060 <_fwalk+0x2c>
    3098:	e5966000 	ldr	r6, [r6]
    309c:	e3560000 	cmp	r6, #0
    30a0:	1affffea 	bne	3050 <_fwalk+0x1c>
    30a4:	ebfffef3 	bl	2c78 <__sfp_lock_release>
    30a8:	e1a00007 	mov	r0, r7
    30ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    30b0:	e12fff1e 	bx	lr
    30b4:	e1a07006 	mov	r7, r6
    30b8:	eafffff9 	b	30a4 <_fwalk+0x70>

000030bc <_fwalk_reent>:
    30bc:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    30c0:	e1a07000 	mov	r7, r0
    30c4:	e1a08001 	mov	r8, r1
    30c8:	ebfffee9 	bl	2c74 <__sfp_lock_acquire>
    30cc:	e2976e2e 	adds	r6, r7, #736	; 0x2e0
    30d0:	0a00001a 	beq	3140 <_fwalk_reent+0x84>
    30d4:	e3a0a000 	mov	r10, #0
    30d8:	e5965004 	ldr	r5, [r6, #4]
    30dc:	e2555001 	subs	r5, r5, #1
    30e0:	e5964008 	ldr	r4, [r6, #8]
    30e4:	4a00000e 	bmi	3124 <_fwalk_reent+0x68>
    30e8:	e1d430fc 	ldrsh	r3, [r4, #12]
    30ec:	e3530000 	cmp	r3, #0
    30f0:	e2455001 	sub	r5, r5, #1
    30f4:	0a000007 	beq	3118 <_fwalk_reent+0x5c>
    30f8:	e1d430fe 	ldrsh	r3, [r4, #14]
    30fc:	e3730001 	cmn	r3, #1
    3100:	e1a01004 	mov	r1, r4
    3104:	e1a00007 	mov	r0, r7
    3108:	0a000002 	beq	3118 <_fwalk_reent+0x5c>
    310c:	e1a0e00f 	mov	lr, pc
    3110:	e12fff18 	bx	r8
    3114:	e18aa000 	orr	r10, r10, r0
    3118:	e3750001 	cmn	r5, #1
    311c:	e2844068 	add	r4, r4, #104	; 0x68
    3120:	1afffff0 	bne	30e8 <_fwalk_reent+0x2c>
    3124:	e5966000 	ldr	r6, [r6]
    3128:	e3560000 	cmp	r6, #0
    312c:	1affffe9 	bne	30d8 <_fwalk_reent+0x1c>
    3130:	ebfffed0 	bl	2c78 <__sfp_lock_release>
    3134:	e1a0000a 	mov	r0, r10
    3138:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    313c:	e12fff1e 	bx	lr
    3140:	e1a0a006 	mov	r10, r6
    3144:	eafffff9 	b	3130 <_fwalk_reent+0x74>

00003148 <__smakebuf_r>:
    3148:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    314c:	e1d130bc 	ldrh	r3, [r1, #12]
    3150:	e3130002 	tst	r3, #2
    3154:	e24dd044 	sub	sp, sp, #68	; 0x44
    3158:	e1a04001 	mov	r4, r1
    315c:	e1a05000 	mov	r5, r0
    3160:	1a00002b 	bne	3214 <__smakebuf_r+0xcc>
    3164:	e1d110fe 	ldrsh	r1, [r1, #14]
    3168:	e3510000 	cmp	r1, #0
    316c:	ba000010 	blt	31b4 <__smakebuf_r+0x6c>
    3170:	e28d2004 	add	r2, sp, #4
    3174:	eb000198 	bl	37dc <_fstat_r>
    3178:	e3500000 	cmp	r0, #0
    317c:	ba00000b 	blt	31b0 <__smakebuf_r+0x68>
    3180:	e59d3008 	ldr	r3, [sp, #8]
    3184:	e2033a0f 	and	r3, r3, #61440	; 0xf000
    3188:	e2532a02 	subs	r2, r3, #8192	; 0x2000
    318c:	e2727000 	rsbs	r7, r2, #0
    3190:	e0b77002 	adcs	r7, r7, r2
    3194:	e3530902 	cmp	r3, #32768	; 0x8000
    3198:	0a000023 	beq	322c <__smakebuf_r+0xe4>
    319c:	e1d430bc 	ldrh	r3, [r4, #12]
    31a0:	e3833b02 	orr	r3, r3, #2048	; 0x800
    31a4:	e1c430bc 	strh	r3, [r4, #12]
    31a8:	e3a06b01 	mov	r6, #1024	; 0x400
    31ac:	ea000006 	b	31cc <__smakebuf_r+0x84>
    31b0:	e1d430bc 	ldrh	r3, [r4, #12]
    31b4:	e3130080 	tst	r3, #128	; 0x80
    31b8:	e3833b02 	orr	r3, r3, #2048	; 0x800
    31bc:	e1c430bc 	strh	r3, [r4, #12]
    31c0:	03a06b01 	moveq	r6, #1024	; 0x400
    31c4:	13a06040 	movne	r6, #64	; 0x40
    31c8:	e3a07000 	mov	r7, #0
    31cc:	e1a00005 	mov	r0, r5
    31d0:	e1a01006 	mov	r1, r6
    31d4:	ebfff8d5 	bl	1530 <_malloc_r>
    31d8:	e3500000 	cmp	r0, #0
    31dc:	e1d430bc 	ldrh	r3, [r4, #12]
    31e0:	0a000023 	beq	3274 <__smakebuf_r+0x12c>
    31e4:	e59f20b0 	ldr	r2, [pc, #176]	; 329c <__smakebuf_r+0x154>
    31e8:	e3833080 	orr	r3, r3, #128	; 0x80
    31ec:	e3570000 	cmp	r7, #0
    31f0:	e585203c 	str	r2, [r5, #60]	; 0x3c
    31f4:	e1c430bc 	strh	r3, [r4, #12]
    31f8:	e5840000 	str	r0, [r4]
    31fc:	e5840010 	str	r0, [r4, #16]
    3200:	e5846014 	str	r6, [r4, #20]
    3204:	1a000012 	bne	3254 <__smakebuf_r+0x10c>
    3208:	e28dd044 	add	sp, sp, #68	; 0x44
    320c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    3210:	e12fff1e 	bx	lr
    3214:	e2813043 	add	r3, r1, #67	; 0x43
    3218:	e5813000 	str	r3, [r1]
    321c:	e5813010 	str	r3, [r1, #16]
    3220:	e3a03001 	mov	r3, #1
    3224:	e5813014 	str	r3, [r1, #20]
    3228:	eafffff6 	b	3208 <__smakebuf_r+0xc0>
    322c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    3230:	e59f3068 	ldr	r3, [pc, #104]	; 32a0 <__smakebuf_r+0x158>
    3234:	e1520003 	cmp	r2, r3
    3238:	1affffd7 	bne	319c <__smakebuf_r+0x54>
    323c:	e1d430bc 	ldrh	r3, [r4, #12]
    3240:	e3a06b01 	mov	r6, #1024	; 0x400
    3244:	e1833006 	orr	r3, r3, r6
    3248:	e1c430bc 	strh	r3, [r4, #12]
    324c:	e584604c 	str	r6, [r4, #76]	; 0x4c
    3250:	eaffffdd 	b	31cc <__smakebuf_r+0x84>
    3254:	e1a00005 	mov	r0, r5
    3258:	e1d410fe 	ldrsh	r1, [r4, #14]
    325c:	eb00016e 	bl	381c <_isatty_r>
    3260:	e3500000 	cmp	r0, #0
    3264:	11d430bc 	ldrhne	r3, [r4, #12]
    3268:	13833001 	orrne	r3, r3, #1
    326c:	11c430bc 	strhne	r3, [r4, #12]
    3270:	eaffffe4 	b	3208 <__smakebuf_r+0xc0>
    3274:	e3130c02 	tst	r3, #512	; 0x200
    3278:	1affffe2 	bne	3208 <__smakebuf_r+0xc0>
    327c:	e3833002 	orr	r3, r3, #2
    3280:	e2842043 	add	r2, r4, #67	; 0x43
    3284:	e1c430bc 	strh	r3, [r4, #12]
    3288:	e3a03001 	mov	r3, #1
    328c:	e5842000 	str	r2, [r4]
    3290:	e5842010 	str	r2, [r4, #16]
    3294:	e5843014 	str	r3, [r4, #20]
    3298:	eaffffda 	b	3208 <__smakebuf_r+0xc0>
    329c:	00002a18 	.word	0x00002a18
    32a0:	00003608 	.word	0x00003608

000032a4 <memset>:
    32a4:	e3520003 	cmp	r2, #3
    32a8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    32ac:	e20110ff 	and	r1, r1, #255	; 0xff
    32b0:	8a000008 	bhi	32d8 <memset+0x34>
    32b4:	e3520000 	cmp	r2, #0
    32b8:	0a000004 	beq	32d0 <memset+0x2c>
    32bc:	e1a03000 	mov	r3, r0
    32c0:	e0822000 	add	r2, r2, r0
    32c4:	e4c31001 	strb	r1, [r3], #1
    32c8:	e1530002 	cmp	r3, r2
    32cc:	1afffffc 	bne	32c4 <memset+0x20>
    32d0:	e8bd0010 	ldmfd	sp!, {r4}
    32d4:	e12fff1e 	bx	lr
    32d8:	e3100003 	tst	r0, #3
    32dc:	e0802002 	add	r2, r0, r2
    32e0:	0a000007 	beq	3304 <memset+0x60>
    32e4:	e280c001 	add	r12, r0, #1
    32e8:	e20c3003 	and	r3, r12, #3
    32ec:	e3530000 	cmp	r3, #0
    32f0:	e54c1001 	strb	r1, [r12, #-1]
    32f4:	e1a0300c 	mov	r3, r12
    32f8:	e28cc001 	add	r12, r12, #1
    32fc:	1afffff9 	bne	32e8 <memset+0x44>
    3300:	ea000000 	b	3308 <memset+0x64>
    3304:	e1a03000 	mov	r3, r0
    3308:	e0634002 	rsb	r4, r3, r2
    330c:	e081c401 	add	r12, r1, r1, lsl #8
    3310:	e354003f 	cmp	r4, #63	; 0x3f
    3314:	e08cc80c 	add	r12, r12, r12, lsl #16
    3318:	da00001a 	ble	3388 <memset+0xe4>
    331c:	e583c000 	str	r12, [r3]
    3320:	e583c004 	str	r12, [r3, #4]
    3324:	e583c008 	str	r12, [r3, #8]
    3328:	e583c00c 	str	r12, [r3, #12]
    332c:	e583c010 	str	r12, [r3, #16]
    3330:	e583c014 	str	r12, [r3, #20]
    3334:	e583c018 	str	r12, [r3, #24]
    3338:	e583c01c 	str	r12, [r3, #28]
    333c:	e583c020 	str	r12, [r3, #32]
    3340:	e583c024 	str	r12, [r3, #36]	; 0x24
    3344:	e583c028 	str	r12, [r3, #40]	; 0x28
    3348:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    334c:	e583c030 	str	r12, [r3, #48]	; 0x30
    3350:	e583c034 	str	r12, [r3, #52]	; 0x34
    3354:	e583c038 	str	r12, [r3, #56]	; 0x38
    3358:	e583c03c 	str	r12, [r3, #60]	; 0x3c
    335c:	e2833040 	add	r3, r3, #64	; 0x40
    3360:	e0634002 	rsb	r4, r3, r2
    3364:	e354003f 	cmp	r4, #63	; 0x3f
    3368:	caffffeb 	bgt	331c <memset+0x78>
    336c:	ea000005 	b	3388 <memset+0xe4>
    3370:	e583c000 	str	r12, [r3]
    3374:	e583c004 	str	r12, [r3, #4]
    3378:	e583c008 	str	r12, [r3, #8]
    337c:	e583c00c 	str	r12, [r3, #12]
    3380:	e2833010 	add	r3, r3, #16
    3384:	e0634002 	rsb	r4, r3, r2
    3388:	e354000f 	cmp	r4, #15
    338c:	cafffff7 	bgt	3370 <memset+0xcc>
    3390:	e3540003 	cmp	r4, #3
    3394:	da000006 	ble	33b4 <memset+0x110>
    3398:	e2834004 	add	r4, r3, #4
    339c:	e0643002 	rsb	r3, r4, r2
    33a0:	e3530003 	cmp	r3, #3
    33a4:	e504c004 	str	r12, [r4, #-4]
    33a8:	e1a03004 	mov	r3, r4
    33ac:	e2844004 	add	r4, r4, #4
    33b0:	cafffff9 	bgt	339c <memset+0xf8>
    33b4:	e1520003 	cmp	r2, r3
    33b8:	9affffc4 	bls	32d0 <memset+0x2c>
    33bc:	e2833001 	add	r3, r3, #1
    33c0:	e2822001 	add	r2, r2, #1
    33c4:	e5431001 	strb	r1, [r3, #-1]
    33c8:	e2833001 	add	r3, r3, #1
    33cc:	e1530002 	cmp	r3, r2
    33d0:	1afffffb 	bne	33c4 <memset+0x120>
    33d4:	eaffffbd 	b	32d0 <memset+0x2c>

000033d8 <cleanup_glue>:
    33d8:	e92d4038 	push	{r3, r4, r5, lr}
    33dc:	e1a04001 	mov	r4, r1
    33e0:	e5911000 	ldr	r1, [r1]
    33e4:	e3510000 	cmp	r1, #0
    33e8:	e1a05000 	mov	r5, r0
    33ec:	1bfffff9 	blne	33d8 <cleanup_glue>
    33f0:	e1a00005 	mov	r0, r5
    33f4:	e1a01004 	mov	r1, r4
    33f8:	ebfffe72 	bl	2dc8 <_free_r>
    33fc:	e8bd4038 	pop	{r3, r4, r5, lr}
    3400:	e12fff1e 	bx	lr

00003404 <_reclaim_reent>:
    3404:	e59f30f0 	ldr	r3, [pc, #240]	; 34fc <_reclaim_reent+0xf8>
    3408:	e5933000 	ldr	r3, [r3]
    340c:	e1500003 	cmp	r0, r3
    3410:	e92d4070 	push	{r4, r5, r6, lr}
    3414:	e1a05000 	mov	r5, r0
    3418:	0a00002b 	beq	34cc <_reclaim_reent+0xc8>
    341c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    3420:	e3520000 	cmp	r2, #0
    3424:	0a000011 	beq	3470 <_reclaim_reent+0x6c>
    3428:	e3a03000 	mov	r3, #0
    342c:	e1a06003 	mov	r6, r3
    3430:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    3434:	e3510000 	cmp	r1, #0
    3438:	0a000005 	beq	3454 <_reclaim_reent+0x50>
    343c:	e5914000 	ldr	r4, [r1]
    3440:	e1a00005 	mov	r0, r5
    3444:	ebfffe5f 	bl	2dc8 <_free_r>
    3448:	e2541000 	subs	r1, r4, #0
    344c:	1afffffa 	bne	343c <_reclaim_reent+0x38>
    3450:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    3454:	e2866001 	add	r6, r6, #1
    3458:	e3560020 	cmp	r6, #32
    345c:	e1a03006 	mov	r3, r6
    3460:	1afffff2 	bne	3430 <_reclaim_reent+0x2c>
    3464:	e1a00005 	mov	r0, r5
    3468:	e1a01002 	mov	r1, r2
    346c:	ebfffe55 	bl	2dc8 <_free_r>
    3470:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    3474:	e3510000 	cmp	r1, #0
    3478:	11a00005 	movne	r0, r5
    347c:	1bfffe51 	blne	2dc8 <_free_r>
    3480:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    3484:	e3510000 	cmp	r1, #0
    3488:	0a000008 	beq	34b0 <_reclaim_reent+0xac>
    348c:	e2856f53 	add	r6, r5, #332	; 0x14c
    3490:	e1510006 	cmp	r1, r6
    3494:	0a000005 	beq	34b0 <_reclaim_reent+0xac>
    3498:	e5914000 	ldr	r4, [r1]
    349c:	e1a00005 	mov	r0, r5
    34a0:	ebfffe48 	bl	2dc8 <_free_r>
    34a4:	e1560004 	cmp	r6, r4
    34a8:	e1a01004 	mov	r1, r4
    34ac:	1afffff9 	bne	3498 <_reclaim_reent+0x94>
    34b0:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    34b4:	e3510000 	cmp	r1, #0
    34b8:	11a00005 	movne	r0, r5
    34bc:	1bfffe41 	blne	2dc8 <_free_r>
    34c0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    34c4:	e3530000 	cmp	r3, #0
    34c8:	1a000001 	bne	34d4 <_reclaim_reent+0xd0>
    34cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    34d0:	e12fff1e 	bx	lr
    34d4:	e1a00005 	mov	r0, r5
    34d8:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    34dc:	e1a0e00f 	mov	lr, pc
    34e0:	e12fff1c 	bx	r12
    34e4:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    34e8:	e3510000 	cmp	r1, #0
    34ec:	0afffff6 	beq	34cc <_reclaim_reent+0xc8>
    34f0:	e1a00005 	mov	r0, r5
    34f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    34f8:	eaffffb6 	b	33d8 <cleanup_glue>
    34fc:	00004088 	.word	0x00004088

00003500 <_wrapup_reent>:
    3500:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3504:	e2507000 	subs	r7, r0, #0
    3508:	059f3060 	ldreq	r3, [pc, #96]	; 3570 <_wrapup_reent+0x70>
    350c:	05937000 	ldreq	r7, [r3]
    3510:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    3514:	e3560000 	cmp	r6, #0
    3518:	0a00000d 	beq	3554 <_wrapup_reent+0x54>
    351c:	e5965004 	ldr	r5, [r6, #4]
    3520:	e2554001 	subs	r4, r5, #1
    3524:	52855002 	addpl	r5, r5, #2
    3528:	50865105 	addpl	r5, r6, r5, lsl #2
    352c:	4a000005 	bmi	3548 <_wrapup_reent+0x48>
    3530:	e5353004 	ldr	r3, [r5, #-4]!
    3534:	e2444001 	sub	r4, r4, #1
    3538:	e1a0e00f 	mov	lr, pc
    353c:	e12fff13 	bx	r3
    3540:	e3740001 	cmn	r4, #1
    3544:	1afffff9 	bne	3530 <_wrapup_reent+0x30>
    3548:	e5966000 	ldr	r6, [r6]
    354c:	e3560000 	cmp	r6, #0
    3550:	1afffff1 	bne	351c <_wrapup_reent+0x1c>
    3554:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    3558:	e3530000 	cmp	r3, #0
    355c:	11a00007 	movne	r0, r7
    3560:	11a0e00f 	movne	lr, pc
    3564:	112fff13 	bxne	r3
    3568:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    356c:	e12fff1e 	bx	lr
    3570:	00004088 	.word	0x00004088

00003574 <__sread>:
    3574:	e92d4010 	push	{r4, lr}
    3578:	e1a04001 	mov	r4, r1
    357c:	e1d110fe 	ldrsh	r1, [r1, #14]
    3580:	eb0000c5 	bl	389c <_read_r>
    3584:	e3500000 	cmp	r0, #0
    3588:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    358c:	b1d430bc 	ldrhlt	r3, [r4, #12]
    3590:	a0833000 	addge	r3, r3, r0
    3594:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    3598:	a5843050 	strge	r3, [r4, #80]	; 0x50
    359c:	b1c430bc 	strhlt	r3, [r4, #12]
    35a0:	e8bd4010 	pop	{r4, lr}
    35a4:	e12fff1e 	bx	lr

000035a8 <__seofread>:
    35a8:	e3a00000 	mov	r0, #0
    35ac:	e12fff1e 	bx	lr

000035b0 <__swrite>:
    35b0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    35b4:	e1a04001 	mov	r4, r1
    35b8:	e1d110bc 	ldrh	r1, [r1, #12]
    35bc:	e3110c01 	tst	r1, #256	; 0x100
    35c0:	e1a07000 	mov	r7, r0
    35c4:	e1a06002 	mov	r6, r2
    35c8:	e1a05003 	mov	r5, r3
    35cc:	0a000004 	beq	35e4 <__swrite+0x34>
    35d0:	e1d410fe 	ldrsh	r1, [r4, #14]
    35d4:	e3a02000 	mov	r2, #0
    35d8:	e3a03002 	mov	r3, #2
    35dc:	eb00009d 	bl	3858 <_lseek_r>
    35e0:	e1d410bc 	ldrh	r1, [r4, #12]
    35e4:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    35e8:	e1c410bc 	strh	r1, [r4, #12]
    35ec:	e1a00007 	mov	r0, r7
    35f0:	e1d410fe 	ldrsh	r1, [r4, #14]
    35f4:	e1a02006 	mov	r2, r6
    35f8:	e1a03005 	mov	r3, r5
    35fc:	eb000013 	bl	3650 <_write_r>
    3600:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3604:	e12fff1e 	bx	lr

00003608 <__sseek>:
    3608:	e92d4010 	push	{r4, lr}
    360c:	e1a04001 	mov	r4, r1
    3610:	e1d110fe 	ldrsh	r1, [r1, #14]
    3614:	eb00008f 	bl	3858 <_lseek_r>
    3618:	e1d430bc 	ldrh	r3, [r4, #12]
    361c:	e3700001 	cmn	r0, #1
    3620:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    3624:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    3628:	01c430bc 	strheq	r3, [r4, #12]
    362c:	11c430bc 	strhne	r3, [r4, #12]
    3630:	15840050 	strne	r0, [r4, #80]	; 0x50
    3634:	e8bd4010 	pop	{r4, lr}
    3638:	e12fff1e 	bx	lr

0000363c <__sclose>:
    363c:	e92d4008 	push	{r3, lr}
    3640:	e1d110fe 	ldrsh	r1, [r1, #14]
    3644:	eb000012 	bl	3694 <_close_r>
    3648:	e8bd4008 	pop	{r3, lr}
    364c:	e12fff1e 	bx	lr

00003650 <_write_r>:
    3650:	e92d4038 	push	{r3, r4, r5, lr}
    3654:	e59f4034 	ldr	r4, [pc, #52]	; 3690 <_write_r+0x40>
    3658:	e1a05000 	mov	r5, r0
    365c:	e1a00001 	mov	r0, r1
    3660:	e1a01002 	mov	r1, r2
    3664:	e1a02003 	mov	r2, r3
    3668:	e3a03000 	mov	r3, #0
    366c:	e5843000 	str	r3, [r4]
    3670:	eb000137 	bl	3b54 <_write>
    3674:	e3700001 	cmn	r0, #1
    3678:	1a000002 	bne	3688 <_write_r+0x38>
    367c:	e5943000 	ldr	r3, [r4]
    3680:	e3530000 	cmp	r3, #0
    3684:	15853000 	strne	r3, [r5]
    3688:	e8bd4038 	pop	{r3, r4, r5, lr}
    368c:	e12fff1e 	bx	lr
    3690:	00004920 	.word	0x00004920

00003694 <_close_r>:
    3694:	e92d4038 	push	{r3, r4, r5, lr}
    3698:	e59f402c 	ldr	r4, [pc, #44]	; 36cc <_close_r+0x38>
    369c:	e3a03000 	mov	r3, #0
    36a0:	e1a05000 	mov	r5, r0
    36a4:	e1a00001 	mov	r0, r1
    36a8:	e5843000 	str	r3, [r4]
    36ac:	eb00009e 	bl	392c <_close>
    36b0:	e3700001 	cmn	r0, #1
    36b4:	1a000002 	bne	36c4 <_close_r+0x30>
    36b8:	e5943000 	ldr	r3, [r4]
    36bc:	e3530000 	cmp	r3, #0
    36c0:	15853000 	strne	r3, [r5]
    36c4:	e8bd4038 	pop	{r3, r4, r5, lr}
    36c8:	e12fff1e 	bx	lr
    36cc:	00004920 	.word	0x00004920

000036d0 <_fclose_r>:
    36d0:	e92d4070 	push	{r4, r5, r6, lr}
    36d4:	e2514000 	subs	r4, r1, #0
    36d8:	e1a05000 	mov	r5, r0
    36dc:	01a06004 	moveq	r6, r4
    36e0:	0a00002b 	beq	3794 <_fclose_r+0xc4>
    36e4:	ebfffd62 	bl	2c74 <__sfp_lock_acquire>
    36e8:	e3550000 	cmp	r5, #0
    36ec:	0a000002 	beq	36fc <_fclose_r+0x2c>
    36f0:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    36f4:	e3530000 	cmp	r3, #0
    36f8:	0a000028 	beq	37a0 <_fclose_r+0xd0>
    36fc:	e1d460fc 	ldrsh	r6, [r4, #12]
    3700:	e3560000 	cmp	r6, #0
    3704:	0a000021 	beq	3790 <_fclose_r+0xc0>
    3708:	e1a00005 	mov	r0, r5
    370c:	e1a01004 	mov	r1, r4
    3710:	ebfffc21 	bl	279c <_fflush_r>
    3714:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    3718:	e3530000 	cmp	r3, #0
    371c:	e1a06000 	mov	r6, r0
    3720:	0a000005 	beq	373c <_fclose_r+0x6c>
    3724:	e1a00005 	mov	r0, r5
    3728:	e594101c 	ldr	r1, [r4, #28]
    372c:	e1a0e00f 	mov	lr, pc
    3730:	e12fff13 	bx	r3
    3734:	e3500000 	cmp	r0, #0
    3738:	b3e06000 	mvnlt	r6, #0
    373c:	e1d430bc 	ldrh	r3, [r4, #12]
    3740:	e3130080 	tst	r3, #128	; 0x80
    3744:	1a00001b 	bne	37b8 <_fclose_r+0xe8>
    3748:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    374c:	e3510000 	cmp	r1, #0
    3750:	0a000005 	beq	376c <_fclose_r+0x9c>
    3754:	e2843040 	add	r3, r4, #64	; 0x40
    3758:	e1510003 	cmp	r1, r3
    375c:	11a00005 	movne	r0, r5
    3760:	1bfffd98 	blne	2dc8 <_free_r>
    3764:	e3a03000 	mov	r3, #0
    3768:	e5843030 	str	r3, [r4, #48]	; 0x30
    376c:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    3770:	e3510000 	cmp	r1, #0
    3774:	0a000003 	beq	3788 <_fclose_r+0xb8>
    3778:	e1a00005 	mov	r0, r5
    377c:	ebfffd91 	bl	2dc8 <_free_r>
    3780:	e3a03000 	mov	r3, #0
    3784:	e5843044 	str	r3, [r4, #68]	; 0x44
    3788:	e3a03000 	mov	r3, #0
    378c:	e1c430bc 	strh	r3, [r4, #12]
    3790:	ebfffd38 	bl	2c78 <__sfp_lock_release>
    3794:	e1a00006 	mov	r0, r6
    3798:	e8bd4070 	pop	{r4, r5, r6, lr}
    379c:	e12fff1e 	bx	lr
    37a0:	e1a00005 	mov	r0, r5
    37a4:	ebfffcd6 	bl	2b04 <__sinit>
    37a8:	e1d460fc 	ldrsh	r6, [r4, #12]
    37ac:	e3560000 	cmp	r6, #0
    37b0:	1affffd4 	bne	3708 <_fclose_r+0x38>
    37b4:	eafffff5 	b	3790 <_fclose_r+0xc0>
    37b8:	e1a00005 	mov	r0, r5
    37bc:	e5941010 	ldr	r1, [r4, #16]
    37c0:	ebfffd80 	bl	2dc8 <_free_r>
    37c4:	eaffffdf 	b	3748 <_fclose_r+0x78>

000037c8 <fclose>:
    37c8:	e59f3008 	ldr	r3, [pc, #8]	; 37d8 <fclose+0x10>
    37cc:	e1a01000 	mov	r1, r0
    37d0:	e5930000 	ldr	r0, [r3]
    37d4:	eaffffbd 	b	36d0 <_fclose_r>
    37d8:	00004088 	.word	0x00004088

000037dc <_fstat_r>:
    37dc:	e92d4038 	push	{r3, r4, r5, lr}
    37e0:	e59f4030 	ldr	r4, [pc, #48]	; 3818 <_fstat_r+0x3c>
    37e4:	e3a03000 	mov	r3, #0
    37e8:	e1a05000 	mov	r5, r0
    37ec:	e1a00001 	mov	r0, r1
    37f0:	e1a01002 	mov	r1, r2
    37f4:	e5843000 	str	r3, [r4]
    37f8:	eb00006f 	bl	39bc <_fstat>
    37fc:	e3700001 	cmn	r0, #1
    3800:	1a000002 	bne	3810 <_fstat_r+0x34>
    3804:	e5943000 	ldr	r3, [r4]
    3808:	e3530000 	cmp	r3, #0
    380c:	15853000 	strne	r3, [r5]
    3810:	e8bd4038 	pop	{r3, r4, r5, lr}
    3814:	e12fff1e 	bx	lr
    3818:	00004920 	.word	0x00004920

0000381c <_isatty_r>:
    381c:	e92d4038 	push	{r3, r4, r5, lr}
    3820:	e59f402c 	ldr	r4, [pc, #44]	; 3854 <_isatty_r+0x38>
    3824:	e3a03000 	mov	r3, #0
    3828:	e1a05000 	mov	r5, r0
    382c:	e1a00001 	mov	r0, r1
    3830:	e5843000 	str	r3, [r4]
    3834:	eb000078 	bl	3a1c <_isatty>
    3838:	e3700001 	cmn	r0, #1
    383c:	1a000002 	bne	384c <_isatty_r+0x30>
    3840:	e5943000 	ldr	r3, [r4]
    3844:	e3530000 	cmp	r3, #0
    3848:	15853000 	strne	r3, [r5]
    384c:	e8bd4038 	pop	{r3, r4, r5, lr}
    3850:	e12fff1e 	bx	lr
    3854:	00004920 	.word	0x00004920

00003858 <_lseek_r>:
    3858:	e92d4038 	push	{r3, r4, r5, lr}
    385c:	e59f4034 	ldr	r4, [pc, #52]	; 3898 <_lseek_r+0x40>
    3860:	e1a05000 	mov	r5, r0
    3864:	e1a00001 	mov	r0, r1
    3868:	e1a01002 	mov	r1, r2
    386c:	e1a02003 	mov	r2, r3
    3870:	e3a03000 	mov	r3, #0
    3874:	e5843000 	str	r3, [r4]
    3878:	eb000071 	bl	3a44 <_lseek>
    387c:	e3700001 	cmn	r0, #1
    3880:	1a000002 	bne	3890 <_lseek_r+0x38>
    3884:	e5943000 	ldr	r3, [r4]
    3888:	e3530000 	cmp	r3, #0
    388c:	15853000 	strne	r3, [r5]
    3890:	e8bd4038 	pop	{r3, r4, r5, lr}
    3894:	e12fff1e 	bx	lr
    3898:	00004920 	.word	0x00004920

0000389c <_read_r>:
    389c:	e92d4038 	push	{r3, r4, r5, lr}
    38a0:	e59f4034 	ldr	r4, [pc, #52]	; 38dc <_read_r+0x40>
    38a4:	e1a05000 	mov	r5, r0
    38a8:	e1a00001 	mov	r0, r1
    38ac:	e1a01002 	mov	r1, r2
    38b0:	e1a02003 	mov	r2, r3
    38b4:	e3a03000 	mov	r3, #0
    38b8:	e5843000 	str	r3, [r4]
    38bc:	eb00008c 	bl	3af4 <_read>
    38c0:	e3700001 	cmn	r0, #1
    38c4:	1a000002 	bne	38d4 <_read_r+0x38>
    38c8:	e5943000 	ldr	r3, [r4]
    38cc:	e3530000 	cmp	r3, #0
    38d0:	15853000 	strne	r3, [r5]
    38d4:	e8bd4038 	pop	{r3, r4, r5, lr}
    38d8:	e12fff1e 	bx	lr
    38dc:	00004920 	.word	0x00004920

000038e0 <__cs3_premain>:
    38e0:	e92d4008 	push	{r3, lr}
    38e4:	eb0001a5 	bl	3f80 <__libc_init_array>
    38e8:	e59f3030 	ldr	r3, [pc, #48]	; 3920 <__cs3_premain+0x40>
    38ec:	e3530000 	cmp	r3, #0
    38f0:	15930000 	ldrne	r0, [r3]
    38f4:	01a00003 	moveq	r0, r3
    38f8:	e59f3024 	ldr	r3, [pc, #36]	; 3924 <__cs3_premain+0x44>
    38fc:	e3530000 	cmp	r3, #0
    3900:	15931000 	ldrne	r1, [r3]
    3904:	01a01003 	moveq	r1, r3
    3908:	e3a02000 	mov	r2, #0
    390c:	ebfff44e 	bl	a4c <main>
    3910:	e59f3010 	ldr	r3, [pc, #16]	; 3928 <__cs3_premain+0x48>
    3914:	e3530000 	cmp	r3, #0
    3918:	1bfff4ac 	blne	bd0 <exit>
    391c:	eafffffe 	b	391c <__cs3_premain+0x3c>
    3920:	000049c8 	.word	0x000049c8
    3924:	000049cc 	.word	0x000049cc
    3928:	00000bd0 	.word	0x00000bd0

0000392c <_close>:
    392c:	e92d4038 	push	{r3, r4, r5, lr}
    3930:	e1a05000 	mov	r5, r0
    3934:	eb0000e8 	bl	3cdc <__cs3_openslot>
    3938:	e2504000 	subs	r4, r0, #0
    393c:	0a000016 	beq	399c <_close+0x70>
    3940:	e2453001 	sub	r3, r5, #1
    3944:	e3530001 	cmp	r3, #1
    3948:	9a000008 	bls	3970 <_close+0x44>
    394c:	e3a00002 	mov	r0, #2
    3950:	e1a01004 	mov	r1, r4
    3954:	ef123456 	svc	0x00123456
    3958:	e3500000 	cmp	r0, #0
    395c:	03e03000 	mvneq	r3, #0
    3960:	05843000 	streq	r3, [r4]
    3964:	eb00010a 	bl	3d94 <__cs3_checkerror>
    3968:	e8bd4038 	pop	{r3, r4, r5, lr}
    396c:	e12fff1e 	bx	lr
    3970:	e3550001 	cmp	r5, #1
    3974:	13e03007 	mvnne	r3, #7
    3978:	03a03008 	moveq	r3, #8
    397c:	e7943003 	ldr	r3, [r4, r3]
    3980:	e5942000 	ldr	r2, [r4]
    3984:	e1520003 	cmp	r2, r3
    3988:	03e03000 	mvneq	r3, #0
    398c:	05843000 	streq	r3, [r4]
    3990:	03a00000 	moveq	r0, #0
    3994:	1affffec 	bne	394c <_close+0x20>
    3998:	eafffff2 	b	3968 <_close+0x3c>
    399c:	e3e00000 	mvn	r0, #0
    39a0:	eafffff0 	b	3968 <_close+0x3c>

000039a4 <_exit>:
    39a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    39a8:	e3a00018 	mov	r0, #24
    39ac:	e59f1004 	ldr	r1, [pc, #4]	; 39b8 <_exit+0x14>
    39b0:	ef123456 	svc	0x00123456
    39b4:	eafffffe 	b	39b4 <_exit+0x10>
    39b8:	00020026 	.word	0x00020026

000039bc <_fstat>:
    39bc:	e92d4038 	push	{r3, r4, r5, lr}
    39c0:	e1a04001 	mov	r4, r1
    39c4:	eb0000c4 	bl	3cdc <__cs3_openslot>
    39c8:	e2505000 	subs	r5, r0, #0
    39cc:	0a000010 	beq	3a14 <_fstat+0x58>
    39d0:	e1a00004 	mov	r0, r4
    39d4:	e3a01000 	mov	r1, #0
    39d8:	e3a0203c 	mov	r2, #60	; 0x3c
    39dc:	ebfffe30 	bl	32a4 <memset>
    39e0:	e3a03a02 	mov	r3, #8192	; 0x2000
    39e4:	e5843004 	str	r3, [r4, #4]
    39e8:	e3a03b01 	mov	r3, #1024	; 0x400
    39ec:	e584302c 	str	r3, [r4, #44]	; 0x2c
    39f0:	e3a0000c 	mov	r0, #12
    39f4:	e1a01005 	mov	r1, r5
    39f8:	ef123456 	svc	0x00123456
    39fc:	e3700001 	cmn	r0, #1
    3a00:	15840010 	strne	r0, [r4, #16]
    3a04:	13a00000 	movne	r0, #0
    3a08:	eb0000e1 	bl	3d94 <__cs3_checkerror>
    3a0c:	e8bd4038 	pop	{r3, r4, r5, lr}
    3a10:	e12fff1e 	bx	lr
    3a14:	e3e00000 	mvn	r0, #0
    3a18:	eafffffb 	b	3a0c <_fstat+0x50>

00003a1c <_isatty>:
    3a1c:	e92d4008 	push	{r3, lr}
    3a20:	eb0000ad 	bl	3cdc <__cs3_openslot>
    3a24:	e2501000 	subs	r1, r0, #0
    3a28:	01a00001 	moveq	r0, r1
    3a2c:	0a000002 	beq	3a3c <_isatty+0x20>
    3a30:	e3a00009 	mov	r0, #9
    3a34:	ef123456 	svc	0x00123456
    3a38:	eb0000d5 	bl	3d94 <__cs3_checkerror>
    3a3c:	e8bd4008 	pop	{r3, lr}
    3a40:	e12fff1e 	bx	lr

00003a44 <_lseek>:
    3a44:	e92d4070 	push	{r4, r5, r6, lr}
    3a48:	e24dd008 	sub	sp, sp, #8
    3a4c:	e1a04001 	mov	r4, r1
    3a50:	e1a05002 	mov	r5, r2
    3a54:	eb0000a0 	bl	3cdc <__cs3_openslot>
    3a58:	e2506000 	subs	r6, r0, #0
    3a5c:	0a000022 	beq	3aec <_lseek+0xa8>
    3a60:	e3550001 	cmp	r5, #1
    3a64:	0a00001d 	beq	3ae0 <_lseek+0x9c>
    3a68:	e3550002 	cmp	r5, #2
    3a6c:	0a000014 	beq	3ac4 <_lseek+0x80>
    3a70:	e3550000 	cmp	r5, #0
    3a74:	1a00000d 	bne	3ab0 <_lseek+0x6c>
    3a78:	e5963000 	ldr	r3, [r6]
    3a7c:	e3540000 	cmp	r4, #0
    3a80:	e88d0018 	stm	sp, {r3, r4}
    3a84:	ba000009 	blt	3ab0 <_lseek+0x6c>
    3a88:	e3a0000a 	mov	r0, #10
    3a8c:	e1a0100d 	mov	r1, sp
    3a90:	ef123456 	svc	0x00123456
    3a94:	e3700001 	cmn	r0, #1
    3a98:	15864004 	strne	r4, [r6, #4]
    3a9c:	11a00004 	movne	r0, r4
    3aa0:	eb0000bb 	bl	3d94 <__cs3_checkerror>
    3aa4:	e28dd008 	add	sp, sp, #8
    3aa8:	e8bd4070 	pop	{r4, r5, r6, lr}
    3aac:	e12fff1e 	bx	lr
    3ab0:	eb00012e 	bl	3f70 <__errno>
    3ab4:	e3a03016 	mov	r3, #22
    3ab8:	e5803000 	str	r3, [r0]
    3abc:	e3e00000 	mvn	r0, #0
    3ac0:	eafffff7 	b	3aa4 <_lseek+0x60>
    3ac4:	e3a0000c 	mov	r0, #12
    3ac8:	e1a01006 	mov	r1, r6
    3acc:	ef123456 	svc	0x00123456
    3ad0:	e3700001 	cmn	r0, #1
    3ad4:	10844000 	addne	r4, r4, r0
    3ad8:	1affffe6 	bne	3a78 <_lseek+0x34>
    3adc:	eaffffef 	b	3aa0 <_lseek+0x5c>
    3ae0:	e5963004 	ldr	r3, [r6, #4]
    3ae4:	e0844003 	add	r4, r4, r3
    3ae8:	eaffffe2 	b	3a78 <_lseek+0x34>
    3aec:	e3e00000 	mvn	r0, #0
    3af0:	eaffffeb 	b	3aa4 <_lseek+0x60>

00003af4 <_read>:
    3af4:	e92d4070 	push	{r4, r5, r6, lr}
    3af8:	e24dd010 	sub	sp, sp, #16
    3afc:	e1a06001 	mov	r6, r1
    3b00:	e1a05002 	mov	r5, r2
    3b04:	eb000074 	bl	3cdc <__cs3_openslot>
    3b08:	e2504000 	subs	r4, r0, #0
    3b0c:	0a00000e 	beq	3b4c <_read+0x58>
    3b10:	e5943000 	ldr	r3, [r4]
    3b14:	e98d0048 	stmib	sp, {r3, r6}
    3b18:	e58d500c 	str	r5, [sp, #12]
    3b1c:	e3a00006 	mov	r0, #6
    3b20:	e28d1004 	add	r1, sp, #4
    3b24:	ef123456 	svc	0x00123456
    3b28:	e3700001 	cmn	r0, #1
    3b2c:	15943004 	ldrne	r3, [r4, #4]
    3b30:	10600005 	rsbne	r0, r0, r5
    3b34:	10833000 	addne	r3, r3, r0
    3b38:	15843004 	strne	r3, [r4, #4]
    3b3c:	eb000094 	bl	3d94 <__cs3_checkerror>
    3b40:	e28dd010 	add	sp, sp, #16
    3b44:	e8bd4070 	pop	{r4, r5, r6, lr}
    3b48:	e12fff1e 	bx	lr
    3b4c:	e3e00000 	mvn	r0, #0
    3b50:	eafffffa 	b	3b40 <_read+0x4c>

00003b54 <_write>:
    3b54:	e92d4070 	push	{r4, r5, r6, lr}
    3b58:	e24dd010 	sub	sp, sp, #16
    3b5c:	e1a06001 	mov	r6, r1
    3b60:	e1a05002 	mov	r5, r2
    3b64:	eb00005c 	bl	3cdc <__cs3_openslot>
    3b68:	e2504000 	subs	r4, r0, #0
    3b6c:	0a00000e 	beq	3bac <_write+0x58>
    3b70:	e5943000 	ldr	r3, [r4]
    3b74:	e98d0048 	stmib	sp, {r3, r6}
    3b78:	e58d500c 	str	r5, [sp, #12]
    3b7c:	e3a00005 	mov	r0, #5
    3b80:	e28d1004 	add	r1, sp, #4
    3b84:	ef123456 	svc	0x00123456
    3b88:	e3700001 	cmn	r0, #1
    3b8c:	15943004 	ldrne	r3, [r4, #4]
    3b90:	10600005 	rsbne	r0, r0, r5
    3b94:	10833000 	addne	r3, r3, r0
    3b98:	15843004 	strne	r3, [r4, #4]
    3b9c:	eb00007c 	bl	3d94 <__cs3_checkerror>
    3ba0:	e28dd010 	add	sp, sp, #16
    3ba4:	e8bd4070 	pop	{r4, r5, r6, lr}
    3ba8:	e12fff1e 	bx	lr
    3bac:	e3e00000 	mvn	r0, #0
    3bb0:	eafffffa 	b	3ba0 <_write+0x4c>

00003bb4 <_sbrk>:
    3bb4:	e92d4008 	push	{r3, lr}
    3bb8:	e59f305c 	ldr	r3, [pc, #92]	; 3c1c <_sbrk+0x68>
    3bbc:	e59f105c 	ldr	r1, [pc, #92]	; 3c20 <_sbrk+0x6c>
    3bc0:	e5932000 	ldr	r2, [r3]
    3bc4:	e5913000 	ldr	r3, [r1]
    3bc8:	e3520000 	cmp	r2, #0
    3bcc:	e0830000 	add	r0, r3, r0
    3bd0:	0a000002 	beq	3be0 <_sbrk+0x2c>
    3bd4:	e0602002 	rsb	r2, r0, r2
    3bd8:	e3520000 	cmp	r2, #0
    3bdc:	ba000009 	blt	3c08 <_sbrk+0x54>
    3be0:	e04d2003 	sub	r2, sp, r3
    3be4:	e3520000 	cmp	r2, #0
    3be8:	ba000002 	blt	3bf8 <_sbrk+0x44>
    3bec:	e04d2000 	sub	r2, sp, r0
    3bf0:	e35200ff 	cmp	r2, #255	; 0xff
    3bf4:	da000003 	ble	3c08 <_sbrk+0x54>
    3bf8:	e5810000 	str	r0, [r1]
    3bfc:	e1a00003 	mov	r0, r3
    3c00:	e8bd4008 	pop	{r3, lr}
    3c04:	e12fff1e 	bx	lr
    3c08:	eb0000d8 	bl	3f70 <__errno>
    3c0c:	e3a0300c 	mov	r3, #12
    3c10:	e5803000 	str	r3, [r0]
    3c14:	e3e03000 	mvn	r3, #0
    3c18:	eafffff7 	b	3bfc <_sbrk+0x48>
    3c1c:	000048c8 	.word	0x000048c8
    3c20:	000048cc 	.word	0x000048cc

00003c24 <initialize_monitor_handles.part.0>:
    3c24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    3c28:	e59f50a4 	ldr	r5, [pc, #164]	; 3cd4 <initialize_monitor_handles.part.0+0xb0>
    3c2c:	e24dd014 	sub	sp, sp, #20
    3c30:	e3a03000 	mov	r3, #0
    3c34:	e3e02000 	mvn	r2, #0
    3c38:	e7852003 	str	r2, [r5, r3]
    3c3c:	e2833008 	add	r3, r3, #8
    3c40:	e35300a0 	cmp	r3, #160	; 0xa0
    3c44:	e59f4088 	ldr	r4, [pc, #136]	; 3cd4 <initialize_monitor_handles.part.0+0xb0>
    3c48:	1afffffa 	bne	3c38 <initialize_monitor_handles.part.0+0x14>
    3c4c:	e59f7084 	ldr	r7, [pc, #132]	; 3cd8 <initialize_monitor_handles.part.0+0xb4>
    3c50:	e3a06003 	mov	r6, #3
    3c54:	e3a03000 	mov	r3, #0
    3c58:	e58d7004 	str	r7, [sp, #4]
    3c5c:	e58d600c 	str	r6, [sp, #12]
    3c60:	e58d3008 	str	r3, [sp, #8]
    3c64:	e3a00001 	mov	r0, #1
    3c68:	e28d1004 	add	r1, sp, #4
    3c6c:	ef123456 	svc	0x00123456
    3c70:	e3a03004 	mov	r3, #4
    3c74:	e5840000 	str	r0, [r4]
    3c78:	e58d7004 	str	r7, [sp, #4]
    3c7c:	e58d600c 	str	r6, [sp, #12]
    3c80:	e58d3008 	str	r3, [sp, #8]
    3c84:	e3a00001 	mov	r0, #1
    3c88:	e08d1003 	add	r1, sp, r3
    3c8c:	ef123456 	svc	0x00123456
    3c90:	e3a03008 	mov	r3, #8
    3c94:	e5840008 	str	r0, [r4, #8]
    3c98:	e58d7004 	str	r7, [sp, #4]
    3c9c:	e58d600c 	str	r6, [sp, #12]
    3ca0:	e58d3008 	str	r3, [sp, #8]
    3ca4:	e3a00001 	mov	r0, #1
    3ca8:	e28d1004 	add	r1, sp, #4
    3cac:	ef123456 	svc	0x00123456
    3cb0:	e3700001 	cmn	r0, #1
    3cb4:	05943008 	ldreq	r3, [r4, #8]
    3cb8:	e5840010 	str	r0, [r4, #16]
    3cbc:	05843010 	streq	r3, [r4, #16]
    3cc0:	e3a03001 	mov	r3, #1
    3cc4:	e58530a0 	str	r3, [r5, #160]	; 0xa0
    3cc8:	e28dd014 	add	sp, sp, #20
    3ccc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    3cd0:	e12fff1e 	bx	lr
    3cd4:	00004924 	.word	0x00004924
    3cd8:	00004024 	.word	0x00004024

00003cdc <__cs3_openslot>:
    3cdc:	e92d4038 	push	{r3, r4, r5, lr}
    3ce0:	e59f5044 	ldr	r5, [pc, #68]	; 3d2c <__cs3_openslot+0x50>
    3ce4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
    3ce8:	e3530000 	cmp	r3, #0
    3cec:	e1a04000 	mov	r4, r0
    3cf0:	0bffffcb 	bleq	3c24 <initialize_monitor_handles.part.0>
    3cf4:	e3540013 	cmp	r4, #19
    3cf8:	8a000006 	bhi	3d18 <__cs3_openslot+0x3c>
    3cfc:	e7953184 	ldr	r3, [r5, r4, lsl #3]
    3d00:	e3730001 	cmn	r3, #1
    3d04:	159f0020 	ldrne	r0, [pc, #32]	; 3d2c <__cs3_openslot+0x50>
    3d08:	10800184 	addne	r0, r0, r4, lsl #3
    3d0c:	0a000001 	beq	3d18 <__cs3_openslot+0x3c>
    3d10:	e8bd4038 	pop	{r3, r4, r5, lr}
    3d14:	e12fff1e 	bx	lr
    3d18:	eb000094 	bl	3f70 <__errno>
    3d1c:	e3a03009 	mov	r3, #9
    3d20:	e5803000 	str	r3, [r0]
    3d24:	e3a00000 	mov	r0, #0
    3d28:	eafffff8 	b	3d10 <__cs3_openslot+0x34>
    3d2c:	00004924 	.word	0x00004924

00003d30 <__cs3_newslot>:
    3d30:	e92d4038 	push	{r3, r4, r5, lr}
    3d34:	e59f4054 	ldr	r4, [pc, #84]	; 3d90 <__cs3_newslot+0x60>
    3d38:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
    3d3c:	e3530000 	cmp	r3, #0
    3d40:	e1a05000 	mov	r5, r0
    3d44:	0bffffb6 	bleq	3c24 <initialize_monitor_handles.part.0>
    3d48:	e3a03000 	mov	r3, #0
    3d4c:	e7942183 	ldr	r2, [r4, r3, lsl #3]
    3d50:	e3720001 	cmn	r2, #1
    3d54:	e1a02183 	lsl	r2, r3, #3
    3d58:	0a000008 	beq	3d80 <__cs3_newslot+0x50>
    3d5c:	e2833001 	add	r3, r3, #1
    3d60:	e3530014 	cmp	r3, #20
    3d64:	1afffff8 	bne	3d4c <__cs3_newslot+0x1c>
    3d68:	eb000080 	bl	3f70 <__errno>
    3d6c:	e3a03018 	mov	r3, #24
    3d70:	e5803000 	str	r3, [r0]
    3d74:	e3a00000 	mov	r0, #0
    3d78:	e8bd4038 	pop	{r3, r4, r5, lr}
    3d7c:	e12fff1e 	bx	lr
    3d80:	e59f0008 	ldr	r0, [pc, #8]	; 3d90 <__cs3_newslot+0x60>
    3d84:	e5853000 	str	r3, [r5]
    3d88:	e0800002 	add	r0, r0, r2
    3d8c:	eafffff9 	b	3d78 <__cs3_newslot+0x48>
    3d90:	00004924 	.word	0x00004924

00003d94 <__cs3_checkerror>:
    3d94:	e3700001 	cmn	r0, #1
    3d98:	e92d4038 	push	{r3, r4, r5, lr}
    3d9c:	e1a04000 	mov	r4, r0
    3da0:	0a000002 	beq	3db0 <__cs3_checkerror+0x1c>
    3da4:	e1a00004 	mov	r0, r4
    3da8:	e8bd4038 	pop	{r3, r4, r5, lr}
    3dac:	e12fff1e 	bx	lr
    3db0:	eb00006e 	bl	3f70 <__errno>
    3db4:	e3a01000 	mov	r1, #0
    3db8:	e1a05000 	mov	r5, r0
    3dbc:	e3a00013 	mov	r0, #19
    3dc0:	ef123456 	svc	0x00123456
    3dc4:	e5850000 	str	r0, [r5]
    3dc8:	eafffff5 	b	3da4 <__cs3_checkerror+0x10>

00003dcc <initialize_argv>:
    3dcc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    3dd0:	e3a00c01 	mov	r0, #256	; 0x100
    3dd4:	e24dd008 	sub	sp, sp, #8
    3dd8:	ebffff75 	bl	3bb4 <_sbrk>
    3ddc:	e3700001 	cmn	r0, #1
    3de0:	e1a07000 	mov	r7, r0
    3de4:	0a000039 	beq	3ed0 <initialize_argv+0x104>
    3de8:	e3a05000 	mov	r5, #0
    3dec:	e3a03c01 	mov	r3, #256	; 0x100
    3df0:	e5c05000 	strb	r5, [r0]
    3df4:	e1a0100d 	mov	r1, sp
    3df8:	e3a00015 	mov	r0, #21
    3dfc:	e58d7000 	str	r7, [sp]
    3e00:	e58d3004 	str	r3, [sp, #4]
    3e04:	ef123456 	svc	0x00123456
    3e08:	e59f8140 	ldr	r8, [pc, #320]	; 3f50 <initialize_argv+0x184>
    3e0c:	e1a00005 	mov	r0, r5
    3e10:	e3a09001 	mov	r9, #1
    3e14:	e1a0a005 	mov	r10, r5
    3e18:	e588a0a4 	str	r10, [r8, #164]	; 0xa4
    3e1c:	e1a0c007 	mov	r12, r7
    3e20:	e1a04007 	mov	r4, r7
    3e24:	e3a06000 	mov	r6, #0
    3e28:	e5d41000 	ldrb	r1, [r4]
    3e2c:	e3510000 	cmp	r1, #0
    3e30:	0a00001d 	beq	3eac <initialize_argv+0xe0>
    3e34:	e3560000 	cmp	r6, #0
    3e38:	e2842001 	add	r2, r4, #1
    3e3c:	1a000006 	bne	3e5c <initialize_argv+0x90>
    3e40:	e3500000 	cmp	r0, #0
    3e44:	159830a4 	ldrne	r3, [r8, #164]	; 0xa4
    3e48:	1780c103 	strne	r12, [r0, r3, lsl #2]
    3e4c:	e59830a4 	ldr	r3, [r8, #164]	; 0xa4
    3e50:	e2833001 	add	r3, r3, #1
    3e54:	e58830a4 	str	r3, [r8, #164]	; 0xa4
    3e58:	e3a06001 	mov	r6, #1
    3e5c:	e3510020 	cmp	r1, #32
    3e60:	0a000022 	beq	3ef0 <initialize_argv+0x124>
    3e64:	e3510022 	cmp	r1, #34	; 0x22
    3e68:	13510027 	cmpne	r1, #39	; 0x27
    3e6c:	1a00001a 	bne	3edc <initialize_argv+0x110>
    3e70:	e5d43001 	ldrb	r3, [r4, #1]
    3e74:	e3530000 	cmp	r3, #0
    3e78:	0a000032 	beq	3f48 <initialize_argv+0x17c>
    3e7c:	e1510003 	cmp	r1, r3
    3e80:	0a00001f 	beq	3f04 <initialize_argv+0x138>
    3e84:	e2842002 	add	r2, r4, #2
    3e88:	ea000001 	b	3e94 <initialize_argv+0xc8>
    3e8c:	e1510003 	cmp	r1, r3
    3e90:	0a00001c 	beq	3f08 <initialize_argv+0x13c>
    3e94:	e3500000 	cmp	r0, #0
    3e98:	14cc3001 	strbne	r3, [r12], #1
    3e9c:	e1a04002 	mov	r4, r2
    3ea0:	e4d23001 	ldrb	r3, [r2], #1
    3ea4:	e3530000 	cmp	r3, #0
    3ea8:	1afffff7 	bne	3e8c <initialize_argv+0xc0>
    3eac:	e3590001 	cmp	r9, #1
    3eb0:	0a000016 	beq	3f10 <initialize_argv+0x144>
    3eb4:	e3590002 	cmp	r9, #2
    3eb8:	1a000020 	bne	3f40 <initialize_argv+0x174>
    3ebc:	e3a03000 	mov	r3, #0
    3ec0:	e5cc3000 	strb	r3, [r12]
    3ec4:	e59820a4 	ldr	r2, [r8, #164]	; 0xa4
    3ec8:	e7803102 	str	r3, [r0, r2, lsl #2]
    3ecc:	e58800a8 	str	r0, [r8, #168]	; 0xa8
    3ed0:	e28dd008 	add	sp, sp, #8
    3ed4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    3ed8:	e12fff1e 	bx	lr
    3edc:	e3500000 	cmp	r0, #0
    3ee0:	01a04002 	moveq	r4, r2
    3ee4:	14cc1001 	strbne	r1, [r12], #1
    3ee8:	11a04002 	movne	r4, r2
    3eec:	eaffffcd 	b	3e28 <initialize_argv+0x5c>
    3ef0:	e3500000 	cmp	r0, #0
    3ef4:	14cca001 	strbne	r10, [r12], #1
    3ef8:	e1a04002 	mov	r4, r2
    3efc:	e3a06000 	mov	r6, #0
    3f00:	eaffffc8 	b	3e28 <initialize_argv+0x5c>
    3f04:	e1a04002 	mov	r4, r2
    3f08:	e2844001 	add	r4, r4, #1
    3f0c:	eaffffc5 	b	3e28 <initialize_argv+0x5c>
    3f10:	e0670004 	rsb	r0, r7, r4
    3f14:	e2800010 	add	r0, r0, #16
    3f18:	e3c0000f 	bic	r0, r0, #15
    3f1c:	e2400c01 	sub	r0, r0, #256	; 0x100
    3f20:	ebffff23 	bl	3bb4 <_sbrk>
    3f24:	e59800a4 	ldr	r0, [r8, #164]	; 0xa4
    3f28:	e2800004 	add	r0, r0, #4
    3f2c:	e3c00003 	bic	r0, r0, #3
    3f30:	e1a00100 	lsl	r0, r0, #2
    3f34:	ebffff1e 	bl	3bb4 <_sbrk>
    3f38:	e3700001 	cmn	r0, #1
    3f3c:	0affffe3 	beq	3ed0 <initialize_argv+0x104>
    3f40:	e2899001 	add	r9, r9, #1
    3f44:	eaffffb3 	b	3e18 <initialize_argv+0x4c>
    3f48:	e1a04002 	mov	r4, r2
    3f4c:	eaffffd6 	b	3eac <initialize_argv+0xe0>
    3f50:	00004924 	.word	0x00004924

00003f54 <__cs3_isr_interrupt>:
    3f54:	eafffffe 	b	3f54 <__cs3_isr_interrupt>

00003f58 <__cs3_isr_undef>:
    3f58:	eafffffe 	b	3f58 <__cs3_isr_undef>

00003f5c <__cs3_isr_swi>:
    3f5c:	eafffffe 	b	3f5c <__cs3_isr_swi>

00003f60 <__cs3_isr_pabort>:
    3f60:	eafffffe 	b	3f60 <__cs3_isr_pabort>

00003f64 <__cs3_isr_dabort>:
    3f64:	eafffffe 	b	3f64 <__cs3_isr_dabort>

00003f68 <__cs3_isr_irq>:
    3f68:	eafffffe 	b	3f68 <__cs3_isr_irq>

00003f6c <__cs3_isr_fiq>:
    3f6c:	eafffffe 	b	3f6c <__cs3_isr_fiq>

00003f70 <__errno>:
    3f70:	e59f3004 	ldr	r3, [pc, #4]	; 3f7c <__errno+0xc>
    3f74:	e5930000 	ldr	r0, [r3]
    3f78:	e12fff1e 	bx	lr
    3f7c:	00004088 	.word	0x00004088

00003f80 <__libc_init_array>:
    3f80:	e92d4070 	push	{r4, r5, r6, lr}
    3f84:	e59f506c 	ldr	r5, [pc, #108]	; 3ff8 <__libc_init_array+0x78>
    3f88:	e59f606c 	ldr	r6, [pc, #108]	; 3ffc <__libc_init_array+0x7c>
    3f8c:	e0656006 	rsb	r6, r5, r6
    3f90:	e1b06146 	asrs	r6, r6, #2
    3f94:	12455004 	subne	r5, r5, #4
    3f98:	13a04000 	movne	r4, #0
    3f9c:	0a000005 	beq	3fb8 <__libc_init_array+0x38>
    3fa0:	e5b53004 	ldr	r3, [r5, #4]!
    3fa4:	e2844001 	add	r4, r4, #1
    3fa8:	e1a0e00f 	mov	lr, pc
    3fac:	e12fff13 	bx	r3
    3fb0:	e1560004 	cmp	r6, r4
    3fb4:	1afffff9 	bne	3fa0 <__libc_init_array+0x20>
    3fb8:	e59f5040 	ldr	r5, [pc, #64]	; 4000 <__libc_init_array+0x80>
    3fbc:	e59f6040 	ldr	r6, [pc, #64]	; 4004 <__libc_init_array+0x84>
    3fc0:	e0656006 	rsb	r6, r5, r6
    3fc4:	eb000017 	bl	4028 <_init>
    3fc8:	e1b06146 	asrs	r6, r6, #2
    3fcc:	12455004 	subne	r5, r5, #4
    3fd0:	13a04000 	movne	r4, #0
    3fd4:	0a000005 	beq	3ff0 <__libc_init_array+0x70>
    3fd8:	e5b53004 	ldr	r3, [r5, #4]!
    3fdc:	e2844001 	add	r4, r4, #1
    3fe0:	e1a0e00f 	mov	lr, pc
    3fe4:	e12fff13 	bx	r3
    3fe8:	e1560004 	cmp	r6, r4
    3fec:	1afffff9 	bne	3fd8 <__libc_init_array+0x58>
    3ff0:	e8bd4070 	pop	{r4, r5, r6, lr}
    3ff4:	e12fff1e 	bx	lr
    3ff8:	00004040 	.word	0x00004040
    3ffc:	00004040 	.word	0x00004040
    4000:	00004040 	.word	0x00004040
    4004:	0000404c 	.word	0x0000404c

Disassembly of section .rodata:

0000400c <_global_impure_ptr-0xc>:
    400c:	72617453 	.word	0x72617453
    4010:	676e6974 	.word	0x676e6974
    4014:	002e2e2e 	.word	0x002e2e2e

00004018 <_global_impure_ptr>:
    4018:	00004090 00000043 0000000a 0074743a     .@..C.......:tt.

00004028 <_init>:
    4028:	e1a0c00d 	mov	r12, sp
    402c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4030:	e24cb004 	sub	r11, r12, #4
    4034:	e24bd028 	sub	sp, r11, #40	; 0x28
    4038:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    403c:	e12fff1e 	bx	lr

00004040 <__init_array_start>:
    4040:	00001004 	.word	0x00001004

00004044 <__frame_dummy_init_array_entry>:
    4044:	00000208 00003dcc                       .....=..

0000404c <__libc_fini>:
    404c:	e1a0c00d 	mov	r12, sp
    4050:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    4054:	e24cb004 	sub	r11, r12, #4
    4058:	e24bd028 	sub	sp, r11, #40	; 0x28
    405c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    4060:	e12fff1e 	bx	lr

00004064 <__fini_array_start>:
    4064:	000001c4 	.word	0x000001c4

00004068 <__cs3_regions>:
	...
    4074:	000048d0 	.word	0x000048d0
    4078:	00000100 	.word	0x00000100

0000407c <__cs3_regions_end>:
    407c:	00000000 	.word	0x00000000
